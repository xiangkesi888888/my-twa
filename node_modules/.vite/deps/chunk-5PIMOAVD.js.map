{
  "version": 3,
  "sources": ["../../symbol.inspect/index.ts", "../../@ton/core/dist/utils/crc16.js", "../../@ton/core/dist/address/Address.js", "../../@ton/core/dist/address/ExternalAddress.js", "../../@ton/core/dist/utils/base32.js", "../../@ton/core/dist/address/ADNLAddress.js", "../../@ton/core/dist/boc/utils/paddedBits.js", "../../@ton/core/dist/boc/BitString.js", "../../@ton/core/dist/boc/BitBuilder.js", "../../@ton/core/dist/boc/CellType.js", "../../@ton/core/dist/dict/utils/readUnaryLength.js", "../../@ton/core/dist/dict/generateMerkleProof.js", "../../@ton/core/dist/dict/generateMerkleUpdate.js", "../../@ton/core/dist/dict/parseDict.js", "../../@ton/core/dist/dict/utils/findCommonPrefix.js", "../../@ton/core/dist/dict/serializeDict.js", "../../@ton/core/dist/dict/utils/internalKeySerializer.js", "../../@ton/core/dist/dict/Dictionary.js", "../../@ton/core/dist/boc/utils/strings.js", "../../@ton/core/dist/boc/Slice.js", "../../@ton/core/dist/boc/BitReader.js", "../../@ton/core/dist/boc/cell/exoticLibrary.js", "../../@ton/core/dist/boc/cell/exoticMerkleProof.js", "../../@ton/core/dist/boc/cell/exoticMerkleUpdate.js", "../../@ton/core/dist/boc/cell/LevelMask.js", "../../@ton/core/dist/boc/cell/exoticPruned.js", "../../@ton/core/dist/boc/cell/resolveExotic.js", "../../@ton/core/dist/boc/cell/descriptor.js", "../../jssha/src/converters.ts", "../../jssha/src/common.ts", "../../jssha/node_modules/tslib/tslib.es6.js", "../../jssha/src/primitives_32.ts", "../../jssha/src/sha1.ts", "../../jssha/src/sha256.ts", "../../jssha/src/primitives_64.ts", "../../jssha/src/sha512.ts", "../../jssha/src/sha3.ts", "../../jssha/src/sha.ts", "../../@ton/crypto-primitives/dist/browser/getSecureRandom.js", "../../@ton/crypto-primitives/dist/browser/hmac_sha512.js", "../../@ton/crypto-primitives/dist/browser/pbkdf2_sha512.js", "../../@ton/crypto-primitives/dist/browser/sha256.js", "../../@ton/crypto-primitives/dist/browser/sha512.js", "../../@ton/crypto-primitives/dist/browser.js", "../../@ton/crypto/dist/primitives/sha256.js", "../../@ton/crypto/dist/primitives/sha512.js", "../../@ton/crypto/dist/primitives/pbkdf2_sha512.js", "../../@ton/crypto/dist/primitives/hmac_sha512.js", "../../@ton/crypto/dist/primitives/getSecureRandom.js", "../../@ton/crypto/dist/passwords/wordlist.js", "../../@ton/crypto/dist/passwords/newSecureWords.js", "../../@ton/crypto/dist/passwords/newSecurePassphrase.js", "../../@ton/crypto/dist/utils/binary.js", "../../@ton/crypto/dist/mnemonic/wordlist.js", "../../@ton/crypto/dist/mnemonic/mnemonic.js", "../../@ton/crypto/dist/primitives/nacl.js", "../../@ton/crypto/dist/hd/ed25519.js", "../../@ton/crypto/dist/hd/symmetric.js", "../../@ton/crypto/dist/hd/mnemonics.js", "../../@ton/crypto/dist/index.js", "../../@ton/core/dist/boc/cell/wonderCalculator.js", "../../@ton/core/dist/boc/cell/utils/topologicalSort.js", "../../@ton/core/dist/utils/bitsForNumber.js", "../../@ton/core/dist/utils/crc32c.js", "../../@ton/core/dist/boc/cell/serialization.js", "../../@ton/core/dist/boc/Cell.js", "../../@ton/core/dist/boc/Builder.js", "../../@ton/core/dist/types/SimpleLibrary.js", "../../@ton/core/dist/types/TickTock.js", "../../@ton/core/dist/types/StateInit.js", "../../@ton/core/dist/address/contractAddress.js", "../../@ton/core/dist/tuple/tuple.js", "../../@ton/core/dist/tuple/reader.js", "../../@ton/core/dist/tuple/builder.js", "../../@ton/core/dist/utils/convert.js", "../../@ton/core/dist/types/_helpers.js", "../../@ton/core/dist/types/AccountState.js", "../../@ton/core/dist/types/CurrencyCollection.js", "../../@ton/core/dist/types/AccountStorage.js", "../../@ton/core/dist/types/StorageUsed.js", "../../@ton/core/dist/types/StorageInto.js", "../../@ton/core/dist/types/Account.js", "../../@ton/core/dist/types/AccountStatus.js", "../../@ton/core/dist/types/AccountStatusChange.js", "../../@ton/core/dist/types/CommonMessageInfoRelaxed.js", "../../@ton/core/dist/types/MessageRelaxed.js", "../../@ton/core/dist/types/OutList.js", "../../@ton/core/dist/types/CommonMessageInfo.js", "../../@ton/core/dist/types/ComputeSkipReason.js", "../../@ton/core/dist/types/DepthBalanceInfo.js", "../../@ton/core/dist/types/HashUpdate.js", "../../@ton/core/dist/types/MasterchainStateExtra.js", "../../@ton/core/dist/types/Message.js", "../../@ton/core/dist/types/SendMode.js", "../../@ton/core/dist/types/ShardAccount.js", "../../@ton/core/dist/types/ShardAccounts.js", "../../@ton/core/dist/types/ShardIdent.js", "../../@ton/core/dist/types/ShardStateUnsplit.js", "../../@ton/core/dist/types/SplitMergeInfo.js", "../../@ton/core/dist/types/StorageUsedShort.js", "../../@ton/core/dist/types/TransactionActionPhase.js", "../../@ton/core/dist/types/TransactionBouncePhase.js", "../../@ton/core/dist/types/TransactionComputePhase.js", "../../@ton/core/dist/types/TransactionCreditPhase.js", "../../@ton/core/dist/types/TransactionStoragePhase.js", "../../@ton/core/dist/types/TransactionDescription.js", "../../@ton/core/dist/types/Transaction.js", "../../@ton/core/dist/types/_export.js", "../../@ton/core/dist/contract/openContract.js", "../../@ton/core/dist/contract/ComputeError.js", "../../@ton/core/dist/utils/getMethodId.js", "../../@ton/core/dist/crypto/safeSign.js", "../../@ton/core/dist/index.js"],
  "sourcesContent": ["/**\n * <symbol> that can be used to declare custom inspect functions.\n *\n * same as Symbol.for('nodejs.util.inspect.custom')\n * same as util.inspect.custom\n */\nconst SymbolInspect = Symbol.for('nodejs.util.inspect.custom');\nexport = SymbolInspect;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crc16 = void 0;\nfunction crc16(data) {\n    const poly = 0x1021;\n    let reg = 0;\n    const message = Buffer.alloc(data.length + 2);\n    message.set(data);\n    for (let byte of message) {\n        let mask = 0x80;\n        while (mask > 0) {\n            reg <<= 1;\n            if (byte & mask) {\n                reg += 1;\n            }\n            mask >>= 1;\n            if (reg > 0xffff) {\n                reg &= 0xffff;\n                reg ^= poly;\n            }\n        }\n    }\n    return Buffer.from([Math.floor(reg / 256), reg % 256]);\n}\nexports.crc16 = crc16;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.address = exports.Address = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst crc16_1 = require(\"../utils/crc16\");\nconst bounceable_tag = 0x11;\nconst non_bounceable_tag = 0x51;\nconst test_flag = 0x80;\nfunction parseFriendlyAddress(src) {\n    if (typeof src === 'string' && !Address.isFriendly(src)) {\n        throw new Error('Unknown address type');\n    }\n    const data = Buffer.isBuffer(src) ? src : Buffer.from(src, 'base64');\n    // 1byte tag + 1byte workchain + 32 bytes hash + 2 byte crc\n    if (data.length !== 36) {\n        throw new Error('Unknown address type: byte length is not equal to 36');\n    }\n    // Prepare data\n    const addr = data.subarray(0, 34);\n    const crc = data.subarray(34, 36);\n    const calcedCrc = (0, crc16_1.crc16)(addr);\n    if (!(calcedCrc[0] === crc[0] && calcedCrc[1] === crc[1])) {\n        throw new Error('Invalid checksum: ' + src);\n    }\n    // Parse tag\n    let tag = addr[0];\n    let isTestOnly = false;\n    let isBounceable = false;\n    if (tag & test_flag) {\n        isTestOnly = true;\n        tag = tag ^ test_flag;\n    }\n    if ((tag !== bounceable_tag) && (tag !== non_bounceable_tag))\n        throw \"Unknown address tag\";\n    isBounceable = tag === bounceable_tag;\n    let workchain = null;\n    if (addr[1] === 0xff) { // TODO we should read signed integer here\n        workchain = -1;\n    }\n    else {\n        workchain = addr[1];\n    }\n    const hashPart = addr.subarray(2, 34);\n    return { isTestOnly, isBounceable, workchain, hashPart };\n}\nclass Address {\n    static isAddress(src) {\n        return src instanceof Address;\n    }\n    static isFriendly(source) {\n        // Check length\n        if (source.length !== 48) {\n            return false;\n        }\n        // Check if address is valid base64\n        if (!/[A-Za-z0-9+/_-]+/.test(source)) {\n            return false;\n        }\n        return true;\n    }\n    static isRaw(source) {\n        // Check if has delimiter\n        if (source.indexOf(':') === -1) {\n            return false;\n        }\n        let [wc, hash] = source.split(':');\n        // wc is not valid\n        if (!Number.isInteger(parseFloat(wc))) {\n            return false;\n        }\n        // hash is not valid\n        if (!/[a-f0-9]+/.test(hash.toLowerCase())) {\n            return false;\n        }\n        // has is not correct\n        if (hash.length !== 64) {\n            return false;\n        }\n        return true;\n    }\n    static normalize(source) {\n        if (typeof source === 'string') {\n            return Address.parse(source).toString();\n        }\n        else {\n            return source.toString();\n        }\n    }\n    static parse(source) {\n        if (Address.isFriendly(source)) {\n            return this.parseFriendly(source).address;\n        }\n        else if (Address.isRaw(source)) {\n            return this.parseRaw(source);\n        }\n        else {\n            throw new Error('Unknown address type: ' + source);\n        }\n    }\n    static parseRaw(source) {\n        let workChain = parseInt(source.split(\":\")[0]);\n        let hash = Buffer.from(source.split(\":\")[1], 'hex');\n        return new Address(workChain, hash);\n    }\n    static parseFriendly(source) {\n        if (Buffer.isBuffer(source)) {\n            let r = parseFriendlyAddress(source);\n            return {\n                isBounceable: r.isBounceable,\n                isTestOnly: r.isTestOnly,\n                address: new Address(r.workchain, r.hashPart)\n            };\n        }\n        else {\n            let addr = source.replace(/\\-/g, '+').replace(/_/g, '\\/'); // Convert from url-friendly to true base64\n            let r = parseFriendlyAddress(addr);\n            return {\n                isBounceable: r.isBounceable,\n                isTestOnly: r.isTestOnly,\n                address: new Address(r.workchain, r.hashPart)\n            };\n        }\n    }\n    constructor(workChain, hash) {\n        this.toRawString = () => {\n            return this.workChain + ':' + this.hash.toString('hex');\n        };\n        this.toRaw = () => {\n            const addressWithChecksum = Buffer.alloc(36);\n            addressWithChecksum.set(this.hash);\n            addressWithChecksum.set([this.workChain, this.workChain, this.workChain, this.workChain], 32);\n            return addressWithChecksum;\n        };\n        this.toStringBuffer = (args) => {\n            let testOnly = (args && args.testOnly !== undefined) ? args.testOnly : false;\n            let bounceable = (args && args.bounceable !== undefined) ? args.bounceable : true;\n            let tag = bounceable ? bounceable_tag : non_bounceable_tag;\n            if (testOnly) {\n                tag |= test_flag;\n            }\n            const addr = Buffer.alloc(34);\n            addr[0] = tag;\n            addr[1] = this.workChain;\n            addr.set(this.hash, 2);\n            const addressWithChecksum = Buffer.alloc(36);\n            addressWithChecksum.set(addr);\n            addressWithChecksum.set((0, crc16_1.crc16)(addr), 34);\n            return addressWithChecksum;\n        };\n        this.toString = (args) => {\n            let urlSafe = (args && args.urlSafe !== undefined) ? args.urlSafe : true;\n            let buffer = this.toStringBuffer(args);\n            if (urlSafe) {\n                return buffer.toString('base64').replace(/\\+/g, '-').replace(/\\//g, '_');\n            }\n            else {\n                return buffer.toString('base64');\n            }\n        };\n        this[_a] = () => this.toString();\n        if (hash.length !== 32) {\n            throw new Error('Invalid address hash length: ' + hash.length);\n        }\n        this.workChain = workChain;\n        this.hash = hash;\n        Object.freeze(this);\n    }\n    equals(src) {\n        if (src.workChain !== this.workChain) {\n            return false;\n        }\n        return src.hash.equals(this.hash);\n    }\n}\nexports.Address = Address;\n_a = symbol_inspect_1.default;\nfunction address(src) {\n    return Address.parse(src);\n}\nexports.address = address;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalAddress = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nclass ExternalAddress {\n    static isAddress(src) {\n        return src instanceof ExternalAddress;\n    }\n    constructor(value, bits) {\n        this[_a] = () => this.toString();\n        this.value = value;\n        this.bits = bits;\n    }\n    toString() {\n        return `External<${this.bits}:${this.value}>`;\n    }\n}\nexports.ExternalAddress = ExternalAddress;\n_a = symbol_inspect_1.default;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.base32Decode = exports.base32Encode = void 0;\nconst alphabet = 'abcdefghijklmnopqrstuvwxyz234567';\nfunction base32Encode(buffer) {\n    const length = buffer.byteLength;\n    let bits = 0;\n    let value = 0;\n    let output = '';\n    for (let i = 0; i < length; i++) {\n        value = (value << 8) | buffer[i];\n        bits += 8;\n        while (bits >= 5) {\n            output += alphabet[(value >>> (bits - 5)) & 31];\n            bits -= 5;\n        }\n    }\n    if (bits > 0) {\n        output += alphabet[(value << (5 - bits)) & 31];\n    }\n    return output;\n}\nexports.base32Encode = base32Encode;\nfunction readChar(alphabet, char) {\n    const idx = alphabet.indexOf(char);\n    if (idx === -1) {\n        throw new Error('Invalid character found: ' + char);\n    }\n    return idx;\n}\nfunction base32Decode(input) {\n    let cleanedInput;\n    cleanedInput = input.toLowerCase();\n    const { length } = cleanedInput;\n    let bits = 0;\n    let value = 0;\n    let index = 0;\n    const output = Buffer.alloc(((length * 5) / 8) | 0);\n    for (let i = 0; i < length; i++) {\n        value = (value << 5) | readChar(alphabet, cleanedInput[i]);\n        bits += 5;\n        if (bits >= 8) {\n            output[index++] = (value >>> (bits - 8)) & 255;\n            bits -= 8;\n        }\n    }\n    return output;\n}\nexports.base32Decode = base32Decode;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ADNLAddress = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst base32_1 = require(\"../utils/base32\");\nconst crc16_1 = require(\"../utils/crc16\");\nclass ADNLAddress {\n    static parseFriendly(src) {\n        if (src.length !== 55) {\n            throw Error('Invalid address');\n        }\n        // Decoding\n        src = 'f' + src;\n        let decoded = (0, base32_1.base32Decode)(src);\n        if (decoded[0] !== 0x2d) {\n            throw Error('Invalid address');\n        }\n        let gotHash = decoded.slice(33);\n        let hash = (0, crc16_1.crc16)(decoded.slice(0, 33));\n        if (!hash.equals(gotHash)) {\n            throw Error('Invalid address');\n        }\n        return new ADNLAddress(decoded.slice(1, 33));\n    }\n    static parseRaw(src) {\n        const data = Buffer.from(src, 'base64');\n        return new ADNLAddress(data);\n    }\n    constructor(address) {\n        this.toRaw = () => {\n            return this.address.toString('hex').toUpperCase();\n        };\n        this.toString = () => {\n            let data = Buffer.concat([Buffer.from([0x2D]), this.address]);\n            let hash = (0, crc16_1.crc16)(data);\n            data = Buffer.concat([data, hash]);\n            return (0, base32_1.base32Encode)(data).slice(1);\n        };\n        this[_a] = () => this.toString();\n        if (address.length !== 32) {\n            throw Error('Invalid address');\n        }\n        this.address = address;\n    }\n    equals(b) {\n        return this.address.equals(b.address);\n    }\n}\nexports.ADNLAddress = ADNLAddress;\n_a = symbol_inspect_1.default;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.paddedBufferToBits = exports.bitsToPaddedBuffer = void 0;\nconst BitBuilder_1 = require(\"../BitBuilder\");\nconst BitString_1 = require(\"../BitString\");\nfunction bitsToPaddedBuffer(bits) {\n    // Create builder\n    let builder = new BitBuilder_1.BitBuilder(Math.ceil(bits.length / 8) * 8);\n    builder.writeBits(bits);\n    // Apply padding\n    let padding = Math.ceil(bits.length / 8) * 8 - bits.length;\n    for (let i = 0; i < padding; i++) {\n        if (i === 0) {\n            builder.writeBit(1);\n        }\n        else {\n            builder.writeBit(0);\n        }\n    }\n    return builder.buffer();\n}\nexports.bitsToPaddedBuffer = bitsToPaddedBuffer;\nfunction paddedBufferToBits(buff) {\n    let bitLen = 0;\n    // Finding rightmost non-zero byte in the buffer\n    for (let i = buff.length - 1; i >= 0; i--) {\n        if (buff[i] !== 0) {\n            const testByte = buff[i];\n            // Looking for a rightmost set padding bit\n            let bitPos = testByte & -testByte;\n            if ((bitPos & 1) == 0) {\n                // It's power of 2 (only one bit set)\n                bitPos = Math.log2(bitPos) + 1;\n            }\n            if (i > 0) {\n                // If we are dealing with more than 1 byte buffer\n                bitLen = i << 3; //Number of full bytes * 8\n            }\n            bitLen += 8 - bitPos;\n            break;\n        }\n    }\n    return new BitString_1.BitString(buff, 0, bitLen);\n}\nexports.paddedBufferToBits = paddedBufferToBits;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitString = void 0;\nconst paddedBits_1 = require(\"./utils/paddedBits\");\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\n/**\n * BitString is a class that represents a bitstring in a buffer with a specified offset and length\n */\nclass BitString {\n    /**\n     * Checks if supplied object is BitString\n     * @param src is unknow object\n     * @returns true if object is BitString and false otherwise\n     **/\n    static isBitString(src) {\n        return src instanceof BitString;\n    }\n    /**\n     * Constructing BitString from a buffer\n     * @param data data that contains the bitstring data. NOTE: We are expecting this buffer to be NOT modified\n     * @param offset offset in bits from the start of the buffer\n     * @param length length of the bitstring in bits\n     */\n    constructor(data, offset, length) {\n        this[_a] = () => this.toString();\n        // Check bounds\n        if (length < 0) {\n            throw new Error(`Length ${length} is out of bounds`);\n        }\n        this._length = length;\n        this._data = data;\n        this._offset = offset;\n    }\n    /**\n     * Returns the length of the bitstring\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * Returns the bit at the specified index\n     * @param index index of the bit\n     * @throws Error if index is out of bounds\n     * @returns true if the bit is set, false otherwise\n     */\n    at(index) {\n        // Check bounds\n        if (index >= this._length) {\n            throw new Error(`Index ${index} > ${this._length} is out of bounds`);\n        }\n        if (index < 0) {\n            throw new Error(`Index ${index} < 0 is out of bounds`);\n        }\n        // Calculcate offsets\n        let byteIndex = (this._offset + index) >> 3;\n        let bitIndex = 7 - ((this._offset + index) % 8); // NOTE: We are using big endian\n        // Return the bit\n        return (this._data[byteIndex] & (1 << bitIndex)) !== 0;\n    }\n    /**\n     * Get a subscring of the bitstring\n     * @param offset\n     * @param length\n     * @returns\n     */\n    substring(offset, length) {\n        // Check offset\n        if (offset > this._length) {\n            throw new Error(`Offset(${offset}) > ${this._length} is out of bounds`);\n        }\n        if (offset < 0) {\n            throw new Error(`Offset(${offset}) < 0 is out of bounds`);\n        }\n        // Corner case of empty string\n        if (length === 0) {\n            return BitString.EMPTY;\n        }\n        if (offset + length > this._length) {\n            throw new Error(`Offset ${offset} + Length ${length} > ${this._length} is out of bounds`);\n        }\n        // Create substring\n        return new BitString(this._data, this._offset + offset, length);\n    }\n    /**\n     * Try to get a buffer from the bitstring without allocations\n     * @param offset offset in bits\n     * @param length length in bits\n     * @returns buffer if the bitstring is aligned to bytes, null otherwise\n     */\n    subbuffer(offset, length) {\n        // Check offset\n        if (offset > this._length) {\n            throw new Error(`Offset ${offset} is out of bounds`);\n        }\n        if (offset < 0) {\n            throw new Error(`Offset ${offset} is out of bounds`);\n        }\n        if (offset + length > this._length) {\n            throw new Error(`Offset + Lenght = ${offset + length} is out of bounds`);\n        }\n        // Check alignment\n        if (length % 8 !== 0) {\n            return null;\n        }\n        if ((this._offset + offset) % 8 !== 0) {\n            return null;\n        }\n        // Create substring\n        let start = ((this._offset + offset) >> 3);\n        let end = start + (length >> 3);\n        return this._data.subarray(start, end);\n    }\n    /**\n     * Checks for equality\n     * @param b other bitstring\n     * @returns true if the bitstrings are equal, false otherwise\n     */\n    equals(b) {\n        if (this._length !== b._length) {\n            return false;\n        }\n        for (let i = 0; i < this._length; i++) {\n            if (this.at(i) !== b.at(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /**\n     * Format to canonical string\n     * @returns formatted bits as a string\n     */\n    toString() {\n        const padded = (0, paddedBits_1.bitsToPaddedBuffer)(this);\n        if (this._length % 4 === 0) {\n            const s = padded.subarray(0, Math.ceil(this._length / 8)).toString('hex').toUpperCase();\n            if (this._length % 8 === 0) {\n                return s;\n            }\n            else {\n                return s.substring(0, s.length - 1);\n            }\n        }\n        else {\n            const hex = padded.toString('hex').toUpperCase();\n            if (this._length % 8 <= 4) {\n                return hex.substring(0, hex.length - 1) + '_';\n            }\n            else {\n                return hex + '_';\n            }\n        }\n    }\n}\nexports.BitString = BitString;\n_a = symbol_inspect_1.default;\nBitString.EMPTY = new BitString(Buffer.alloc(0), 0, 0);\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitBuilder = void 0;\nconst Address_1 = require(\"../address/Address\");\nconst ExternalAddress_1 = require(\"../address/ExternalAddress\");\nconst BitString_1 = require(\"./BitString\");\n/**\n * Class for building bit strings\n */\nclass BitBuilder {\n    constructor(size = 1023) {\n        this._buffer = Buffer.alloc(Math.ceil(size / 8));\n        this._length = 0;\n    }\n    /**\n     * Current number of bits written\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * Write a single bit\n     * @param value bit to write, true or positive number for 1, false or zero or negative for 0\n     */\n    writeBit(value) {\n        // Check overflow\n        let n = this._length;\n        if (n > this._buffer.length * 8) {\n            throw new Error(\"BitBuilder overflow\");\n        }\n        // Set bit\n        if ((typeof value === 'boolean' && value === true) || (typeof value === 'number' && value > 0)) {\n            this._buffer[(n / 8) | 0] |= 1 << (7 - (n % 8));\n        }\n        // Advance\n        this._length++;\n    }\n    /**\n     * Copy bits from BitString\n     * @param src source bits\n     */\n    writeBits(src) {\n        for (let i = 0; i < src.length; i++) {\n            this.writeBit(src.at(i));\n        }\n    }\n    /**\n     * Write bits from buffer\n     * @param src source buffer\n     */\n    writeBuffer(src) {\n        // Special case for aligned offsets\n        if (this._length % 8 === 0) {\n            if (this._length + src.length * 8 > this._buffer.length * 8) {\n                throw new Error(\"BitBuilder overflow\");\n            }\n            src.copy(this._buffer, this._length / 8);\n            this._length += src.length * 8;\n        }\n        else {\n            for (let i = 0; i < src.length; i++) {\n                this.writeUint(src[i], 8);\n            }\n        }\n    }\n    /**\n     * Write uint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     */\n    writeUint(value, bits) {\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        const v = BigInt(value);\n        if (bits === 0) {\n            if (v !== 0n) {\n                throw Error(`value is not zero for ${bits} bits. Got ${value}`);\n            }\n            else {\n                return;\n            }\n        }\n        const vBits = (1n << BigInt(bits));\n        if (v < 0 || v >= vBits) {\n            throw Error(`bitLength is too small for a value ${value}. Got ${bits}`);\n        }\n        if (this._length + bits > this._buffer.length * 8) {\n            throw new Error(\"BitBuilder overflow\");\n        }\n        const tillByte = 8 - (this._length % 8);\n        if (tillByte > 0) {\n            const bidx = Math.floor(this._length / 8);\n            if (bits < tillByte) {\n                const wb = Number(v);\n                this._buffer[bidx] |= wb << (tillByte - bits);\n                this._length += bits;\n            }\n            else {\n                const wb = Number(v >> BigInt(bits - tillByte));\n                this._buffer[bidx] |= wb;\n                this._length += tillByte;\n            }\n        }\n        bits -= tillByte;\n        while (bits > 0) {\n            if (bits >= 8) {\n                this._buffer[this._length / 8] = Number((v >> BigInt(bits - 8)) & 0xffn);\n                this._length += 8;\n                bits -= 8;\n            }\n            else {\n                this._buffer[this._length / 8] = Number((v << BigInt(8 - bits)) & 0xffn);\n                this._length += bits;\n                bits = 0;\n            }\n        }\n    }\n    /**\n     * Write int value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     */\n    writeInt(value, bits) {\n        let v = BigInt(value);\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        // Corner case for zero bits\n        if (bits === 0) {\n            if (value !== 0n) {\n                throw Error(`value is not zero for ${bits} bits. Got ${value}`);\n            }\n            else {\n                return;\n            }\n        }\n        // Corner case for one bit\n        if (bits === 1) {\n            if (value !== -1n && value !== 0n) {\n                throw Error(`value is not zero or -1 for ${bits} bits. Got ${value}`);\n            }\n            else {\n                this.writeBit(value === -1n);\n                return;\n            }\n        }\n        // Check input\n        let vBits = 1n << (BigInt(bits) - 1n);\n        if (v < -vBits || v >= vBits) {\n            throw Error(`value is out of range for ${bits} bits. Got ${value}`);\n        }\n        // Write sign\n        if (v < 0) {\n            this.writeBit(true);\n            v = vBits + v;\n        }\n        else {\n            this.writeBit(false);\n        }\n        // Write value\n        this.writeUint(v, bits - 1);\n    }\n    /**\n     * Wrtie var uint value, used for serializing coins\n     * @param value value to write as bigint or number\n     * @param bits header bits to write size\n     */\n    writeVarUint(value, bits) {\n        let v = BigInt(value);\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        if (v < 0) {\n            throw Error(`value is negative. Got ${value}`);\n        }\n        // Corner case for zero\n        if (v === 0n) {\n            // Write zero size\n            this.writeUint(0, bits);\n            return;\n        }\n        // Calculate size\n        const sizeBytes = Math.ceil((v.toString(2).length) / 8); // Fastest way in most environments\n        const sizeBits = sizeBytes * 8;\n        // Write size\n        this.writeUint(sizeBytes, bits);\n        // Write number\n        this.writeUint(v, sizeBits);\n    }\n    /**\n     * Wrtie var int value, used for serializing coins\n     * @param value value to write as bigint or number\n     * @param bits header bits to write size\n     */\n    writeVarInt(value, bits) {\n        let v = BigInt(value);\n        if (bits < 0 || !Number.isSafeInteger(bits)) {\n            throw Error(`invalid bit length. Got ${bits}`);\n        }\n        // Corner case for zero\n        if (v === 0n) {\n            // Write zero size\n            this.writeUint(0, bits);\n            return;\n        }\n        // Calculate size\n        let v2 = v > 0 ? v : -v;\n        const sizeBytes = 1 + Math.ceil((v2.toString(2).length) / 8); // Fastest way in most environments\n        const sizeBits = sizeBytes * 8;\n        // Write size\n        this.writeUint(sizeBytes, bits);\n        // Write number\n        this.writeInt(v, sizeBits);\n    }\n    /**\n     * Write coins in var uint format\n     * @param amount amount to write\n     */\n    writeCoins(amount) {\n        this.writeVarUint(amount, 4);\n    }\n    /**\n     * Write address\n     * @param address write address or address external\n     */\n    writeAddress(address) {\n        // Is empty address\n        if (address === null || address === undefined) {\n            this.writeUint(0, 2); // Empty address\n            return;\n        }\n        // Is Internal Address\n        if (Address_1.Address.isAddress(address)) {\n            this.writeUint(2, 2); // Internal address\n            this.writeUint(0, 1); // No anycast\n            this.writeInt(address.workChain, 8);\n            this.writeBuffer(address.hash);\n            return;\n        }\n        // Is External Address\n        if (ExternalAddress_1.ExternalAddress.isAddress(address)) {\n            this.writeUint(1, 2); // External address\n            this.writeUint(address.bits, 9);\n            this.writeUint(address.value, address.bits);\n            return;\n        }\n        // Invalid address\n        throw Error(`Invalid address. Got ${address}`);\n    }\n    /**\n     * Build BitString\n     * @returns result bit string\n     */\n    build() {\n        return new BitString_1.BitString(this._buffer, 0, this._length);\n    }\n    /**\n     * Build into Buffer\n     * @returns result buffer\n     */\n    buffer() {\n        if (this._length % 8 !== 0) {\n            throw new Error(\"BitBuilder buffer is not byte aligned\");\n        }\n        return this._buffer.subarray(0, this._length / 8);\n    }\n}\nexports.BitBuilder = BitBuilder;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CellType = void 0;\nvar CellType;\n(function (CellType) {\n    CellType[CellType[\"Ordinary\"] = -1] = \"Ordinary\";\n    CellType[CellType[\"PrunedBranch\"] = 1] = \"PrunedBranch\";\n    CellType[CellType[\"Library\"] = 2] = \"Library\";\n    CellType[CellType[\"MerkleProof\"] = 3] = \"MerkleProof\";\n    CellType[CellType[\"MerkleUpdate\"] = 4] = \"MerkleUpdate\";\n})(CellType || (exports.CellType = CellType = {}));\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readUnaryLength = void 0;\nfunction readUnaryLength(slice) {\n    let res = 0;\n    while (slice.loadBit()) {\n        res++;\n    }\n    return res;\n}\nexports.readUnaryLength = readUnaryLength;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateMerkleProof = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst readUnaryLength_1 = require(\"./utils/readUnaryLength\");\nfunction convertToPrunedBranch(c) {\n    return (0, Builder_1.beginCell)()\n        .storeUint(1, 8)\n        .storeUint(1, 8)\n        .storeBuffer(c.hash(0))\n        .storeUint(c.depth(0), 16)\n        .endCell({ exotic: true });\n}\nfunction convertToMerkleProof(c) {\n    return (0, Builder_1.beginCell)()\n        .storeUint(3, 8)\n        .storeBuffer(c.hash(0))\n        .storeUint(c.depth(0), 16)\n        .storeRef(c)\n        .endCell({ exotic: true });\n}\nfunction doGenerateMerkleProof(prefix, slice, n, key) {\n    // Reading label\n    const originalCell = slice.asCell();\n    let lb0 = slice.loadBit() ? 1 : 0;\n    let prefixLength = 0;\n    let pp = prefix;\n    if (lb0 === 0) {\n        // Short label detected\n        // Read\n        prefixLength = (0, readUnaryLength_1.readUnaryLength)(slice);\n        // Read prefix\n        for (let i = 0; i < prefixLength; i++) {\n            pp += slice.loadBit() ? '1' : '0';\n        }\n    }\n    else {\n        let lb1 = slice.loadBit() ? 1 : 0;\n        if (lb1 === 0) {\n            // Long label detected\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for (let i = 0; i < prefixLength; i++) {\n                pp += slice.loadBit() ? '1' : '0';\n            }\n        }\n        else {\n            // Same label detected\n            let bit = slice.loadBit() ? '1' : '0';\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for (let i = 0; i < prefixLength; i++) {\n                pp += bit;\n            }\n        }\n    }\n    if (n - prefixLength === 0) {\n        return originalCell;\n    }\n    else {\n        let sl = originalCell.beginParse();\n        let left = sl.loadRef();\n        let right = sl.loadRef();\n        // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'\n        if (!left.isExotic) {\n            if (pp + '0' === key.slice(0, pp.length + 1)) {\n                left = doGenerateMerkleProof(pp + '0', left.beginParse(), n - prefixLength - 1, key);\n            }\n            else {\n                left = convertToPrunedBranch(left);\n            }\n        }\n        if (!right.isExotic) {\n            if (pp + '1' === key.slice(0, pp.length + 1)) {\n                right = doGenerateMerkleProof(pp + '1', right.beginParse(), n - prefixLength - 1, key);\n            }\n            else {\n                right = convertToPrunedBranch(right);\n            }\n        }\n        return (0, Builder_1.beginCell)()\n            .storeSlice(sl)\n            .storeRef(left)\n            .storeRef(right)\n            .endCell();\n    }\n}\nfunction generateMerkleProof(dict, key, keyObject) {\n    const s = (0, Builder_1.beginCell)().storeDictDirect(dict).endCell().beginParse();\n    return convertToMerkleProof(doGenerateMerkleProof('', s, keyObject.bits, keyObject.serialize(key).toString(2).padStart(keyObject.bits, '0')));\n}\nexports.generateMerkleProof = generateMerkleProof;\n", "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.generateMerkleUpdate = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst generateMerkleProof_1 = require(\"./generateMerkleProof\");\nfunction convertToMerkleUpdate(c1, c2) {\n    return (0, Builder_1.beginCell)()\n        .storeUint(4, 8)\n        .storeBuffer(c1.hash(0))\n        .storeBuffer(c2.hash(0))\n        .storeUint(c1.depth(0), 16)\n        .storeUint(c2.depth(0), 16)\n        .storeRef(c1)\n        .storeRef(c2)\n        .endCell({ exotic: true });\n}\nfunction generateMerkleUpdate(dict, key, keyObject, newValue) {\n    const oldProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, key, keyObject).refs[0];\n    dict.set(key, newValue);\n    const newProof = (0, generateMerkleProof_1.generateMerkleProof)(dict, key, keyObject).refs[0];\n    return convertToMerkleUpdate(oldProof, newProof);\n}\nexports.generateMerkleUpdate = generateMerkleUpdate;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseDict = void 0;\nfunction readUnaryLength(slice) {\n    let res = 0;\n    while (slice.loadBit()) {\n        res++;\n    }\n    return res;\n}\nfunction doParse(prefix, slice, n, res, extractor) {\n    // Reading label\n    let lb0 = slice.loadBit() ? 1 : 0;\n    let prefixLength = 0;\n    let pp = prefix;\n    if (lb0 === 0) {\n        // Short label detected\n        // Read \n        prefixLength = readUnaryLength(slice);\n        // Read prefix\n        for (let i = 0; i < prefixLength; i++) {\n            pp += slice.loadBit() ? '1' : '0';\n        }\n    }\n    else {\n        let lb1 = slice.loadBit() ? 1 : 0;\n        if (lb1 === 0) {\n            // Long label detected\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for (let i = 0; i < prefixLength; i++) {\n                pp += slice.loadBit() ? '1' : '0';\n            }\n        }\n        else {\n            // Same label detected\n            let bit = slice.loadBit() ? '1' : '0';\n            prefixLength = slice.loadUint(Math.ceil(Math.log2(n + 1)));\n            for (let i = 0; i < prefixLength; i++) {\n                pp += bit;\n            }\n        }\n    }\n    if (n - prefixLength === 0) {\n        res.set(BigInt('0b' + pp), extractor(slice));\n    }\n    else {\n        let left = slice.loadRef();\n        let right = slice.loadRef();\n        // NOTE: Left and right branches are implicitly contain prefixes '0' and '1'\n        if (!left.isExotic) {\n            doParse(pp + '0', left.beginParse(), n - prefixLength - 1, res, extractor);\n        }\n        if (!right.isExotic) {\n            doParse(pp + '1', right.beginParse(), n - prefixLength - 1, res, extractor);\n        }\n    }\n}\nfunction parseDict(sc, keySize, extractor) {\n    let res = new Map();\n    if (sc) {\n        doParse('', sc, keySize, res, extractor);\n    }\n    return res;\n}\nexports.parseDict = parseDict;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.findCommonPrefix = void 0;\nfunction findCommonPrefix(src, startPos = 0) {\n    // Corner cases\n    if (src.length === 0) {\n        return '';\n    }\n    let r = src[0].slice(startPos);\n    for (let i = 1; i < src.length; i++) {\n        const s = src[i];\n        while (s.indexOf(r, startPos) !== startPos) {\n            r = r.substring(0, r.length - 1);\n            if (r === '') {\n                return r;\n            }\n        }\n    }\n    return r;\n}\nexports.findCommonPrefix = findCommonPrefix;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeDict = exports.detectLabelType = exports.writeLabelSame = exports.writeLabelLong = exports.writeLabelShort = exports.buildTree = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst findCommonPrefix_1 = require(\"./utils/findCommonPrefix\");\n//\n// Tree Build\n//\nfunction pad(src, size) {\n    while (src.length < size) {\n        src = '0' + src;\n    }\n    return src;\n}\nfunction removePrefixMap(src, length) {\n    if (length === 0) {\n        return src;\n    }\n    else {\n        let res = new Map();\n        for (let k of src.keys()) {\n            let d = src.get(k);\n            res.set(k.slice(length), d);\n        }\n        return res;\n    }\n}\nfunction forkMap(src, prefixLen) {\n    if (src.size === 0) {\n        throw Error('Internal inconsistency');\n    }\n    let left = new Map();\n    let right = new Map();\n    for (let [k, d] of src.entries()) {\n        if (k[prefixLen] === '0') {\n            left.set(k, d);\n        }\n        else {\n            right.set(k, d);\n        }\n    }\n    if (left.size === 0) {\n        throw Error('Internal inconsistency. Left emtpy.');\n    }\n    if (right.size === 0) {\n        throw Error('Internal inconsistency. Right emtpy.');\n    }\n    return { left, right };\n}\nfunction buildNode(src, prefixLen) {\n    if (src.size === 0) {\n        throw Error('Internal inconsistency');\n    }\n    if (src.size === 1) {\n        return { type: 'leaf', value: Array.from(src.values())[0] };\n    }\n    let { left, right } = forkMap(src, prefixLen);\n    return {\n        type: 'fork',\n        left: buildEdge(left, prefixLen + 1),\n        right: buildEdge(right, prefixLen + 1)\n    };\n}\nfunction buildEdge(src, prefixLen = 0) {\n    if (src.size === 0) {\n        throw Error('Internal inconsistency');\n    }\n    const label = (0, findCommonPrefix_1.findCommonPrefix)(Array.from(src.keys()), prefixLen);\n    return { label, node: buildNode(src, label.length + prefixLen) };\n}\nfunction buildTree(src, keyLength) {\n    // Convert map keys\n    let converted = new Map();\n    for (let k of Array.from(src.keys())) {\n        const padded = pad(k.toString(2), keyLength);\n        converted.set(padded, src.get(k));\n    }\n    // Calculate root label\n    return buildEdge(converted);\n}\nexports.buildTree = buildTree;\n//\n// Serialization\n//\nfunction writeLabelShort(src, to) {\n    // Header\n    to.storeBit(0);\n    // Unary length\n    for (let i = 0; i < src.length; i++) {\n        to.storeBit(1);\n    }\n    to.storeBit(0);\n    // Value\n    if (src.length > 0) {\n        to.storeUint(BigInt('0b' + src), src.length);\n    }\n    return to;\n}\nexports.writeLabelShort = writeLabelShort;\nfunction labelShortLength(src) {\n    return 1 + src.length + 1 + src.length;\n}\nfunction writeLabelLong(src, keyLength, to) {\n    // Header\n    to.storeBit(1);\n    to.storeBit(0);\n    // Length\n    let length = Math.ceil(Math.log2(keyLength + 1));\n    to.storeUint(src.length, length);\n    // Value\n    if (src.length > 0) {\n        to.storeUint(BigInt('0b' + src), src.length);\n    }\n    return to;\n}\nexports.writeLabelLong = writeLabelLong;\nfunction labelLongLength(src, keyLength) {\n    return 1 + 1 + Math.ceil(Math.log2(keyLength + 1)) + src.length;\n}\nfunction writeLabelSame(value, length, keyLength, to) {\n    // Header\n    to.storeBit(1);\n    to.storeBit(1);\n    // Value\n    to.storeBit(value);\n    // Length\n    let lenLen = Math.ceil(Math.log2(keyLength + 1));\n    to.storeUint(length, lenLen);\n}\nexports.writeLabelSame = writeLabelSame;\nfunction labelSameLength(keyLength) {\n    return 1 + 1 + 1 + Math.ceil(Math.log2(keyLength + 1));\n}\nfunction isSame(src) {\n    if (src.length === 0 || src.length === 1) {\n        return true;\n    }\n    for (let i = 1; i < src.length; i++) {\n        if (src[i] !== src[0]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction detectLabelType(src, keyLength) {\n    let kind = 'short';\n    let kindLength = labelShortLength(src);\n    let longLength = labelLongLength(src, keyLength);\n    if (longLength < kindLength) {\n        kindLength = longLength;\n        kind = 'long';\n    }\n    if (isSame(src)) {\n        let sameLength = labelSameLength(keyLength);\n        if (sameLength < kindLength) {\n            kindLength = sameLength;\n            kind = 'same';\n        }\n    }\n    return kind;\n}\nexports.detectLabelType = detectLabelType;\nfunction writeLabel(src, keyLength, to) {\n    let type = detectLabelType(src, keyLength);\n    if (type === 'short') {\n        writeLabelShort(src, to);\n    }\n    else if (type === 'long') {\n        writeLabelLong(src, keyLength, to);\n    }\n    else if (type === 'same') {\n        writeLabelSame(src[0] === '1', src.length, keyLength, to);\n    }\n}\nfunction writeNode(src, keyLength, serializer, to) {\n    if (src.type === 'leaf') {\n        serializer(src.value, to);\n    }\n    if (src.type === 'fork') {\n        const leftCell = (0, Builder_1.beginCell)();\n        const rightCell = (0, Builder_1.beginCell)();\n        writeEdge(src.left, keyLength - 1, serializer, leftCell);\n        writeEdge(src.right, keyLength - 1, serializer, rightCell);\n        to.storeRef(leftCell);\n        to.storeRef(rightCell);\n    }\n}\nfunction writeEdge(src, keyLength, serializer, to) {\n    writeLabel(src.label, keyLength, to);\n    writeNode(src.node, keyLength - src.label.length, serializer, to);\n}\nfunction serializeDict(src, keyLength, serializer, to) {\n    const tree = buildTree(src, keyLength);\n    writeEdge(tree, keyLength, serializer, to);\n}\nexports.serializeDict = serializeDict;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deserializeInternalKey = exports.serializeInternalKey = void 0;\nconst Address_1 = require(\"../../address/Address\");\nconst BitString_1 = require(\"../../boc/BitString\");\nconst paddedBits_1 = require(\"../../boc/utils/paddedBits\");\nfunction serializeInternalKey(value) {\n    if (typeof value === 'number') {\n        if (!Number.isSafeInteger(value)) {\n            throw Error('Invalid key type: not a safe integer: ' + value);\n        }\n        return 'n:' + value.toString(10);\n    }\n    else if (typeof value === 'bigint') {\n        return 'b:' + value.toString(10);\n    }\n    else if (Address_1.Address.isAddress(value)) {\n        return 'a:' + value.toString();\n    }\n    else if (Buffer.isBuffer(value)) {\n        return 'f:' + value.toString('hex');\n    }\n    else if (BitString_1.BitString.isBitString(value)) {\n        return 'B:' + value.toString();\n    }\n    else {\n        throw Error('Invalid key type');\n    }\n}\nexports.serializeInternalKey = serializeInternalKey;\nfunction deserializeInternalKey(value) {\n    let k = value.slice(0, 2);\n    let v = value.slice(2);\n    if (k === 'n:') {\n        return parseInt(v, 10);\n    }\n    else if (k === 'b:') {\n        return BigInt(v);\n    }\n    else if (k === 'a:') {\n        return Address_1.Address.parse(v);\n    }\n    else if (k === 'f:') {\n        return Buffer.from(v, 'hex');\n    }\n    else if (k === 'B:') {\n        const lastDash = v.slice(-1) == \"_\";\n        const isPadded = lastDash || v.length % 2 != 0;\n        if (isPadded) {\n            let charLen = lastDash ? v.length - 1 : v.length;\n            const padded = v.substr(0, charLen) + \"0\"; //Padding\n            if ((!lastDash) && ((charLen & 1) !== 0)) {\n                // Four bit nibmle without padding\n                return new BitString_1.BitString(Buffer.from(padded, 'hex'), 0, charLen << 2);\n            }\n            else {\n                return (0, paddedBits_1.paddedBufferToBits)(Buffer.from(padded, 'hex'));\n            }\n        }\n        else {\n            return new BitString_1.BitString(Buffer.from(v, 'hex'), 0, v.length << 2);\n        }\n    }\n    throw Error('Invalid key type: ' + k);\n}\nexports.deserializeInternalKey = deserializeInternalKey;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Dictionary = void 0;\nconst Address_1 = require(\"../address/Address\");\nconst Builder_1 = require(\"../boc/Builder\");\nconst Cell_1 = require(\"../boc/Cell\");\nconst BitString_1 = require(\"../boc/BitString\");\nconst generateMerkleProof_1 = require(\"./generateMerkleProof\");\nconst generateMerkleUpdate_1 = require(\"./generateMerkleUpdate\");\nconst parseDict_1 = require(\"./parseDict\");\nconst serializeDict_1 = require(\"./serializeDict\");\nconst internalKeySerializer_1 = require(\"./utils/internalKeySerializer\");\nclass Dictionary {\n    /**\n     * Create an empty map\n     * @param key key type\n     * @param value value type\n     * @returns Dictionary<K, V>\n     */\n    static empty(key, value) {\n        if (key && value) {\n            return new Dictionary(new Map(), key, value);\n        }\n        else {\n            return new Dictionary(new Map(), null, null);\n        }\n    }\n    /**\n     * Load dictionary from slice\n     * @param key key description\n     * @param value value description\n     * @param src slice\n     * @returns Dictionary<K, V>\n     */\n    static load(key, value, sc) {\n        let slice;\n        if (sc instanceof Cell_1.Cell) {\n            if (sc.isExotic) {\n                return Dictionary.empty(key, value);\n            }\n            slice = sc.beginParse();\n        }\n        else {\n            slice = sc;\n        }\n        let cell = slice.loadMaybeRef();\n        if (cell && !cell.isExotic) {\n            return Dictionary.loadDirect(key, value, cell.beginParse());\n        }\n        else {\n            return Dictionary.empty(key, value);\n        }\n    }\n    /**\n     * Low level method for rare dictionaries from system contracts.\n     * Loads dictionary from slice directly without going to the ref.\n     *\n     * @param key key description\n     * @param value value description\n     * @param sc slice\n     * @returns Dictionary<K, V>\n     */\n    static loadDirect(key, value, sc) {\n        if (!sc) {\n            return Dictionary.empty(key, value);\n        }\n        let slice;\n        if (sc instanceof Cell_1.Cell) {\n            slice = sc.beginParse();\n        }\n        else {\n            slice = sc;\n        }\n        let values = (0, parseDict_1.parseDict)(slice, key.bits, value.parse);\n        let prepare = new Map();\n        for (let [k, v] of values) {\n            prepare.set((0, internalKeySerializer_1.serializeInternalKey)(key.parse(k)), v);\n        }\n        return new Dictionary(prepare, key, value);\n    }\n    constructor(values, key, value) {\n        this._key = key;\n        this._value = value;\n        this._map = values;\n    }\n    get size() {\n        return this._map.size;\n    }\n    get(key) {\n        return this._map.get((0, internalKeySerializer_1.serializeInternalKey)(key));\n    }\n    has(key) {\n        return this._map.has((0, internalKeySerializer_1.serializeInternalKey)(key));\n    }\n    set(key, value) {\n        this._map.set((0, internalKeySerializer_1.serializeInternalKey)(key), value);\n        return this;\n    }\n    delete(key) {\n        const k = (0, internalKeySerializer_1.serializeInternalKey)(key);\n        return this._map.delete(k);\n    }\n    clear() {\n        this._map.clear();\n    }\n    *[Symbol.iterator]() {\n        for (const [k, v] of this._map) {\n            const key = (0, internalKeySerializer_1.deserializeInternalKey)(k);\n            yield [key, v];\n        }\n    }\n    keys() {\n        return Array.from(this._map.keys()).map((v) => (0, internalKeySerializer_1.deserializeInternalKey)(v));\n    }\n    values() {\n        return Array.from(this._map.values());\n    }\n    store(builder, key, value) {\n        if (this._map.size === 0) {\n            builder.storeBit(0);\n        }\n        else {\n            // Resolve serializer\n            let resolvedKey = this._key;\n            if (key !== null && key !== undefined) {\n                resolvedKey = key;\n            }\n            let resolvedValue = this._value;\n            if (value !== null && value !== undefined) {\n                resolvedValue = value;\n            }\n            if (!resolvedKey) {\n                throw Error('Key serializer is not defined');\n            }\n            if (!resolvedValue) {\n                throw Error('Value serializer is not defined');\n            }\n            // Prepare map\n            let prepared = new Map();\n            for (const [k, v] of this._map) {\n                prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);\n            }\n            // Store\n            builder.storeBit(1);\n            let dd = (0, Builder_1.beginCell)();\n            (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, dd);\n            builder.storeRef(dd.endCell());\n        }\n    }\n    storeDirect(builder, key, value) {\n        if (this._map.size === 0) {\n            throw Error('Cannot store empty dictionary directly');\n        }\n        // Resolve serializer\n        let resolvedKey = this._key;\n        if (key !== null && key !== undefined) {\n            resolvedKey = key;\n        }\n        let resolvedValue = this._value;\n        if (value !== null && value !== undefined) {\n            resolvedValue = value;\n        }\n        if (!resolvedKey) {\n            throw Error('Key serializer is not defined');\n        }\n        if (!resolvedValue) {\n            throw Error('Value serializer is not defined');\n        }\n        // Prepare map\n        let prepared = new Map();\n        for (const [k, v] of this._map) {\n            prepared.set(resolvedKey.serialize((0, internalKeySerializer_1.deserializeInternalKey)(k)), v);\n        }\n        // Store\n        (0, serializeDict_1.serializeDict)(prepared, resolvedKey.bits, resolvedValue.serialize, builder);\n    }\n    generateMerkleProof(key) {\n        return (0, generateMerkleProof_1.generateMerkleProof)(this, key, this._key);\n    }\n    generateMerkleUpdate(key, newValue) {\n        return (0, generateMerkleUpdate_1.generateMerkleUpdate)(this, key, this._key, newValue);\n    }\n}\nexports.Dictionary = Dictionary;\nDictionary.Keys = {\n    /**\n     * Standard address key\n     * @returns DictionaryKey<Address>\n     */\n    Address: () => {\n        return createAddressKey();\n    },\n    /**\n     * Create standard big integer key\n     * @param bits number of bits\n     * @returns DictionaryKey<bigint>\n     */\n    BigInt: (bits) => {\n        return createBigIntKey(bits);\n    },\n    /**\n     * Create integer key\n     * @param bits bits of integer\n     * @returns DictionaryKey<number>\n     */\n    Int: (bits) => {\n        return createIntKey(bits);\n    },\n    /**\n     * Create standard unsigned big integer key\n     * @param bits number of bits\n     * @returns DictionaryKey<bigint>\n     */\n    BigUint: (bits) => {\n        return createBigUintKey(bits);\n    },\n    /**\n     * Create standard unsigned integer key\n     * @param bits number of bits\n     * @returns DictionaryKey<number>\n     */\n    Uint: (bits) => {\n        return createUintKey(bits);\n    },\n    /**\n     * Create standard buffer key\n     * @param bytes number of bytes of a buffer\n     * @returns DictionaryKey<Buffer>\n     */\n    Buffer: (bytes) => {\n        return createBufferKey(bytes);\n    },\n    /**\n     * Create BitString key\n     * @param bits key length\n     * @returns DictionaryKey<BitString>\n     * Point is that Buffer has to be 8 bit aligned,\n     * while key is TVM dictionary doesn't have to be\n     * aligned at all.\n     */\n    BitString: (bits) => {\n        return createBitStringKey(bits);\n    }\n};\nDictionary.Values = {\n    /**\n     * Create standard integer value\n     * @returns DictionaryValue<bigint>\n     */\n    BigInt: (bits) => {\n        return createBigIntValue(bits);\n    },\n    /**\n     * Create standard integer value\n     * @returns DictionaryValue<number>\n     */\n    Int: (bits) => {\n        return createIntValue(bits);\n    },\n    /**\n     * Create big var int\n     * @param bits nubmer of header bits\n     * @returns DictionaryValue<bigint>\n     */\n    BigVarInt: (bits) => {\n        return createBigVarIntValue(bits);\n    },\n    /**\n     * Create standard unsigned integer value\n     * @param bits number of bits\n     * @returns DictionaryValue<bigint>\n     */\n    BigUint: (bits) => {\n        return createBigUintValue(bits);\n    },\n    /**\n     * Create standard unsigned integer value\n     * @param bits number of bits\n     * @returns DictionaryValue<bigint>\n     */\n    Uint: (bits) => {\n        return createUintValue(bits);\n    },\n    /**\n     * Create big var int\n     * @param bits nubmer of header bits\n     * @returns DictionaryValue<bigint>\n     */\n    BigVarUint: (bits) => {\n        return createBigVarUintValue(bits);\n    },\n    /**\n     * Create standard boolean value\n     * @returns DictionaryValue<boolean>\n     */\n    Bool: () => {\n        return createBooleanValue();\n    },\n    /**\n     * Create standard address value\n     * @returns DictionaryValue<Address>\n     */\n    Address: () => {\n        return createAddressValue();\n    },\n    /**\n     * Create standard cell value\n     * @returns DictionaryValue<Cell>\n     */\n    Cell: () => {\n        return createCellValue();\n    },\n    /**\n     * Create Builder value\n     * @param bytes number of bytes of a buffer\n     * @returns DictionaryValue<Builder>\n     */\n    Buffer: (bytes) => {\n        return createBufferValue(bytes);\n    },\n    /**\n     * Create BitString value\n     * @param requested bit length\n     * @returns DictionaryValue<BitString>\n     * Point is that Buffer is not applicable\n     * when length is not 8 bit alligned.\n     */\n    BitString: (bits) => {\n        return createBitStringValue(bits);\n    },\n    /**\n     * Create dictionary value\n     * @param key\n     * @param value\n     */\n    Dictionary: (key, value) => {\n        return createDictionaryValue(key, value);\n    }\n};\n//\n// Keys and Values\n//\nfunction createAddressKey() {\n    return {\n        bits: 267,\n        serialize: (src) => {\n            if (!Address_1.Address.isAddress(src)) {\n                throw Error('Key is not an address');\n            }\n            return (0, Builder_1.beginCell)().storeAddress(src).endCell().beginParse().preloadUintBig(267);\n        },\n        parse: (src) => {\n            return (0, Builder_1.beginCell)().storeUint(src, 267).endCell().beginParse().loadAddress();\n        }\n    };\n}\nfunction createBigIntKey(bits) {\n    return {\n        bits,\n        serialize: (src) => {\n            if (typeof src !== 'bigint') {\n                throw Error('Key is not a bigint');\n            }\n            return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src) => {\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadIntBig(bits);\n        }\n    };\n}\nfunction createIntKey(bits) {\n    return {\n        bits: bits,\n        serialize: (src) => {\n            if (typeof src !== 'number') {\n                throw Error('Key is not a number');\n            }\n            if (!Number.isSafeInteger(src)) {\n                throw Error('Key is not a safe integer: ' + src);\n            }\n            return (0, Builder_1.beginCell)().storeInt(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src) => {\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadInt(bits);\n        }\n    };\n}\nfunction createBigUintKey(bits) {\n    return {\n        bits,\n        serialize: (src) => {\n            if (typeof src !== 'bigint') {\n                throw Error('Key is not a bigint');\n            }\n            if (src < 0) {\n                throw Error('Key is negative: ' + src);\n            }\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src) => {\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);\n        }\n    };\n}\nfunction createUintKey(bits) {\n    return {\n        bits,\n        serialize: (src) => {\n            if (typeof src !== 'number') {\n                throw Error('Key is not a number');\n            }\n            if (!Number.isSafeInteger(src)) {\n                throw Error('Key is not a safe integer: ' + src);\n            }\n            if (src < 0) {\n                throw Error('Key is negative: ' + src);\n            }\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src) => {\n            return Number((0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadUint(bits));\n        }\n    };\n}\nfunction createBufferKey(bytes) {\n    return {\n        bits: bytes * 8,\n        serialize: (src) => {\n            if (!Buffer.isBuffer(src)) {\n                throw Error('Key is not a buffer');\n            }\n            return (0, Builder_1.beginCell)().storeBuffer(src).endCell().beginParse().loadUintBig(bytes * 8);\n        },\n        parse: (src) => {\n            return (0, Builder_1.beginCell)().storeUint(src, bytes * 8).endCell().beginParse().loadBuffer(bytes);\n        }\n    };\n}\nfunction createBitStringKey(bits) {\n    return {\n        bits,\n        serialize: (src) => {\n            if (!BitString_1.BitString.isBitString(src))\n                throw Error('Key is not a BitString');\n            return (0, Builder_1.beginCell)().storeBits(src).endCell().beginParse().loadUintBig(bits);\n        },\n        parse: (src) => {\n            return (0, Builder_1.beginCell)().storeUint(src, bits).endCell().beginParse().loadBits(bits);\n        }\n    };\n}\nfunction createIntValue(bits) {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeInt(src, bits);\n        },\n        parse: (src) => {\n            return src.loadInt(bits);\n        }\n    };\n}\nfunction createBigIntValue(bits) {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeInt(src, bits);\n        },\n        parse: (src) => {\n            return src.loadIntBig(bits);\n        }\n    };\n}\nfunction createBigVarIntValue(bits) {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeVarInt(src, bits);\n        },\n        parse: (src) => {\n            return src.loadVarIntBig(bits);\n        }\n    };\n}\nfunction createBigVarUintValue(bits) {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeVarUint(src, bits);\n        },\n        parse: (src) => {\n            return src.loadVarUintBig(bits);\n        }\n    };\n}\nfunction createUintValue(bits) {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeUint(src, bits);\n        },\n        parse: (src) => {\n            return src.loadUint(bits);\n        }\n    };\n}\nfunction createBigUintValue(bits) {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeUint(src, bits);\n        },\n        parse: (src) => {\n            return src.loadUintBig(bits);\n        }\n    };\n}\nfunction createBooleanValue() {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeBit(src);\n        },\n        parse: (src) => {\n            return src.loadBit();\n        }\n    };\n}\nfunction createAddressValue() {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeAddress(src);\n        },\n        parse: (src) => {\n            return src.loadAddress();\n        }\n    };\n}\nfunction createCellValue() {\n    return {\n        serialize: (src, buidler) => {\n            buidler.storeRef(src);\n        },\n        parse: (src) => {\n            return src.loadRef();\n        }\n    };\n}\nfunction createDictionaryValue(key, value) {\n    return {\n        serialize: (src, buidler) => {\n            src.store(buidler);\n        },\n        parse: (src) => {\n            return Dictionary.load(key, value, src);\n        }\n    };\n}\nfunction createBufferValue(size) {\n    return {\n        serialize: (src, buidler) => {\n            if (src.length !== size) {\n                throw Error('Invalid buffer size');\n            }\n            buidler.storeBuffer(src);\n        },\n        parse: (src) => {\n            return src.loadBuffer(size);\n        }\n    };\n}\nfunction createBitStringValue(bits) {\n    return {\n        serialize: (src, builder) => {\n            if (src.length !== bits) {\n                throw Error('Invalid BitString size');\n            }\n            builder.storeBits(src);\n        },\n        parse: (src) => {\n            return src.loadBits(bits);\n        }\n    };\n}\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.writeString = exports.stringToCell = exports.readString = void 0;\nconst Builder_1 = require(\"../Builder\");\nfunction readBuffer(slice) {\n    // Check consistency\n    if (slice.remainingBits % 8 !== 0) {\n        throw new Error(`Invalid string length: ${slice.remainingBits}`);\n    }\n    if (slice.remainingRefs !== 0 && slice.remainingRefs !== 1) {\n        throw new Error(`invalid number of refs: ${slice.remainingRefs}`);\n    }\n    // Read string\n    let res;\n    if (slice.remainingBits === 0) {\n        res = Buffer.alloc(0);\n    }\n    else {\n        res = slice.loadBuffer(slice.remainingBits / 8);\n    }\n    // Read tail\n    if (slice.remainingRefs === 1) {\n        res = Buffer.concat([res, readBuffer(slice.loadRef().beginParse())]);\n    }\n    return res;\n}\nfunction readString(slice) {\n    return readBuffer(slice).toString();\n}\nexports.readString = readString;\nfunction writeBuffer(src, builder) {\n    if (src.length > 0) {\n        let bytes = Math.floor(builder.availableBits / 8);\n        if (src.length > bytes) {\n            let a = src.subarray(0, bytes);\n            let t = src.subarray(bytes);\n            builder = builder.storeBuffer(a);\n            let bb = (0, Builder_1.beginCell)();\n            writeBuffer(t, bb);\n            builder = builder.storeRef(bb.endCell());\n        }\n        else {\n            builder = builder.storeBuffer(src);\n        }\n    }\n}\nfunction stringToCell(src) {\n    let builder = (0, Builder_1.beginCell)();\n    writeBuffer(Buffer.from(src), builder);\n    return builder.endCell();\n}\nexports.stringToCell = stringToCell;\nfunction writeString(src, builder) {\n    writeBuffer(Buffer.from(src), builder);\n}\nexports.writeString = writeString;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Slice = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst Builder_1 = require(\"./Builder\");\nconst strings_1 = require(\"./utils/strings\");\n/**\n * Slice is a class that allows to read cell data\n */\nclass Slice {\n    constructor(reader, refs) {\n        this[_a] = () => this.toString();\n        this._reader = reader.clone();\n        this._refs = [...refs];\n        this._refsOffset = 0;\n    }\n    /**\n     * Get remaining bits\n     */\n    get remainingBits() {\n        return this._reader.remaining;\n    }\n    /**\n     * Get offset bits\n     */\n    get offsetBits() {\n        return this._reader.offset;\n    }\n    /**\n     * Get remaining refs\n     */\n    get remainingRefs() {\n        return this._refs.length - this._refsOffset;\n    }\n    /**\n     * Get offset refs\n     */\n    get offsetRefs() {\n        return this._refsOffset;\n    }\n    /**\n     * Skip bits\n     * @param bits\n     */\n    skip(bits) {\n        this._reader.skip(bits);\n        return this;\n    }\n    /**\n     * Load a single bit\n     * @returns true or false depending on the bit value\n     */\n    loadBit() {\n        return this._reader.loadBit();\n    }\n    /**\n     * Preload a signle bit\n     * @returns true or false depending on the bit value\n     */\n    preloadBit() {\n        return this._reader.preloadBit();\n    }\n    /**\n     * Load a boolean\n     * @returns true or false depending on the bit value\n     */\n    loadBoolean() {\n        return this.loadBit();\n    }\n    /**\n     * Load maybe boolean\n     * @returns true or false depending on the bit value or null\n     */\n    loadMaybeBoolean() {\n        if (this.loadBit()) {\n            return this.loadBoolean();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load bits as a new BitString\n     * @param bits number of bits to read\n     * @returns new BitString\n     */\n    loadBits(bits) {\n        return this._reader.loadBits(bits);\n    }\n    /**\n     * Preload bits as a new BitString\n     * @param bits number of bits to read\n     * @returns new BitString\n     */\n    preloadBits(bits) {\n        return this._reader.preloadBits(bits);\n    }\n    /**\n     * Load uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    loadUint(bits) {\n        return this._reader.loadUint(bits);\n    }\n    /**\n     * Load uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    loadUintBig(bits) {\n        return this._reader.loadUintBig(bits);\n    }\n    /**\n     * Preload uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    preloadUint(bits) {\n        return this._reader.preloadUint(bits);\n    }\n    /**\n     * Preload uint\n     * @param bits number of bits to read\n     * @returns uint value\n     */\n    preloadUintBig(bits) {\n        return this._reader.preloadUintBig(bits);\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeUint(bits) {\n        if (this.loadBit()) {\n            return this.loadUint(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeUintBig(bits) {\n        if (this.loadBit()) {\n            return this.loadUintBig(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    loadInt(bits) {\n        return this._reader.loadInt(bits);\n    }\n    /**\n     * Load int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    loadIntBig(bits) {\n        return this._reader.loadIntBig(bits);\n    }\n    /**\n     * Preload int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    preloadInt(bits) {\n        return this._reader.preloadInt(bits);\n    }\n    /**\n     * Preload int\n     * @param bits number of bits to read\n     * @returns int value\n     */\n    preloadIntBig(bits) {\n        return this._reader.preloadIntBig(bits);\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeInt(bits) {\n        if (this.loadBit()) {\n            return this.loadInt(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load maybe uint\n     * @param bits number of bits to read\n     * @returns uint value or null\n     */\n    loadMaybeIntBig(bits) {\n        if (this.loadBit()) {\n            return this.loadIntBig(bits);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    loadVarUint(bits) {\n        return this._reader.loadVarUint(bits);\n    }\n    /**\n     * Load varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    loadVarUintBig(bits) {\n        return this._reader.loadVarUintBig(bits);\n    }\n    /**\n     * Preload varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    preloadVarUint(bits) {\n        return this._reader.preloadVarUint(bits);\n    }\n    /**\n     * Preload varuint\n     * @param bits number of bits to read in header\n     * @returns varuint value\n     */\n    preloadVarUintBig(bits) {\n        return this._reader.preloadVarUintBig(bits);\n    }\n    /**\n     * Load varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    loadVarInt(bits) {\n        return this._reader.loadVarInt(bits);\n    }\n    /**\n     * Load varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    loadVarIntBig(bits) {\n        return this._reader.loadVarIntBig(bits);\n    }\n    /**\n     * Preload varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    preloadVarInt(bits) {\n        return this._reader.preloadVarInt(bits);\n    }\n    /**\n     * Preload varint\n     * @param bits number of bits to read in header\n     * @returns varint value\n     */\n    preloadVarIntBig(bits) {\n        return this._reader.preloadVarIntBig(bits);\n    }\n    /**\n     * Load coins\n     * @returns coins value\n     */\n    loadCoins() {\n        return this._reader.loadCoins();\n    }\n    /**\n     * Preload coins\n     * @returns coins value\n     */\n    preloadCoins() {\n        return this._reader.preloadCoins();\n    }\n    /**\n     * Load maybe coins\n     * @returns coins value or null\n     */\n    loadMaybeCoins() {\n        if (this._reader.loadBit()) {\n            return this._reader.loadCoins();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load internal Address\n     * @returns Address\n     */\n    loadAddress() {\n        return this._reader.loadAddress();\n    }\n    /**\n     * Load optional internal Address\n     * @returns Address or null\n     */\n    loadMaybeAddress() {\n        return this._reader.loadMaybeAddress();\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress\n     */\n    loadExternalAddress() {\n        return this._reader.loadExternalAddress();\n    }\n    /**\n     * Load optional external address\n     * @returns ExternalAddress or null\n     */\n    loadMaybeExternalAddress() {\n        return this._reader.loadMaybeExternalAddress();\n    }\n    /**\n     * Load address\n     * @returns Address, ExternalAddress or null\n     */\n    loadAddressAny() {\n        return this._reader.loadAddressAny();\n    }\n    /**\n     * Load reference\n     * @returns Cell\n     */\n    loadRef() {\n        if (this._refsOffset >= this._refs.length) {\n            throw new Error(\"No more references\");\n        }\n        return this._refs[this._refsOffset++];\n    }\n    /**\n     * Preload reference\n     * @returns Cell\n     */\n    preloadRef() {\n        if (this._refsOffset >= this._refs.length) {\n            throw new Error(\"No more references\");\n        }\n        return this._refs[this._refsOffset];\n    }\n    /**\n     * Load optional reference\n     * @returns Cell or null\n     */\n    loadMaybeRef() {\n        if (this.loadBit()) {\n            return this.loadRef();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Preload optional reference\n     * @returns Cell or null\n     */\n    preloadMaybeRef() {\n        if (this.preloadBit()) {\n            return this.preloadRef();\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load byte buffer\n     * @param bytes number of bytes to load\n     * @returns Buffer\n     */\n    loadBuffer(bytes) {\n        return this._reader.loadBuffer(bytes);\n    }\n    /**\n     * Load byte buffer\n     * @param bytes number of bytes to load\n     * @returns Buffer\n     */\n    preloadBuffer(bytes) {\n        return this._reader.preloadBuffer(bytes);\n    }\n    /**\n     * Load string tail\n     */\n    loadStringTail() {\n        return (0, strings_1.readString)(this);\n    }\n    /**\n     * Load maybe string tail\n     * @returns string or null\n     */\n    loadMaybeStringTail() {\n        if (this.loadBit()) {\n            return (0, strings_1.readString)(this);\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Load string tail from ref\n     * @returns string\n     */\n    loadStringRefTail() {\n        return (0, strings_1.readString)(this.loadRef().beginParse());\n    }\n    /**\n     * Load maybe string tail from ref\n     * @returns string or null\n     */\n    loadMaybeStringRefTail() {\n        const ref = this.loadMaybeRef();\n        if (ref) {\n            return (0, strings_1.readString)(ref.beginParse());\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Loads dictionary\n     * @param key key description\n     * @param value value description\n     * @returns Dictionary<K, V>\n     */\n    loadDict(key, value) {\n        return Dictionary_1.Dictionary.load(key, value, this);\n    }\n    /**\n     * Loads dictionary directly from current slice\n     * @param key key description\n     * @param value value description\n     * @returns Dictionary<K, V>\n     */\n    loadDictDirect(key, value) {\n        return Dictionary_1.Dictionary.loadDirect(key, value, this);\n    }\n    /**\n     * Checks if slice is empty\n     */\n    endParse() {\n        if (this.remainingBits > 0 || this.remainingRefs > 0) {\n            throw new Error(\"Slice is not empty\");\n        }\n    }\n    /**\n     * Convert slice to cell\n     */\n    asCell() {\n        return (0, Builder_1.beginCell)().storeSlice(this).endCell();\n    }\n    /**\n     *\n     * @returns\n     */\n    asBuilder() {\n        return (0, Builder_1.beginCell)().storeSlice(this);\n    }\n    /**\n     * Clone slice\n     * @returns cloned slice\n     */\n    clone(fromStart = false) {\n        if (fromStart) {\n            let reader = this._reader.clone();\n            reader.reset();\n            return new Slice(reader, this._refs);\n        }\n        else {\n            let res = new Slice(this._reader, this._refs);\n            res._refsOffset = this._refsOffset;\n            return res;\n        }\n    }\n    /**\n     * Print slice as string by converting it to cell\n     * @returns string\n     */\n    toString() {\n        return this.asCell().toString();\n    }\n}\nexports.Slice = Slice;\n_a = symbol_inspect_1.default;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BitReader = void 0;\nconst Address_1 = require(\"../address/Address\");\nconst ExternalAddress_1 = require(\"../address/ExternalAddress\");\n/**\n * Class for reading bit strings\n */\nclass BitReader {\n    constructor(bits, offset = 0) {\n        this._checkpoints = [];\n        this._bits = bits;\n        this._offset = offset;\n    }\n    /**\n     * Offset in source bit string\n     */\n    get offset() {\n        return this._offset;\n    }\n    /**\n     * Number of bits remaining\n     */\n    get remaining() {\n        return this._bits.length - this._offset;\n    }\n    /**\n     * Skip bits\n     * @param bits number of bits to skip\n     */\n    skip(bits) {\n        if (bits < 0 || this._offset + bits > this._bits.length) {\n            throw new Error(`Index ${this._offset + bits} is out of bounds`);\n        }\n        this._offset += bits;\n    }\n    /**\n     * Reset to the beginning or latest checkpoint\n     */\n    reset() {\n        if (this._checkpoints.length > 0) {\n            this._offset = this._checkpoints.pop();\n        }\n        else {\n            this._offset = 0;\n        }\n    }\n    /**\n     * Save checkpoint\n     */\n    save() {\n        this._checkpoints.push(this._offset);\n    }\n    /**\n     * Load a single bit\n     * @returns true if the bit is set, false otherwise\n     */\n    loadBit() {\n        let r = this._bits.at(this._offset);\n        this._offset++;\n        return r;\n    }\n    /**\n     * Preload bit\n     * @returns true if the bit is set, false otherwise\n     */\n    preloadBit() {\n        return this._bits.at(this._offset);\n    }\n    /**\n     * Load bit string\n     * @param bits number of bits to read\n     * @returns new bitstring\n     */\n    loadBits(bits) {\n        let r = this._bits.substring(this._offset, bits);\n        this._offset += bits;\n        return r;\n    }\n    /**\n     * Preload bit string\n     * @param bits number of bits to read\n     * @returns new bitstring\n     */\n    preloadBits(bits) {\n        return this._bits.substring(this._offset, bits);\n    }\n    /**\n     * Load buffer\n     * @param bytes number of bytes\n     * @returns new buffer\n     */\n    loadBuffer(bytes) {\n        let buf = this._preloadBuffer(bytes, this._offset);\n        this._offset += bytes * 8;\n        return buf;\n    }\n    /**\n     * Preload buffer\n     * @param bytes number of bytes\n     * @returns new buffer\n     */\n    preloadBuffer(bytes) {\n        return this._preloadBuffer(bytes, this._offset);\n    }\n    /**\n     * Load uint value\n     * @param bits uint bits\n     * @returns read value as number\n     */\n    loadUint(bits) {\n        return Number(this.loadUintBig(bits));\n    }\n    /**\n     * Load uint value as bigint\n     * @param bits uint bits\n     * @returns read value as bigint\n     */\n    loadUintBig(bits) {\n        let loaded = this.preloadUintBig(bits);\n        this._offset += bits;\n        return loaded;\n    }\n    /**\n     * Preload uint value\n     * @param bits uint bits\n     * @returns read value as number\n     */\n    preloadUint(bits) {\n        return Number(this._preloadUint(bits, this._offset));\n    }\n    /**\n     * Preload uint value as bigint\n     * @param bits uint bits\n     * @returns read value as bigint\n     */\n    preloadUintBig(bits) {\n        return this._preloadUint(bits, this._offset);\n    }\n    /**\n     * Load int value\n     * @param bits int bits\n     * @returns read value as bigint\n     */\n    loadInt(bits) {\n        let res = this._preloadInt(bits, this._offset);\n        this._offset += bits;\n        return Number(res);\n    }\n    /**\n     * Load int value as bigint\n     * @param bits int bits\n     * @returns read value as bigint\n     */\n    loadIntBig(bits) {\n        let res = this._preloadInt(bits, this._offset);\n        this._offset += bits;\n        return res;\n    }\n    /**\n     * Preload int value\n     * @param bits int bits\n     * @returns read value as bigint\n     */\n    preloadInt(bits) {\n        return Number(this._preloadInt(bits, this._offset));\n    }\n    /**\n     * Preload int value\n     * @param bits int bits\n     * @returns read value as bigint\n     */\n    preloadIntBig(bits) {\n        return this._preloadInt(bits, this._offset);\n    }\n    /**\n     * Load varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    loadVarUint(bits) {\n        let size = Number(this.loadUint(bits));\n        return Number(this.loadUintBig(size * 8));\n    }\n    /**\n     * Load varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    loadVarUintBig(bits) {\n        let size = Number(this.loadUint(bits));\n        return this.loadUintBig(size * 8);\n    }\n    /**\n     * Preload varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    preloadVarUint(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return Number(this._preloadUint(size * 8, this._offset + bits));\n    }\n    /**\n     * Preload varuint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    preloadVarUintBig(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return this._preloadUint(size * 8, this._offset + bits);\n    }\n    /**\n     * Load varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    loadVarInt(bits) {\n        let size = Number(this.loadUint(bits));\n        return Number(this.loadIntBig(size * 8));\n    }\n    /**\n     * Load varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    loadVarIntBig(bits) {\n        let size = Number(this.loadUint(bits));\n        return this.loadIntBig(size * 8);\n    }\n    /**\n     * Preload varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    preloadVarInt(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return Number(this._preloadInt(size * 8, this._offset + bits));\n    }\n    /**\n     * Preload varint value\n     * @param bits number of bits to read the size\n     * @returns read value as bigint\n     */\n    preloadVarIntBig(bits) {\n        let size = Number(this._preloadUint(bits, this._offset));\n        return this._preloadInt(size * 8, this._offset + bits);\n    }\n    /**\n     * Load coins value\n     * @returns read value as bigint\n     */\n    loadCoins() {\n        return this.loadVarUintBig(4);\n    }\n    /**\n     * Preload coins value\n     * @returns read value as bigint\n     */\n    preloadCoins() {\n        return this.preloadVarUintBig(4);\n    }\n    /**\n     * Load Address\n     * @returns Address\n     */\n    loadAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 2) {\n            return this._loadInternalAddress();\n        }\n        else {\n            throw new Error(\"Invalid address: \" + type);\n        }\n    }\n    /**\n     * Load internal address\n     * @returns Address or null\n     */\n    loadMaybeAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 0) {\n            this._offset += 2;\n            return null;\n        }\n        else if (type === 2) {\n            return this._loadInternalAddress();\n        }\n        else {\n            throw new Error(\"Invalid address\");\n        }\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress\n     */\n    loadExternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 1) {\n            return this._loadExternalAddress();\n        }\n        else {\n            throw new Error(\"Invalid address\");\n        }\n    }\n    /**\n     * Load external address\n     * @returns ExternalAddress or null\n     */\n    loadMaybeExternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 0) {\n            this._offset += 2;\n            return null;\n        }\n        else if (type === 1) {\n            return this._loadExternalAddress();\n        }\n        else {\n            throw new Error(\"Invalid address\");\n        }\n    }\n    /**\n     * Read address of any type\n     * @returns Address or ExternalAddress or null\n     */\n    loadAddressAny() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type === 0) {\n            this._offset += 2;\n            return null;\n        }\n        else if (type === 2) {\n            return this._loadInternalAddress();\n        }\n        else if (type === 1) {\n            return this._loadExternalAddress();\n        }\n        else if (type === 3) {\n            throw Error('Unsupported');\n        }\n        else {\n            throw Error('Unreachable');\n        }\n    }\n    /**\n     * Load bit string that was padded to make it byte alligned. Used in BOC serialization\n     * @param bytes number of bytes to read\n     */\n    loadPaddedBits(bits) {\n        // Check that number of bits is byte alligned\n        if (bits % 8 !== 0) {\n            throw new Error(\"Invalid number of bits\");\n        }\n        // Skip padding\n        let length = bits;\n        while (true) {\n            if (this._bits.at(this._offset + length - 1)) {\n                length--;\n                break;\n            }\n            else {\n                length--;\n            }\n        }\n        // Read substring\n        let r = this._bits.substring(this._offset, length);\n        this._offset += bits;\n        return r;\n    }\n    /**\n     * Clone BitReader\n     */\n    clone() {\n        return new BitReader(this._bits, this._offset);\n    }\n    /**\n     * Preload int from specific offset\n     * @param bits bits to preload\n     * @param offset offset to start from\n     * @returns read value as bigint\n     */\n    _preloadInt(bits, offset) {\n        if (bits == 0) {\n            return 0n;\n        }\n        let sign = this._bits.at(offset);\n        let res = 0n;\n        for (let i = 0; i < bits - 1; i++) {\n            if (this._bits.at(offset + 1 + i)) {\n                res += 1n << BigInt(bits - i - 1 - 1);\n            }\n        }\n        if (sign) {\n            res = res - (1n << BigInt(bits - 1));\n        }\n        return res;\n    }\n    /**\n     * Preload uint from specific offset\n     * @param bits bits to preload\n     * @param offset offset to start from\n     * @returns read value as bigint\n     */\n    _preloadUint(bits, offset) {\n        if (bits == 0) {\n            return 0n;\n        }\n        let res = 0n;\n        for (let i = 0; i < bits; i++) {\n            if (this._bits.at(offset + i)) {\n                res += 1n << BigInt(bits - i - 1);\n            }\n        }\n        return res;\n    }\n    _preloadBuffer(bytes, offset) {\n        // Try to load fast\n        let fastBuffer = this._bits.subbuffer(offset, bytes * 8);\n        if (fastBuffer) {\n            return fastBuffer;\n        }\n        // Load slow\n        let buf = Buffer.alloc(bytes);\n        for (let i = 0; i < bytes; i++) {\n            buf[i] = Number(this._preloadUint(8, offset + i * 8));\n        }\n        return buf;\n    }\n    _loadInternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type !== 2) {\n            throw Error('Invalid address');\n        }\n        // No Anycast supported\n        if (this._preloadUint(1, this._offset + 2) !== 0n) {\n            throw Error('Invalid address');\n        }\n        // Read address\n        let wc = Number(this._preloadInt(8, this._offset + 3));\n        let hash = this._preloadBuffer(32, this._offset + 11);\n        // Update offset\n        this._offset += 267;\n        return new Address_1.Address(wc, hash);\n    }\n    _loadExternalAddress() {\n        let type = Number(this._preloadUint(2, this._offset));\n        if (type !== 1) {\n            throw Error('Invalid address');\n        }\n        // Load length\n        let bits = Number(this._preloadUint(9, this._offset + 2));\n        // Load address\n        let value = this._preloadUint(bits, this._offset + 11);\n        // Update offset\n        this._offset += 11 + bits;\n        return new ExternalAddress_1.ExternalAddress(value, bits);\n    }\n}\nexports.BitReader = BitReader;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exoticLibrary = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticLibrary(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash\n    const size = 8 + 256;\n    if (bits.length !== size) {\n        throw new Error(`Library cell must have exactly (8 + 256) bits, got \"${bits.length}\"`);\n    }\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 2) {\n        throw new Error(`Library cell must have type 2, got \"${type}\"`);\n    }\n    return {};\n}\nexports.exoticLibrary = exoticLibrary;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exoticMerkleProof = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticMerkleProof(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash + depth\n    const size = 8 + 256 + 16;\n    if (bits.length !== size) {\n        throw new Error(`Merkle Proof cell must have exactly (8 + 256 + 16) bits, got \"${bits.length}\"`);\n    }\n    if (refs.length !== 1) {\n        throw new Error(`Merkle Proof cell must have exactly 1 ref, got \"${refs.length}\"`);\n    }\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 3) {\n        throw new Error(`Merkle Proof cell must have type 3, got \"${type}\"`);\n    }\n    // Check data\n    const proofHash = reader.loadBuffer(32);\n    const proofDepth = reader.loadUint(16);\n    const refHash = refs[0].hash(0);\n    const refDepth = refs[0].depth(0);\n    if (proofDepth !== refDepth) {\n        throw new Error(`Merkle Proof cell ref depth must be exactly \"${proofDepth}\", got \"${refDepth}\"`);\n    }\n    if (!proofHash.equals(refHash)) {\n        throw new Error(`Merkle Proof cell ref hash must be exactly \"${proofHash.toString('hex')}\", got \"${refHash.toString('hex')}\"`);\n    }\n    return {\n        proofDepth,\n        proofHash\n    };\n}\nexports.exoticMerkleProof = exoticMerkleProof;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exoticMerkleUpdate = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nfunction exoticMerkleUpdate(bits, refs) {\n    const reader = new BitReader_1.BitReader(bits);\n    // type + hash + hash + depth + depth\n    const size = 8 + (2 * (256 + 16));\n    if (bits.length !== size) {\n        throw new Error(`Merkle Update cell must have exactly (8 + (2 * (256 + 16))) bits, got \"${bits.length}\"`);\n    }\n    if (refs.length !== 2) {\n        throw new Error(`Merkle Update cell must have exactly 2 refs, got \"${refs.length}\"`);\n    }\n    let type = reader.loadUint(8);\n    if (type !== 4) {\n        throw new Error(`Merkle Update cell type must be exactly 4, got \"${type}\"`);\n    }\n    const proofHash1 = reader.loadBuffer(32);\n    const proofHash2 = reader.loadBuffer(32);\n    const proofDepth1 = reader.loadUint(16);\n    const proofDepth2 = reader.loadUint(16);\n    if (proofDepth1 !== refs[0].depth(0)) {\n        throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth1}\", got \"${refs[0].depth(0)}\"`);\n    }\n    if (!proofHash1.equals(refs[0].hash(0))) {\n        throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash1.toString('hex')}\", got \"${refs[0].hash(0).toString('hex')}\"`);\n    }\n    if (proofDepth2 !== refs[1].depth(0)) {\n        throw new Error(`Merkle Update cell ref depth must be exactly \"${proofDepth2}\", got \"${refs[1].depth(0)}\"`);\n    }\n    if (!proofHash2.equals(refs[1].hash(0))) {\n        throw new Error(`Merkle Update cell ref hash must be exactly \"${proofHash2.toString('hex')}\", got \"${refs[1].hash(0).toString('hex')}\"`);\n    }\n    return {\n        proofDepth1,\n        proofDepth2,\n        proofHash1,\n        proofHash2\n    };\n}\nexports.exoticMerkleUpdate = exoticMerkleUpdate;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.LevelMask = void 0;\nclass LevelMask {\n    constructor(mask = 0) {\n        this._mask = 0;\n        this._mask = mask;\n        this._hashIndex = countSetBits(this._mask);\n        this._hashCount = this._hashIndex + 1;\n    }\n    get value() {\n        return this._mask;\n    }\n    get level() {\n        return 32 - Math.clz32(this._mask);\n    }\n    get hashIndex() {\n        return this._hashIndex;\n    }\n    get hashCount() {\n        return this._hashCount;\n    }\n    apply(level) {\n        return new LevelMask(this._mask & ((1 << level) - 1));\n    }\n    isSignificant(level) {\n        let res = level === 0 || (this._mask >> (level - 1)) % 2 !== 0;\n        return res;\n        // bool res = level == 0 | | ( (mask_ >> (level -1)) % 2 != 0);\n    }\n}\nexports.LevelMask = LevelMask;\nfunction countSetBits(n) {\n    n = n - ((n >> 1) & 0x55555555);\n    n = (n & 0x33333333) + ((n >> 2) & 0x33333333);\n    return ((n + (n >> 4) & 0xF0F0F0F) * 0x1010101) >> 24;\n}\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.exoticPruned = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nconst LevelMask_1 = require(\"./LevelMask\");\nfunction exoticPruned(bits, refs) {\n    let reader = new BitReader_1.BitReader(bits);\n    // Check type\n    let type = reader.loadUint(8);\n    if (type !== 1) {\n        throw new Error(`Pruned branch cell must have type 1, got \"${type}\"`);\n    }\n    // Check refs\n    if (refs.length !== 0) {\n        throw new Error(`Pruned Branch cell can't has refs, got \"${refs.length}\"`);\n    }\n    // Resolve cell\n    let mask;\n    if (bits.length === 280) {\n        // Special case for config proof\n        // This test proof is generated in the moment of voting for a slashing\n        // it seems that tools generate it incorrectly and therefore doesn't have mask in it\n        // so we need to hardcode it equal to 1\n        mask = new LevelMask_1.LevelMask(1);\n    }\n    else {\n        // Check level\n        mask = new LevelMask_1.LevelMask(reader.loadUint(8));\n        if (mask.level < 1 || mask.level > 3) {\n            throw new Error(`Pruned Branch cell level must be >= 1 and <= 3, got \"${mask.level}/${mask.value}\"`);\n        }\n        // Read pruned\n        const size = 8 + 8 + (mask.apply(mask.level - 1).hashCount * (256 /* Hash */ + 16 /* Depth */));\n        if (bits.length !== size) {\n            throw new Error(`Pruned branch cell must have exactly ${size} bits, got \"${bits.length}\"`);\n        }\n    }\n    // Read pruned\n    let pruned = [];\n    let hashes = [];\n    let depths = [];\n    for (let i = 0; i < mask.level; i++) {\n        hashes.push(reader.loadBuffer(32));\n    }\n    for (let i = 0; i < mask.level; i++) {\n        depths.push(reader.loadUint(16));\n    }\n    for (let i = 0; i < mask.level; i++) {\n        pruned.push({\n            depth: depths[i],\n            hash: hashes[i]\n        });\n    }\n    return {\n        mask: mask.value,\n        pruned\n    };\n}\nexports.exoticPruned = exoticPruned;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.resolveExotic = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nconst CellType_1 = require(\"../CellType\");\nconst exoticLibrary_1 = require(\"./exoticLibrary\");\nconst exoticMerkleProof_1 = require(\"./exoticMerkleProof\");\nconst exoticMerkleUpdate_1 = require(\"./exoticMerkleUpdate\");\nconst exoticPruned_1 = require(\"./exoticPruned\");\nconst LevelMask_1 = require(\"./LevelMask\");\nfunction resolvePruned(bits, refs) {\n    // Parse pruned cell\n    let pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask(pruned.mask);\n    for (let i = 0; i < pruned.pruned.length; i++) {\n        depths.push(pruned.pruned[i].depth);\n        hashes.push(pruned.pruned[i].hash);\n    }\n    return {\n        type: CellType_1.CellType.PrunedBranch,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveLibrary(bits, refs) {\n    // Parse library cell\n    let pruned = (0, exoticLibrary_1.exoticLibrary)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask();\n    return {\n        type: CellType_1.CellType.Library,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveMerkleProof(bits, refs) {\n    // Parse merkle proof cell\n    let merkleProof = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask(refs[0].level() >> 1);\n    return {\n        type: CellType_1.CellType.MerkleProof,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveMerkleUpdate(bits, refs) {\n    // Parse merkle proof cell\n    let merkleUpdate = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);\n    // Calculate parameters\n    let depths = [];\n    let hashes = [];\n    let mask = new LevelMask_1.LevelMask((refs[0].level() | refs[1].level()) >> 1);\n    return {\n        type: CellType_1.CellType.MerkleUpdate,\n        depths,\n        hashes,\n        mask\n    };\n}\nfunction resolveExotic(bits, refs) {\n    let reader = new BitReader_1.BitReader(bits);\n    let type = reader.preloadUint(8);\n    if (type === 1) {\n        return resolvePruned(bits, refs);\n    }\n    if (type === 2) {\n        return resolveLibrary(bits, refs);\n    }\n    if (type === 3) {\n        return resolveMerkleProof(bits, refs);\n    }\n    if (type === 4) {\n        return resolveMerkleUpdate(bits, refs);\n    }\n    throw Error('Invalid exotic cell type: ' + type);\n}\nexports.resolveExotic = resolveExotic;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getRepr = exports.getBitsDescriptor = exports.getRefsDescriptor = void 0;\nconst CellType_1 = require(\"../CellType\");\nconst paddedBits_1 = require(\"../utils/paddedBits\");\nfunction getRefsDescriptor(refs, levelMask, type) {\n    return refs.length + (type !== CellType_1.CellType.Ordinary ? 1 : 0) * 8 + levelMask * 32;\n}\nexports.getRefsDescriptor = getRefsDescriptor;\nfunction getBitsDescriptor(bits) {\n    let len = bits.length;\n    return Math.ceil(len / 8) + Math.floor(len / 8);\n}\nexports.getBitsDescriptor = getBitsDescriptor;\nfunction getRepr(originalBits, bits, refs, level, levelMask, type) {\n    // Allocate\n    const bitsLen = Math.ceil(bits.length / 8);\n    const repr = Buffer.alloc(2 + bitsLen + (2 + 32) * refs.length);\n    // Write descriptors\n    let reprCursor = 0;\n    repr[reprCursor++] = getRefsDescriptor(refs, levelMask, type);\n    repr[reprCursor++] = getBitsDescriptor(originalBits);\n    // Write bits\n    (0, paddedBits_1.bitsToPaddedBuffer)(bits).copy(repr, reprCursor);\n    reprCursor += bitsLen;\n    // Write refs\n    for (const c of refs) {\n        let childDepth;\n        if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {\n            childDepth = c.depth(level + 1);\n        }\n        else {\n            childDepth = c.depth(level);\n        }\n        repr[reprCursor++] = Math.floor(childDepth / 256);\n        repr[reprCursor++] = childDepth % 256;\n    }\n    for (const c of refs) {\n        let childHash;\n        if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {\n            childHash = c.hash(level + 1);\n        }\n        else {\n            childHash = c.hash(level);\n        }\n        childHash.copy(repr, reprCursor);\n        reprCursor += 32;\n    }\n    // Result\n    return repr;\n}\nexports.getRepr = getRepr;\n", "import { packedValue, EncodingType, FormatType } from \"./custom_types\";\n/**\n * Return type for all the *2packed functions\n */\nconst b64Tab = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\nconst arraybuffer_error = \"ARRAYBUFFER not supported by this environment\";\nconst uint8array_error = \"UINT8ARRAY not supported by this environment\";\n\n/**\n * Convert a string to an array of words.\n *\n * There is a known bug with an odd number of existing bytes and using a UTF-16 encoding.  However, this function is\n * used such that the existing bytes are always a result of a previous UTF-16 str2packed call and therefore there \n * should never be an odd number of existing bytes.\n\n * @param str Unicode string to be converted to binary representation.\n * @param utfType The Unicode type to use to encode the source string.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked`.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction str2packed(\n  str: string,\n  utfType: EncodingType,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let codePnt,\n    codePntArr,\n    byteCnt = 0,\n    i,\n    j,\n    intOffset,\n    byteOffset,\n    shiftModifier,\n    transposeBytes;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3;\n\n  if (\"UTF8\" === utfType) {\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n    for (i = 0; i < str.length; i += 1) {\n      codePnt = str.charCodeAt(i);\n      codePntArr = [];\n\n      if (0x80 > codePnt) {\n        codePntArr.push(codePnt);\n      } else if (0x800 > codePnt) {\n        codePntArr.push(0xc0 | (codePnt >>> 6));\n        codePntArr.push(0x80 | (codePnt & 0x3f));\n      } else if (0xd800 > codePnt || 0xe000 <= codePnt) {\n        codePntArr.push(0xe0 | (codePnt >>> 12), 0x80 | ((codePnt >>> 6) & 0x3f), 0x80 | (codePnt & 0x3f));\n      } else {\n        i += 1;\n        codePnt = 0x10000 + (((codePnt & 0x3ff) << 10) | (str.charCodeAt(i) & 0x3ff));\n        codePntArr.push(\n          0xf0 | (codePnt >>> 18),\n          0x80 | ((codePnt >>> 12) & 0x3f),\n          0x80 | ((codePnt >>> 6) & 0x3f),\n          0x80 | (codePnt & 0x3f)\n        );\n      }\n\n      for (j = 0; j < codePntArr.length; j += 1) {\n        byteOffset = byteCnt + existingByteLen;\n        intOffset = byteOffset >>> 2;\n        while (packed.length <= intOffset) {\n          packed.push(0);\n        }\n        /* Known bug kicks in here */\n        packed[intOffset] |= codePntArr[j] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n        byteCnt += 1;\n      }\n    }\n  } else {\n    /* UTF16BE or UTF16LE */\n    shiftModifier = bigEndianMod === -1 ? 2 : 0;\n    /* Internally strings are UTF-16BE so transpose bytes under two conditions:\n     * need LE and not switching endianness due to SHA-3\n     * need BE and switching endianness due to SHA-3 */\n    transposeBytes = (\"UTF16LE\" === utfType && bigEndianMod !== 1) || (\"UTF16LE\" !== utfType && bigEndianMod === 1);\n    for (i = 0; i < str.length; i += 1) {\n      codePnt = str.charCodeAt(i);\n      if (transposeBytes === true) {\n        j = codePnt & 0xff;\n        codePnt = (j << 8) | (codePnt >>> 8);\n      }\n\n      byteOffset = byteCnt + existingByteLen;\n      intOffset = byteOffset >>> 2;\n      while (packed.length <= intOffset) {\n        packed.push(0);\n      }\n      packed[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n      byteCnt += 2;\n    }\n  }\n  return { value: packed, binLen: byteCnt * 8 + existingPackedLen };\n}\n\n/**\n * Convert a hex string to an array of words.\n *\n * @param str Hexadecimal string to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction hex2packed(\n  str: string,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let i, num, intOffset, byteOffset;\n\n  if (0 !== str.length % 2) {\n    throw new Error(\"String of HEX type must be in byte increments\");\n  }\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < str.length; i += 2) {\n    num = parseInt(str.substr(i, 2), 16);\n    if (!isNaN(num)) {\n      byteOffset = (i >>> 1) + existingByteLen;\n      intOffset = byteOffset >>> 2;\n      while (packed.length <= intOffset) {\n        packed.push(0);\n      }\n      packed[intOffset] |= num << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n    } else {\n      throw new Error(\"String of HEX type contains invalid characters\");\n    }\n  }\n\n  return { value: packed, binLen: str.length * 4 + existingPackedLen };\n}\n\n/**\n * Convert a string of raw bytes to an array of words.\n *\n * @param str String of raw bytes to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction bytes2packed(\n  str: string,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let codePnt, i, intOffset, byteOffset;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < str.length; i += 1) {\n    codePnt = str.charCodeAt(i);\n\n    byteOffset = i + existingByteLen;\n    intOffset = byteOffset >>> 2;\n    if (packed.length <= intOffset) {\n      packed.push(0);\n    }\n    packed[intOffset] |= codePnt << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n  }\n\n  return { value: packed, binLen: str.length * 8 + existingPackedLen };\n}\n\n/**\n * Convert a base-64 string to an array of words.\n *\n * @param str Base64-encoded string to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction b642packed(\n  str: string,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let byteCnt = 0,\n    index,\n    i,\n    j,\n    tmpInt,\n    strPart,\n    intOffset,\n    byteOffset;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0,\n    firstEqual = str.indexOf(\"=\");\n\n  if (-1 === str.search(/^[a-zA-Z0-9=+/]+$/)) {\n    throw new Error(\"Invalid character in base-64 string\");\n  }\n\n  str = str.replace(/=/g, \"\");\n  if (-1 !== firstEqual && firstEqual < str.length) {\n    throw new Error(\"Invalid '=' found in base-64 string\");\n  }\n\n  for (i = 0; i < str.length; i += 4) {\n    strPart = str.substr(i, 4);\n    tmpInt = 0;\n\n    for (j = 0; j < strPart.length; j += 1) {\n      index = b64Tab.indexOf(strPart.charAt(j));\n      tmpInt |= index << (18 - 6 * j);\n    }\n\n    for (j = 0; j < strPart.length - 1; j += 1) {\n      byteOffset = byteCnt + existingByteLen;\n      intOffset = byteOffset >>> 2;\n      while (packed.length <= intOffset) {\n        packed.push(0);\n      }\n      packed[intOffset] |=\n        ((tmpInt >>> (16 - j * 8)) & 0xff) << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n      byteCnt += 1;\n    }\n  }\n\n  return { value: packed, binLen: byteCnt * 8 + existingPackedLen };\n}\n\n/**\n * Convert an Uint8Array to an array of words.\n *\n * @param arr Uint8Array to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction uint8array2packed(\n  arr: Uint8Array,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  let i, intOffset, byteOffset;\n\n  existingPackedLen = existingPackedLen || 0;\n  const packed = existingPacked || [0],\n    existingByteLen = existingPackedLen >>> 3,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < arr.length; i += 1) {\n    byteOffset = i + existingByteLen;\n    intOffset = byteOffset >>> 2;\n    if (packed.length <= intOffset) {\n      packed.push(0);\n    }\n    packed[intOffset] |= arr[i] << (8 * (shiftModifier + bigEndianMod * (byteOffset % 4)));\n  }\n\n  return { value: packed, binLen: arr.length * 8 + existingPackedLen };\n}\n\n/**\n * Convert an ArrayBuffer to an array of words\n *\n * @param arr ArrayBuffer to be converted to binary representation.\n * @param existingPacked A packed int array of bytes to append the results to.\n * @param existingPackedLen The number of bits in `existingPacked` array.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Hashmap of the packed values.\n */\nfunction arraybuffer2packed(\n  arr: ArrayBuffer,\n  existingPacked: number[] | undefined,\n  existingPackedLen: number | undefined,\n  bigEndianMod: -1 | 1\n): packedValue {\n  return uint8array2packed(new Uint8Array(arr), existingPacked, existingPackedLen, bigEndianMod);\n}\n\n/**\n * Function that takes an input format and UTF encoding and returns the appropriate function used to convert the input.\n *\n * @param format The format of the input to be converted\n * @param utfType The string encoding to use for TEXT inputs.\n * @param bigEndianMod Modifier for whether hash function is big or small endian\n * @returns Function that will convert an input to a packed int array.\n */\nexport function getStrConverter(\n  format: FormatType,\n  utfType: EncodingType,\n  bigEndianMod: -1 | 1\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n): (input: any, existingBin?: number[], existingBinLen?: number) => packedValue {\n  /* Validate encoding */\n  switch (utfType) {\n    case \"UTF8\":\n    /* Fallthrough */\n    case \"UTF16BE\":\n    /* Fallthrough */\n    case \"UTF16LE\":\n      /* Fallthrough */\n      break;\n    default:\n      throw new Error(\"encoding must be UTF8, UTF16BE, or UTF16LE\");\n  }\n\n  /* Map inputFormat to the appropriate converter */\n  switch (format) {\n    case \"HEX\":\n      /**\n       * @param str String of hexadecimal bytes to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return hex2packed(str, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"TEXT\":\n      /**\n       * @param str Unicode string to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return str2packed(str, utfType, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"B64\":\n      /**\n       * @param str Base64-encoded string to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return b642packed(str, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"BYTES\":\n      /**\n       * @param str String of raw bytes to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (str: string, existingBin?: number[], existingBinLen?: number): packedValue {\n        return bytes2packed(str, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"ARRAYBUFFER\":\n      try {\n        new ArrayBuffer(0);\n      } catch (ignore) {\n        throw new Error(arraybuffer_error);\n      }\n      /**\n       * @param arr ArrayBuffer to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (arr: ArrayBuffer, existingBin?: number[], existingBinLen?: number): packedValue {\n        return arraybuffer2packed(arr, existingBin, existingBinLen, bigEndianMod);\n      };\n    case \"UINT8ARRAY\":\n      try {\n        new Uint8Array(0);\n      } catch (ignore) {\n        throw new Error(uint8array_error);\n      }\n      /**\n       * @param arr Uint8Array to be converted to binary representation.\n       * @param existingPacked A packed int array of bytes to append the results to.\n       * @param existingPackedLen The number of bits in `existingPacked` array.\n       * @returns Hashmap of the packed values.\n       */\n      return function (arr: Uint8Array, existingBin?: number[], existingBinLen?: number): packedValue {\n        return uint8array2packed(arr, existingBin, existingBinLen, bigEndianMod);\n      };\n    default:\n      throw new Error(\"format must be HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY\");\n  }\n}\n\n/**\n * Convert an array of words to a hexadecimal string.\n *\n * toString() won't work here because it removes preceding zeros (e.g. 0x00000001.toString === \"1\" rather than\n * \"00000001\" and 0.toString(16) === \"0\" rather than \"00\").\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param formatOpts Hashmap containing validated output formatting options.\n * @returns Hexadecimal representation of `packed`.\n */\nexport function packed2hex(\n  packed: number[],\n  outputLength: number,\n  bigEndianMod: -1 | 1,\n  formatOpts: { outputUpper: boolean; b64Pad: string }\n): string {\n  const hex_tab = \"0123456789abcdef\";\n  let str = \"\",\n    i,\n    srcByte;\n\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 1) {\n    /* The below is more than a byte but it gets taken care of later */\n    srcByte = packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)));\n    str += hex_tab.charAt((srcByte >>> 4) & 0xf) + hex_tab.charAt(srcByte & 0xf);\n  }\n\n  return formatOpts[\"outputUpper\"] ? str.toUpperCase() : str;\n}\n\n/**\n * Convert an array of words to a base-64 string.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param formatOpts Hashmap containing validated output formatting options.\n * @returns Base64-encoded representation of `packed`.\n */\nexport function packed2b64(\n  packed: number[],\n  outputLength: number,\n  bigEndianMod: -1 | 1,\n  formatOpts: { outputUpper: boolean; b64Pad: string }\n): string {\n  let str = \"\",\n    i,\n    j,\n    triplet,\n    int1,\n    int2;\n\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 3) {\n    int1 = i + 1 < length ? packed[(i + 1) >>> 2] : 0;\n    int2 = i + 2 < length ? packed[(i + 2) >>> 2] : 0;\n    triplet =\n      (((packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff) << 16) |\n      (((int1 >>> (8 * (shiftModifier + bigEndianMod * ((i + 1) % 4)))) & 0xff) << 8) |\n      ((int2 >>> (8 * (shiftModifier + bigEndianMod * ((i + 2) % 4)))) & 0xff);\n    for (j = 0; j < 4; j += 1) {\n      if (i * 8 + j * 6 <= outputLength) {\n        str += b64Tab.charAt((triplet >>> (6 * (3 - j))) & 0x3f);\n      } else {\n        str += formatOpts[\"b64Pad\"];\n      }\n    }\n  }\n  return str;\n}\n\n/**\n * Convert an array of words to raw bytes string.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns Raw bytes representation of `packed`.\n */\nexport function packed2bytes(packed: number[], outputLength: number, bigEndianMod: -1 | 1): string {\n  let str = \"\",\n    i,\n    srcByte;\n\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 1) {\n    srcByte = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff;\n    str += String.fromCharCode(srcByte);\n  }\n\n  return str;\n}\n\n/**\n * Convert an array of words to an ArrayBuffer.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns An ArrayBuffer containing bytes from `packed.\n */\nexport function packed2arraybuffer(packed: number[], outputLength: number, bigEndianMod: -1 | 1): ArrayBuffer {\n  let i;\n  const length = outputLength / 8,\n    retVal = new ArrayBuffer(length),\n    arrView = new Uint8Array(retVal),\n    shiftModifier = bigEndianMod === -1 ? 3 : 0;\n\n  for (i = 0; i < length; i += 1) {\n    arrView[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff;\n  }\n\n  return retVal;\n}\n\n/**\n * Convert an array of words to an Uint8Array.\n *\n * @param packed Array of integers to be converted.\n * @param outputLength Length of output in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @returns An Uint8Array containing bytes from `packed.\n */\nexport function packed2uint8array(packed: number[], outputLength: number, bigEndianMod: -1 | 1): Uint8Array {\n  let i;\n  const length = outputLength / 8,\n    shiftModifier = bigEndianMod === -1 ? 3 : 0,\n    retVal = new Uint8Array(length);\n\n  for (i = 0; i < length; i += 1) {\n    retVal[i] = (packed[i >>> 2] >>> (8 * (shiftModifier + bigEndianMod * (i % 4)))) & 0xff;\n  }\n\n  return retVal;\n}\n\n/**\n * Function that takes an output format and associated parameters and returns a function that converts packed integers\n * to that format.\n *\n * @param format The desired output formatting.\n * @param outputBinLen Output length in bits.\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param outputOptions Hashmap of output formatting options\n * @returns Function that will convert a packed integer array to desired format.\n */\nexport function getOutputConverter(\n  format: \"HEX\" | \"B64\" | \"BYTES\" | \"ARRAYBUFFER\" | \"UINT8ARRAY\",\n  outputBinLen: number,\n  bigEndianMod: -1 | 1,\n  outputOptions: { outputUpper: boolean; b64Pad: string }\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n): (binarray: number[]) => any {\n  switch (format) {\n    case \"HEX\":\n      return function (binarray): string {\n        return packed2hex(binarray, outputBinLen, bigEndianMod, outputOptions);\n      };\n    case \"B64\":\n      return function (binarray): string {\n        return packed2b64(binarray, outputBinLen, bigEndianMod, outputOptions);\n      };\n    case \"BYTES\":\n      return function (binarray): string {\n        return packed2bytes(binarray, outputBinLen, bigEndianMod);\n      };\n    case \"ARRAYBUFFER\":\n      try {\n        /* Need to test ArrayBuffer support */\n        new ArrayBuffer(0);\n      } catch (ignore) {\n        throw new Error(arraybuffer_error);\n      }\n      return function (binarray): ArrayBuffer {\n        return packed2arraybuffer(binarray, outputBinLen, bigEndianMod);\n      };\n    case \"UINT8ARRAY\":\n      try {\n        /* Need to test Uint8Array support */\n        new Uint8Array(0);\n      } catch (ignore) {\n        throw new Error(uint8array_error);\n      }\n      return function (binarray): Uint8Array {\n        return packed2uint8array(binarray, outputBinLen, bigEndianMod);\n      };\n    default:\n      throw new Error(\"format must be HEX, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY\");\n  }\n}\n", "import { getStrConverter, getOutputConverter } from \"./converters\";\n\nimport {\n  FormatType,\n  EncodingType,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n  packedValue,\n  GenericInputType,\n} from \"./custom_types\";\n\nexport const TWO_PWR_32 = 4294967296;\n\n/* Constant used in SHA-2 families */\nexport const K_sha2 = [\n  0x428a2f98,\n  0x71374491,\n  0xb5c0fbcf,\n  0xe9b5dba5,\n  0x3956c25b,\n  0x59f111f1,\n  0x923f82a4,\n  0xab1c5ed5,\n  0xd807aa98,\n  0x12835b01,\n  0x243185be,\n  0x550c7dc3,\n  0x72be5d74,\n  0x80deb1fe,\n  0x9bdc06a7,\n  0xc19bf174,\n  0xe49b69c1,\n  0xefbe4786,\n  0x0fc19dc6,\n  0x240ca1cc,\n  0x2de92c6f,\n  0x4a7484aa,\n  0x5cb0a9dc,\n  0x76f988da,\n  0x983e5152,\n  0xa831c66d,\n  0xb00327c8,\n  0xbf597fc7,\n  0xc6e00bf3,\n  0xd5a79147,\n  0x06ca6351,\n  0x14292967,\n  0x27b70a85,\n  0x2e1b2138,\n  0x4d2c6dfc,\n  0x53380d13,\n  0x650a7354,\n  0x766a0abb,\n  0x81c2c92e,\n  0x92722c85,\n  0xa2bfe8a1,\n  0xa81a664b,\n  0xc24b8b70,\n  0xc76c51a3,\n  0xd192e819,\n  0xd6990624,\n  0xf40e3585,\n  0x106aa070,\n  0x19a4c116,\n  0x1e376c08,\n  0x2748774c,\n  0x34b0bcb5,\n  0x391c0cb3,\n  0x4ed8aa4a,\n  0x5b9cca4f,\n  0x682e6ff3,\n  0x748f82ee,\n  0x78a5636f,\n  0x84c87814,\n  0x8cc70208,\n  0x90befffa,\n  0xa4506ceb,\n  0xbef9a3f7,\n  0xc67178f2,\n];\n\n/* Constant used in SHA-2 families */\nexport const H_trunc = [0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4];\n\n/* Constant used in SHA-2 families */\nexport const H_full = [0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19];\n\nexport const sha_variant_error = \"Chosen SHA variant is not supported\";\nexport const mac_rounds_error = \"Cannot set numRounds with MAC\";\n\n/**\n * Concatenates 2 packed arrays. Clobbers array `a`.\n *\n * @param a First array to concatenate.\n * @param b Second array to concatenate.\n * @returns The concatentation of `a` + `b`.\n */\nexport function packedLEConcat(a: packedValue, b: packedValue): packedValue {\n  let i, arrOffset;\n  const aByteLen = a[\"binLen\"] >>> 3,\n    bByteLen = b[\"binLen\"] >>> 3,\n    leftShiftAmount = aByteLen << 3,\n    rightShiftAmount = (4 - aByteLen) << 3;\n\n  /* If a only contains \"full\" integers, we can just use concat which is so much easier */\n  if (aByteLen % 4 !== 0) {\n    for (i = 0; i < bByteLen; i += 4) {\n      arrOffset = (aByteLen + i) >>> 2;\n      /* Left shift chops off bits over 32-bits */\n      a[\"value\"][arrOffset] |= b[\"value\"][i >>> 2] << leftShiftAmount;\n      a[\"value\"].push(0);\n      a[\"value\"][arrOffset + 1] |= b[\"value\"][i >>> 2] >>> rightShiftAmount;\n    }\n\n    /* Since an unconditional push was performed above, we may have pushed an extra value if it could have been\n       encoded without it.  Check if popping an int off (reducing total length by 4 bytes) is still bigger than the\n       needed size. */\n    if ((a[\"value\"].length << 2) - 4 >= bByteLen + aByteLen) {\n      a[\"value\"].pop();\n    }\n\n    return { value: a[\"value\"], binLen: a[\"binLen\"] + b[\"binLen\"] };\n  } else {\n    return { value: a[\"value\"].concat(b[\"value\"]), binLen: a[\"binLen\"] + b[\"binLen\"] };\n  }\n}\n\n/**\n * Validate hash list containing output formatting options, ensuring presence of every option or adding the default\n * value.\n *\n * @param options Hashmap of output formatting options from user.\n * @returns Validated hashmap containing output formatting options.\n */\nexport function getOutputOpts(options?: {\n  outputUpper?: boolean;\n  b64Pad?: string;\n  shakeLen?: number;\n  outputLen?: number;\n}): { outputUpper: boolean; b64Pad: string; outputLen: number } {\n  const retVal = { outputUpper: false, b64Pad: \"=\", outputLen: -1 },\n    outputOptions: { outputUpper?: boolean; b64Pad?: string; shakeLen?: number; outputLen?: number } = options || {},\n    lenErrstr = \"Output length must be a multiple of 8\";\n\n  retVal[\"outputUpper\"] = outputOptions[\"outputUpper\"] || false;\n\n  if (outputOptions[\"b64Pad\"]) {\n    retVal[\"b64Pad\"] = outputOptions[\"b64Pad\"];\n  }\n\n  if (outputOptions[\"outputLen\"]) {\n    if (outputOptions[\"outputLen\"] % 8 !== 0) {\n      throw new Error(lenErrstr);\n    }\n    retVal[\"outputLen\"] = outputOptions[\"outputLen\"];\n  } else if (outputOptions[\"shakeLen\"]) {\n    if (outputOptions[\"shakeLen\"] % 8 !== 0) {\n      throw new Error(lenErrstr);\n    }\n    retVal[\"outputLen\"] = outputOptions[\"shakeLen\"];\n  }\n\n  if (\"boolean\" !== typeof retVal[\"outputUpper\"]) {\n    throw new Error(\"Invalid outputUpper formatting option\");\n  }\n\n  if (\"string\" !== typeof retVal[\"b64Pad\"]) {\n    throw new Error(\"Invalid b64Pad formatting option\");\n  }\n\n  return retVal;\n}\n\n/**\n * Parses an external constructor object and returns a packed number, if possible.\n *\n * @param key The human-friendly key name to prefix any errors with\n * @param value The input value object to parse\n * @param bigEndianMod Modifier for whether hash function is big or small endian.\n * @param fallback Fallback value if `value` is undefined.  If not present and `value` is undefined, an Error is thrown\n */\nexport function parseInputOption(\n  key: string,\n  value: GenericInputType | undefined,\n  bigEndianMod: -1 | 1,\n  fallback?: packedValue\n): packedValue {\n  const errStr = key + \" must include a value and format\";\n  if (!value) {\n    if (!fallback) {\n      throw new Error(errStr);\n    }\n    return fallback;\n  }\n\n  if (typeof value[\"value\"] === \"undefined\" || !value[\"format\"]) {\n    throw new Error(errStr);\n  }\n\n  return getStrConverter(\n    value[\"format\"],\n    // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n    // @ts-ignore - the value of encoding gets value checked by getStrConverter\n    value[\"encoding\"] || \"UTF8\",\n    bigEndianMod\n  )(value[\"value\"]);\n}\n\nexport abstract class jsSHABase<StateT, VariantT> {\n  /**\n   * @param variant The desired SHA variant.\n   * @param inputFormat The input format to be used in future `update` calls.\n   * @param options Hashmap of extra input options.\n   */\n  /* Needed inputs */\n  protected readonly shaVariant: VariantT;\n  protected readonly inputFormat: FormatType;\n  protected readonly utfType: EncodingType;\n  protected readonly numRounds: number;\n\n  /* State */\n  protected abstract intermediateState: StateT;\n  protected keyWithIPad: number[];\n  protected keyWithOPad: number[];\n  protected remainder: number[];\n  protected remainderLen: number;\n  protected updateCalled: boolean;\n  protected processedLen: number;\n  protected macKeySet: boolean;\n\n  /* Variant specifics */\n  protected abstract readonly variantBlockSize: number;\n  protected abstract readonly bigEndianMod: -1 | 1;\n  protected abstract readonly outputBinLen: number;\n  protected abstract readonly isVariableLen: boolean;\n  protected abstract readonly HMACSupported: boolean;\n\n  /* Functions */\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  protected abstract readonly converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  protected abstract readonly roundFunc: (block: number[], H: StateT) => StateT;\n  protected abstract readonly finalizeFunc: (\n    remainder: number[],\n    remainderBinLen: number,\n    processedBinLen: number,\n    H: StateT,\n    outputLen: number\n  ) => number[];\n  protected abstract readonly stateCloneFunc: (state: StateT) => StateT;\n  protected abstract readonly newStateFunc: (variant: VariantT) => StateT;\n  protected abstract readonly getMAC: ((options: { outputLen: number }) => number[]) | null;\n\n  protected constructor(variant: VariantT, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  protected constructor(variant: VariantT, inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected constructor(variant: any, inputFormat: any, options?: any) {\n    const inputOptions = options || {};\n    this.inputFormat = inputFormat;\n\n    this.utfType = inputOptions[\"encoding\"] || \"UTF8\";\n    this.numRounds = inputOptions[\"numRounds\"] || 1;\n\n    /* eslint-disable-next-line @typescript-eslint/ban-ts-ignore */\n    // @ts-ignore - The spec actually says ToString is called on the first parseInt argument so it's OK to use it here\n    // to check if an arugment is an integer. This cheat would break if it's used to get the value of the argument.\n    if (isNaN(this.numRounds) || this.numRounds !== parseInt(this.numRounds, 10) || 1 > this.numRounds) {\n      throw new Error(\"numRounds must a integer >= 1\");\n    }\n\n    this.shaVariant = variant;\n    this.remainder = [];\n    this.remainderLen = 0;\n    this.updateCalled = false;\n    this.processedLen = 0;\n    this.macKeySet = false;\n    this.keyWithIPad = [];\n    this.keyWithOPad = [];\n  }\n\n  /**\n   * Hashes as many blocks as possible.  Stores the rest for either a future update or getHash call.\n   *\n   * @param srcString The input to be hashed.\n   */\n  update(srcString: string | ArrayBuffer | Uint8Array): void {\n    let i,\n      updateProcessedLen = 0;\n    const variantBlockIntInc = this.variantBlockSize >>> 5,\n      convertRet = this.converterFunc(srcString, this.remainder, this.remainderLen),\n      chunkBinLen = convertRet[\"binLen\"],\n      chunk = convertRet[\"value\"],\n      chunkIntLen = chunkBinLen >>> 5;\n\n    for (i = 0; i < chunkIntLen; i += variantBlockIntInc) {\n      if (updateProcessedLen + this.variantBlockSize <= chunkBinLen) {\n        this.intermediateState = this.roundFunc(chunk.slice(i, i + variantBlockIntInc), this.intermediateState);\n        updateProcessedLen += this.variantBlockSize;\n      }\n    }\n    this.processedLen += updateProcessedLen;\n    this.remainder = chunk.slice(updateProcessedLen >>> 5);\n    this.remainderLen = chunkBinLen % this.variantBlockSize;\n    this.updateCalled = true;\n  }\n\n  /**\n   * Returns the desired SHA hash of the input fed in via `update` calls.\n   *\n   * @param format The desired output formatting\n   * @param options Hashmap of output formatting options. `outputLen` must be specified for variable length hashes.\n   *   `outputLen` replaces the now deprecated `shakeLen` key.\n   * @returns The hash in the format specified.\n   */\n  getHash(format: \"HEX\", options?: { outputUpper?: boolean; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"B64\", options?: { b64Pad?: string; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"BYTES\", options?: { outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"UINT8ARRAY\", options?: { outputLen?: number; shakeLen?: number }): Uint8Array;\n  getHash(format: \"ARRAYBUFFER\", options?: { outputLen?: number; shakeLen?: number }): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHash(format: any, options?: any): any {\n    let i,\n      finalizedState,\n      outputBinLen = this.outputBinLen;\n\n    const outputOptions = getOutputOpts(options);\n\n    if (this.isVariableLen) {\n      if (outputOptions[\"outputLen\"] === -1) {\n        throw new Error(\"Output length must be specified in options\");\n      }\n      outputBinLen = outputOptions[\"outputLen\"];\n    }\n\n    const formatFunc = getOutputConverter(format, outputBinLen, this.bigEndianMod, outputOptions);\n    if (this.macKeySet && this.getMAC) {\n      return formatFunc(this.getMAC(outputOptions));\n    }\n\n    finalizedState = this.finalizeFunc(\n      this.remainder.slice(),\n      this.remainderLen,\n      this.processedLen,\n      this.stateCloneFunc(this.intermediateState),\n      outputBinLen\n    );\n    for (i = 1; i < this.numRounds; i += 1) {\n      /* Need to mask out bits that should be zero due to output not being a multiple of 32 */\n      if (this.isVariableLen && outputBinLen % 32 !== 0) {\n        finalizedState[finalizedState.length - 1] &= 0x00ffffff >>> (24 - (outputBinLen % 32));\n      }\n      finalizedState = this.finalizeFunc(\n        finalizedState,\n        outputBinLen,\n        0,\n        this.newStateFunc(this.shaVariant),\n        outputBinLen\n      );\n    }\n\n    return formatFunc(finalizedState);\n  }\n\n  /**\n   * Sets the HMAC key for an eventual `getHMAC` call.  Must be called immediately after jsSHA object instantiation.\n   *\n   * @param key The key used to calculate the HMAC\n   * @param inputFormat The format of key.\n   * @param options Hashmap of extra input options.\n   */\n  setHMACKey(key: string, inputFormat: \"TEXT\", options?: { encoding?: EncodingType }): void;\n  setHMACKey(key: string, inputFormat: \"B64\" | \"HEX\" | \"BYTES\"): void;\n  setHMACKey(key: ArrayBuffer, inputFormat: \"ARRAYBUFFER\"): void;\n  setHMACKey(key: Uint8Array, inputFormat: \"UINT8ARRAY\"): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setHMACKey(key: any, inputFormat: any, options?: any): void {\n    if (!this.HMACSupported) {\n      throw new Error(\"Variant does not support HMAC\");\n    }\n\n    if (this.updateCalled) {\n      throw new Error(\"Cannot set MAC key after calling update\");\n    }\n\n    const keyOptions = options || {},\n      keyConverterFunc = getStrConverter(inputFormat, keyOptions[\"encoding\"] || \"UTF8\", this.bigEndianMod);\n\n    this._setHMACKey(keyConverterFunc(key));\n  }\n\n  /**\n   * Internal function that sets the MAC key.\n   *\n   * @param key The packed MAC key to use\n   */\n  protected _setHMACKey(key: packedValue): void {\n    const blockByteSize = this.variantBlockSize >>> 3,\n      lastArrayIndex = blockByteSize / 4 - 1;\n    let i;\n    if (this.numRounds !== 1) {\n      throw new Error(mac_rounds_error);\n    }\n\n    if (this.macKeySet) {\n      throw new Error(\"MAC key already set\");\n    }\n\n    /* Figure out what to do with the key based on its size relative to\n     * the hash's block size */\n    if (blockByteSize < key[\"binLen\"] / 8) {\n      key[\"value\"] = this.finalizeFunc(\n        key[\"value\"],\n        key[\"binLen\"],\n        0,\n        this.newStateFunc(this.shaVariant),\n        this.outputBinLen\n      );\n    }\n    while (key[\"value\"].length <= lastArrayIndex) {\n      key[\"value\"].push(0);\n    }\n    /* Create ipad and opad */\n    for (i = 0; i <= lastArrayIndex; i += 1) {\n      this.keyWithIPad[i] = key[\"value\"][i] ^ 0x36363636;\n      this.keyWithOPad[i] = key[\"value\"][i] ^ 0x5c5c5c5c;\n    }\n\n    this.intermediateState = this.roundFunc(this.keyWithIPad, this.intermediateState);\n    this.processedLen = this.variantBlockSize;\n\n    this.macKeySet = true;\n  }\n\n  /**\n   * Returns the the HMAC in the specified format using the key given by a previous `setHMACKey` call.\n   *\n   * @param format The desired output formatting.\n   * @param options Hashmap of extra outputs options.\n   * @returns The HMAC in the format specified.\n   */\n  getHMAC(format: \"HEX\", options?: { outputUpper?: boolean }): string;\n  getHMAC(format: \"B64\", options?: { b64Pad?: string }): string;\n  getHMAC(format: \"BYTES\"): string;\n  getHMAC(format: \"UINT8ARRAY\"): Uint8Array;\n  getHMAC(format: \"ARRAYBUFFER\"): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHMAC(format: any, options?: any): any {\n    const outputOptions = getOutputOpts(options),\n      formatFunc = getOutputConverter(format, this.outputBinLen, this.bigEndianMod, outputOptions);\n\n    return formatFunc(this._getHMAC());\n  }\n\n  /**\n   * Internal function that returns the \"raw\" HMAC\n   */\n  protected _getHMAC(): number[] {\n    let finalizedState;\n\n    if (!this.macKeySet) {\n      throw new Error(\"Cannot call getHMAC without first setting MAC key\");\n    }\n\n    const firstHash = this.finalizeFunc(\n      this.remainder.slice(),\n      this.remainderLen,\n      this.processedLen,\n      this.stateCloneFunc(this.intermediateState),\n      this.outputBinLen\n    );\n    finalizedState = this.roundFunc(this.keyWithOPad, this.newStateFunc(this.shaVariant));\n    finalizedState = this.finalizeFunc(\n      firstHash,\n      this.outputBinLen,\n      this.variantBlockSize,\n      finalizedState,\n      this.outputBinLen\n    );\n\n    return finalizedState;\n  }\n}\n", "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n", "/*\n * Note 1: All the functions in this file guarantee only that the bottom 32-bits of the return value are correct.\n * JavaScript is flakey when it comes to bit operations and a '1' in the highest order bit of a 32-bit number causes\n * it to be interpreted as a negative number per two's complement.\n *\n * Note 2: Per the ECMAScript spec, all JavaScript operations mask the shift amount by 0x1F.  This results in weird\n * cases like 1 << 32 == 1 and 1 << 33 === 1 << 1 === 2\n */\n\n/**\n * The 32-bit implementation of circular rotate left.\n *\n * @param x The 32-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted left circularly by `n` bits\n */\nexport function rotl_32(x: number, n: number): number {\n  return (x << n) | (x >>> (32 - n));\n}\n\n/**\n * The 32-bit implementation of circular rotate right.\n *\n * @param x The 32-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted right circularly by `n` bits\n */\nfunction rotr_32(x: number, n: number): number {\n  return (x >>> n) | (x << (32 - n));\n}\n\n/**\n * The 32-bit implementation of shift right.\n *\n * @param x The 32-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted by `n` bits.\n */\nfunction shr_32(x: number, n: number): number {\n  return x >>> n;\n}\n\n/**\n * The 32-bit implementation of the NIST specified Parity function.\n *\n * @param x The first 32-bit integer argument.\n * @param y The second 32-bit integer argument.\n * @param z The third 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function parity_32(x: number, y: number, z: number): number {\n  return x ^ y ^ z;\n}\n\n/**\n * The 32-bit implementation of the NIST specified Ch function.\n *\n * @param x The first 32-bit integer argument.\n * @param y The second 32-bit integer argument.\n * @param z The third 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function ch_32(x: number, y: number, z: number): number {\n  return (x & y) ^ (~x & z);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Maj function.\n *\n * @param x The first 32-bit integer argument.\n * @param y The second 32-bit integer argument.\n * @param z The third 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function maj_32(x: number, y: number, z: number): number {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Sigma0 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma0_32(x: number): number {\n  return rotr_32(x, 2) ^ rotr_32(x, 13) ^ rotr_32(x, 22);\n}\n\n/**\n * Add two 32-bit integers.\n *\n * This uses 16-bit operations internally to work around sign problems due to JavaScript's lack of uint32 support.\n *\n * @param a The first 32-bit integer argument to be added.\n * @param b The second 32-bit integer argument to be added.\n * @returns The sum of `a` + `b`.\n */\nexport function safeAdd_32_2(a: number, b: number): number {\n  const lsw = (a & 0xffff) + (b & 0xffff),\n    msw = (a >>> 16) + (b >>> 16) + (lsw >>> 16);\n\n  return ((msw & 0xffff) << 16) | (lsw & 0xffff);\n}\n\n/**\n * Add four 32-bit integers.\n *\n * This uses 16-bit operations internally to work around sign problems due to JavaScript's lack of uint32 support.\n *\n * @param a The first 32-bit integer argument to be added.\n * @param b The second 32-bit integer argument to be added.\n * @param c The third 32-bit integer argument to be added.\n * @param d The fourth 32-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d`.\n */\nexport function safeAdd_32_4(a: number, b: number, c: number, d: number): number {\n  const lsw = (a & 0xffff) + (b & 0xffff) + (c & 0xffff) + (d & 0xffff),\n    msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (lsw >>> 16);\n\n  return ((msw & 0xffff) << 16) | (lsw & 0xffff);\n}\n\n/**\n * Add five 32-bit integers.\n *\n * This uses 16-bit operations internally to work around sign problems due to JavaScript's lack of uint32 support.\n *\n * @param a The first 32-bit integer argument to be added.\n * @param b The second 32-bit integer argument to be added.\n * @param c The third 32-bit integer argument to be added.\n * @param d The fourth 32-bit integer argument to be added.\n * @param e The fifth 32-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d` + `e`.\n */\nexport function safeAdd_32_5(a: number, b: number, c: number, d: number, e: number): number {\n  const lsw = (a & 0xffff) + (b & 0xffff) + (c & 0xffff) + (d & 0xffff) + (e & 0xffff),\n    msw = (a >>> 16) + (b >>> 16) + (c >>> 16) + (d >>> 16) + (e >>> 16) + (lsw >>> 16);\n\n  return ((msw & 0xffff) << 16) | (lsw & 0xffff);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Gamma1 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma1_32(x: number): number {\n  return rotr_32(x, 17) ^ rotr_32(x, 19) ^ shr_32(x, 10);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Gamma0 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma0_32(x: number): number {\n  return rotr_32(x, 7) ^ rotr_32(x, 18) ^ shr_32(x, 3);\n}\n\n/**\n * The 32-bit implementation of the NIST specified Sigma1 function.\n *\n * @param x The 32-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma1_32(x: number): number {\n  return rotr_32(x, 6) ^ rotr_32(x, 11) ^ rotr_32(x, 25);\n}\n", "import { jsSHABase, TWO_PWR_32, sha_variant_error, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport { ch_32, parity_32, maj_32, rotl_32, safeAdd_32_2, safeAdd_32_5 } from \"./primitives_32\";\n\n/**\n * Gets the state values for the specified SHA variant.\n *\n * @param _variant: Unused\n * @returns The initial state values.\n */\nfunction getNewState(_variant: \"SHA-1\"): number[] {\n  return [0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0];\n}\n\n/**\n * Performs a round of SHA-1 hashing over a 512-byte block.  This clobbers `H`.\n *\n * @param block The binary array representation of the block to hash.\n * @param H The intermediate H values from a previous round.\n * @returns The resulting H values.\n */\nfunction roundSHA1(block: number[], H: number[]): number[] {\n  let a, b, c, d, e, T, t;\n  const W: number[] = [];\n\n  a = H[0];\n  b = H[1];\n  c = H[2];\n  d = H[3];\n  e = H[4];\n\n  for (t = 0; t < 80; t += 1) {\n    if (t < 16) {\n      W[t] = block[t];\n    } else {\n      W[t] = rotl_32(W[t - 3] ^ W[t - 8] ^ W[t - 14] ^ W[t - 16], 1);\n    }\n\n    if (t < 20) {\n      T = safeAdd_32_5(rotl_32(a, 5), ch_32(b, c, d), e, 0x5a827999, W[t]);\n    } else if (t < 40) {\n      T = safeAdd_32_5(rotl_32(a, 5), parity_32(b, c, d), e, 0x6ed9eba1, W[t]);\n    } else if (t < 60) {\n      T = safeAdd_32_5(rotl_32(a, 5), maj_32(b, c, d), e, 0x8f1bbcdc, W[t]);\n    } else {\n      T = safeAdd_32_5(rotl_32(a, 5), parity_32(b, c, d), e, 0xca62c1d6, W[t]);\n    }\n\n    e = d;\n    d = c;\n    c = rotl_32(b, 30);\n    b = a;\n    a = T;\n  }\n\n  H[0] = safeAdd_32_2(a, H[0]);\n  H[1] = safeAdd_32_2(b, H[1]);\n  H[2] = safeAdd_32_2(c, H[2]);\n  H[3] = safeAdd_32_2(d, H[3]);\n  H[4] = safeAdd_32_2(e, H[4]);\n\n  return H;\n}\n\n/**\n * Finalizes the SHA-1 hash.  This clobbers `remainder` and `H`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param processedBinLen The number of bits already processed.\n * @param H The intermediate H values from a previous round.\n * @returns The array of integers representing the SHA-1 hash of message.\n */\nfunction finalizeSHA1(remainder: number[], remainderBinLen: number, processedBinLen: number, H: number[]): number[] {\n  let i;\n\n  /* The 65 addition is a hack but it works.  The correct number is\n\t\tactually 72 (64 + 8) but the below math fails if\n\t\tremainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,\n\t\t\"shorting\" the addition is OK. */\n  const offset = (((remainderBinLen + 65) >>> 9) << 4) + 15,\n    totalLen = remainderBinLen + processedBinLen;\n  while (remainder.length <= offset) {\n    remainder.push(0);\n  }\n  /* Append '1' at the end of the binary string */\n  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n\n  /* Append length of binary string in the position such that the new\n   * length is a multiple of 512.  Logic does not work for even multiples\n   * of 512 but there can never be even multiples of 512. JavaScript\n   * numbers are limited to 2^53 so it's \"safe\" to treat the totalLen as\n   * a 64-bit integer. */\n  remainder[offset] = totalLen & 0xffffffff;\n\n  /* Bitwise operators treat the operand as a 32-bit number so need to\n   * use hacky division and round to get access to upper 32-ish bits */\n  remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n  /* This will always be at least 1 full chunk */\n  for (i = 0; i < remainder.length; i += 16) {\n    H = roundSHA1(remainder.slice(i, i + 16), H);\n  }\n\n  return H;\n}\n\nexport default class jsSHA extends jsSHABase<number[], \"SHA-1\"> {\n  intermediateState: number[];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: number[]) => number[];\n  finalizeFunc: (remainder: number[], remainderBinLen: number, processedBinLen: number, H: number[]) => number[];\n  stateCloneFunc: (state: number[]) => number[];\n  newStateFunc: (variant: \"SHA-1\") => number[];\n  getMAC: () => number[];\n\n  constructor(variant: \"SHA-1\", inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(variant: \"SHA-1\", inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (\"SHA-1\" !== variant) {\n      throw new Error(sha_variant_error);\n    }\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    this.HMACSupported = true;\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.getMAC = this._getHMAC;\n    this.bigEndianMod = -1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA1;\n    this.stateCloneFunc = function (state: number[]): number[] {\n      return state.slice();\n    };\n    this.newStateFunc = getNewState;\n    this.finalizeFunc = finalizeSHA1;\n\n    this.intermediateState = getNewState(variant);\n    this.variantBlockSize = 512;\n    this.outputBinLen = 160;\n    this.isVariableLen = false;\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n}\n", "import { jsSHABase, TWO_PWR_32, H_full, H_trunc, K_sha2, sha_variant_error, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport {\n  ch_32,\n  gamma0_32,\n  gamma1_32,\n  maj_32,\n  safeAdd_32_2,\n  safeAdd_32_4,\n  safeAdd_32_5,\n  sigma0_32,\n  sigma1_32,\n} from \"./primitives_32\";\n\ntype VariantType = \"SHA-224\" | \"SHA-256\";\n\n/**\n * Gets the state values for the specified SHA variant.\n *\n * @param variant: The SHA-256 family variant.\n * @returns The initial state values.\n */\nfunction getNewState256(variant: VariantType): number[] {\n  let retVal;\n\n  if (\"SHA-224\" == variant) {\n    retVal = H_trunc.slice();\n  } else {\n    /* \"SHA-256\" */\n    retVal = H_full.slice();\n  }\n  return retVal;\n}\n\n/**\n * Performs a round of SHA-256 hashing over a block. This clobbers `H`.\n *\n * @param block The binary array representation of the block to hash.\n * @param H The intermediate H values from a previous round.\n * @returns The resulting H values.\n */\nfunction roundSHA256(block: number[], H: number[]): number[] {\n  let a, b, c, d, e, f, g, h, T1, T2, t;\n\n  const W: number[] = [];\n\n  a = H[0];\n  b = H[1];\n  c = H[2];\n  d = H[3];\n  e = H[4];\n  f = H[5];\n  g = H[6];\n  h = H[7];\n\n  for (t = 0; t < 64; t += 1) {\n    if (t < 16) {\n      W[t] = block[t];\n    } else {\n      W[t] = safeAdd_32_4(gamma1_32(W[t - 2]), W[t - 7], gamma0_32(W[t - 15]), W[t - 16]);\n    }\n    T1 = safeAdd_32_5(h, sigma1_32(e), ch_32(e, f, g), K_sha2[t], W[t]);\n    T2 = safeAdd_32_2(sigma0_32(a), maj_32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = safeAdd_32_2(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safeAdd_32_2(T1, T2);\n  }\n\n  H[0] = safeAdd_32_2(a, H[0]);\n  H[1] = safeAdd_32_2(b, H[1]);\n  H[2] = safeAdd_32_2(c, H[2]);\n  H[3] = safeAdd_32_2(d, H[3]);\n  H[4] = safeAdd_32_2(e, H[4]);\n  H[5] = safeAdd_32_2(f, H[5]);\n  H[6] = safeAdd_32_2(g, H[6]);\n  H[7] = safeAdd_32_2(h, H[7]);\n\n  return H;\n}\n\n/**\n * Finalizes the SHA-256 hash. This clobbers `remainder` and `H`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param processedBinLen The number of bits already processed.\n * @param H The intermediate H values from a previous round.\n * @param variant The desired SHA-256 variant.\n * @returns The array of integers representing the SHA-2 hash of message.\n */\nfunction finalizeSHA256(\n  remainder: number[],\n  remainderBinLen: number,\n  processedBinLen: number,\n  H: number[],\n  variant: VariantType\n): number[] {\n  let i, retVal;\n\n  /* The 65 addition is a hack but it works.  The correct number is\n    actually 72 (64 + 8) but the below math fails if\n    remainderBinLen + 72 % 512 = 0. Since remainderBinLen % 8 = 0,\n    \"shorting\" the addition is OK. */\n  const offset = (((remainderBinLen + 65) >>> 9) << 4) + 15,\n    binaryStringInc = 16,\n    totalLen = remainderBinLen + processedBinLen;\n\n  while (remainder.length <= offset) {\n    remainder.push(0);\n  }\n  /* Append '1' at the end of the binary string */\n  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n  /* Append length of binary string in the position such that the new\n   * length is correct. JavaScript numbers are limited to 2^53 so it's\n   * \"safe\" to treat the totalLen as a 64-bit integer. */\n\n  remainder[offset] = totalLen & 0xffffffff;\n  /* Bitwise operators treat the operand as a 32-bit number so need to\n   * use hacky division and round to get access to upper 32-ish bits */\n  remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n  /* This will always be at least 1 full chunk */\n  for (i = 0; i < remainder.length; i += binaryStringInc) {\n    H = roundSHA256(remainder.slice(i, i + binaryStringInc), H);\n  }\n\n  if (\"SHA-224\" === variant) {\n    retVal = [H[0], H[1], H[2], H[3], H[4], H[5], H[6]];\n  } else {\n    /* \"SHA-256 */\n    retVal = H;\n  }\n\n  return retVal;\n}\nexport default class jsSHA extends jsSHABase<number[], VariantType> {\n  intermediateState: number[];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: number[]) => number[];\n  finalizeFunc: (remainder: number[], remainderBinLen: number, processedBinLen: number, H: number[]) => number[];\n  stateCloneFunc: (state: number[]) => number[];\n  newStateFunc: (variant: VariantType) => number[];\n  getMAC: () => number[];\n\n  constructor(variant: VariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(variant: VariantType, inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (!(\"SHA-224\" === variant || \"SHA-256\" === variant)) {\n      throw new Error(sha_variant_error);\n    }\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.getMAC = this._getHMAC;\n    this.HMACSupported = true;\n    this.bigEndianMod = -1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA256;\n    this.stateCloneFunc = function (state): number[] {\n      return state.slice();\n    };\n\n    this.newStateFunc = getNewState256;\n    this.finalizeFunc = function (remainder, remainderBinLen, processedBinLen, H): number[] {\n      return finalizeSHA256(remainder, remainderBinLen, processedBinLen, H, variant);\n    };\n\n    this.intermediateState = getNewState256(variant);\n    this.variantBlockSize = 512;\n    this.outputBinLen = \"SHA-224\" === variant ? 224 : 256;\n    this.isVariableLen = false;\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n}\n", "/*\n * Note 1: All the functions in this file guarantee only that the bottom 32-bits of the returned Int_64 are correct.\n * JavaScript is flakey when it comes to bit operations and a '1' in the highest order bit of a 32-bit number causes\n * it to be interpreted as a negative number per two's complement.\n *\n * Note 2: Per the ECMAScript spec, all JavaScript operations mask the shift amount by 0x1F.  This results in weird\n * cases like 1 << 32 == 1 and 1 << 33 === 1 << 1 === 2\n */\n\n/**\n * Int_64 is a object for 2 32-bit numbers emulating a 64-bit number.\n */\nexport class Int_64 {\n  /**\n   * @param msint_32 The most significant 32-bits of a 64-bit number.\n   * @param lsint_32 The least significant 32-bits of a 64-bit number.\n   */\n  readonly highOrder: number;\n  readonly lowOrder: number;\n  constructor(msint_32: number, lsint_32: number) {\n    this.highOrder = msint_32;\n    this.lowOrder = lsint_32;\n  }\n}\n\n/**\n * The 64-bit implementation of circular rotate left.\n *\n * This does not work for n >= 64 or n == 32 but those are never done.\n *\n * @param x The 64-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted left circularly by `n` bits.\n */\nexport function rotl_64(x: Int_64, n: number): Int_64 {\n  let tmp;\n  if (n > 32) {\n    tmp = 64 - n;\n    return new Int_64((x.lowOrder << n) | (x.highOrder >>> tmp), (x.highOrder << n) | (x.lowOrder >>> tmp));\n  } else if (0 !== n) {\n    tmp = 32 - n;\n    return new Int_64((x.highOrder << n) | (x.lowOrder >>> tmp), (x.lowOrder << n) | (x.highOrder >>> tmp));\n  } else {\n    return x;\n  }\n}\n\n/**\n * The 64-bit implementation of circular rotate right.\n *\n * This does not work for n >= 64, n == 32, or n == 0 but those are never done.\n *\n * @param x The 64-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted right circularly by `n` bits.\n */\nfunction rotr_64(x: Int_64, n: number): Int_64 {\n  let tmp;\n  if (n < 32) {\n    tmp = 32 - n;\n    return new Int_64((x.highOrder >>> n) | (x.lowOrder << tmp), (x.lowOrder >>> n) | (x.highOrder << tmp));\n  } else {\n    tmp = 64 - n;\n    return new Int_64((x.lowOrder >>> n) | (x.highOrder << tmp), (x.highOrder >>> n) | (x.lowOrder << tmp));\n  }\n}\n\n/**\n * The 64-bit implementation of shift right.\n *\n * This does not work for n >= 32 but is only called for n < 32.\n *\n * @param x The 64-bit integer argument.\n * @param n The number of bits to shift.\n * @returns `x` shifted right by `n` bits\n */\nfunction shr_64(x: Int_64, n: number): Int_64 {\n  return new Int_64(x.highOrder >>> n, (x.lowOrder >>> n) | (x.highOrder << (32 - n)));\n}\n\n/**\n * The 64-bit implementation of the NIST specified Ch function.\n *\n * @param x The first 64-bit integer argument.\n * @param y The second 64-bit integer argument.\n * @param z The third 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function ch_64(x: Int_64, y: Int_64, z: Int_64): Int_64 {\n  return new Int_64(\n    (x.highOrder & y.highOrder) ^ (~x.highOrder & z.highOrder),\n    (x.lowOrder & y.lowOrder) ^ (~x.lowOrder & z.lowOrder)\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Maj function.\n *\n * @param x The first 64-bit integer argument.\n * @param y The second 64-bit integer argument.\n * @param z The third 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function maj_64(x: Int_64, y: Int_64, z: Int_64): Int_64 {\n  return new Int_64(\n    (x.highOrder & y.highOrder) ^ (x.highOrder & z.highOrder) ^ (y.highOrder & z.highOrder),\n    (x.lowOrder & y.lowOrder) ^ (x.lowOrder & z.lowOrder) ^ (y.lowOrder & z.lowOrder)\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Sigma0 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma0_64(x: Int_64): Int_64 {\n  const rotr28 = rotr_64(x, 28),\n    rotr34 = rotr_64(x, 34),\n    rotr39 = rotr_64(x, 39);\n\n  return new Int_64(\n    rotr28.highOrder ^ rotr34.highOrder ^ rotr39.highOrder,\n    rotr28.lowOrder ^ rotr34.lowOrder ^ rotr39.lowOrder\n  );\n}\n\n/**\n * Add two 64-bit integers.\n *\n * @param x The first 64-bit integer argument to be added.\n * @param y The second 64-bit integer argument to be added.\n * @returns The sum of `x` + `y`.\n */\nexport function safeAdd_64_2(x: Int_64, y: Int_64): Int_64 {\n  let lsw, msw;\n\n  lsw = (x.lowOrder & 0xffff) + (y.lowOrder & 0xffff);\n  msw = (x.lowOrder >>> 16) + (y.lowOrder >>> 16) + (lsw >>> 16);\n  const lowOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  lsw = (x.highOrder & 0xffff) + (y.highOrder & 0xffff) + (msw >>> 16);\n  msw = (x.highOrder >>> 16) + (y.highOrder >>> 16) + (lsw >>> 16);\n  const highOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * Add four 64-bit integers.\n *\n * @param a The first 64-bit integer argument to be added.\n * @param b The second 64-bit integer argument to be added.\n * @param c The third 64-bit integer argument to be added.\n * @param d The fouth 64-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d`.\n */\nexport function safeAdd_64_4(a: Int_64, b: Int_64, c: Int_64, d: Int_64): Int_64 {\n  let lsw, msw;\n\n  lsw = (a.lowOrder & 0xffff) + (b.lowOrder & 0xffff) + (c.lowOrder & 0xffff) + (d.lowOrder & 0xffff);\n  msw = (a.lowOrder >>> 16) + (b.lowOrder >>> 16) + (c.lowOrder >>> 16) + (d.lowOrder >>> 16) + (lsw >>> 16);\n  const lowOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  lsw =\n    (a.highOrder & 0xffff) + (b.highOrder & 0xffff) + (c.highOrder & 0xffff) + (d.highOrder & 0xffff) + (msw >>> 16);\n  msw = (a.highOrder >>> 16) + (b.highOrder >>> 16) + (c.highOrder >>> 16) + (d.highOrder >>> 16) + (lsw >>> 16);\n  const highOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * Add five 64-bit integers.\n *\n * @param a The first 64-bit integer argument to be added.\n * @param b The second 64-bit integer argument to be added.\n * @param c The third 64-bit integer argument to be added.\n * @param d The fouth 64-bit integer argument to be added.\n * @param e The fifth 64-bit integer argument to be added.\n * @returns The sum of `a` + `b` + `c` + `d` + `e`.\n */\nexport function safeAdd_64_5(a: Int_64, b: Int_64, c: Int_64, d: Int_64, e: Int_64): Int_64 {\n  let lsw, msw;\n\n  lsw =\n    (a.lowOrder & 0xffff) +\n    (b.lowOrder & 0xffff) +\n    (c.lowOrder & 0xffff) +\n    (d.lowOrder & 0xffff) +\n    (e.lowOrder & 0xffff);\n  msw =\n    (a.lowOrder >>> 16) +\n    (b.lowOrder >>> 16) +\n    (c.lowOrder >>> 16) +\n    (d.lowOrder >>> 16) +\n    (e.lowOrder >>> 16) +\n    (lsw >>> 16);\n  const lowOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  lsw =\n    (a.highOrder & 0xffff) +\n    (b.highOrder & 0xffff) +\n    (c.highOrder & 0xffff) +\n    (d.highOrder & 0xffff) +\n    (e.highOrder & 0xffff) +\n    (msw >>> 16);\n  msw =\n    (a.highOrder >>> 16) +\n    (b.highOrder >>> 16) +\n    (c.highOrder >>> 16) +\n    (d.highOrder >>> 16) +\n    (e.highOrder >>> 16) +\n    (lsw >>> 16);\n  const highOrder = ((msw & 0xffff) << 16) | (lsw & 0xffff);\n\n  return new Int_64(highOrder, lowOrder);\n}\n\n/**\n * XORs two given arguments.\n *\n * @param a The first argument to be XORed.\n * @param b The second argument to be XORed.\n * @returns The The XOR `a` and `b`\n */\nexport function xor_64_2(a: Int_64, b: Int_64): Int_64 {\n  return new Int_64(a.highOrder ^ b.highOrder, a.lowOrder ^ b.lowOrder);\n}\n\n/**\n * XORs five given arguments.\n *\n * @param a The first argument to be XORed.\n * @param b The second argument to be XORed.\n * @param c The third argument to be XORed.\n * @param d The fourth argument to be XORed.\n * @param e The fifth argument to be XORed.\n * @returns The XOR of `a`, `b`, `c`, `d`, and `e`.\n */\nexport function xor_64_5(a: Int_64, b: Int_64, c: Int_64, d: Int_64, e: Int_64): Int_64 {\n  return new Int_64(\n    a.highOrder ^ b.highOrder ^ c.highOrder ^ d.highOrder ^ e.highOrder,\n    a.lowOrder ^ b.lowOrder ^ c.lowOrder ^ d.lowOrder ^ e.lowOrder\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Gamma1 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma1_64(x: Int_64): Int_64 {\n  const rotr19 = rotr_64(x, 19),\n    rotr61 = rotr_64(x, 61),\n    shr6 = shr_64(x, 6);\n\n  return new Int_64(\n    rotr19.highOrder ^ rotr61.highOrder ^ shr6.highOrder,\n    rotr19.lowOrder ^ rotr61.lowOrder ^ shr6.lowOrder\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Gamma0 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function gamma0_64(x: Int_64): Int_64 {\n  const rotr1 = rotr_64(x, 1),\n    rotr8 = rotr_64(x, 8),\n    shr7 = shr_64(x, 7);\n\n  return new Int_64(\n    rotr1.highOrder ^ rotr8.highOrder ^ shr7.highOrder,\n    rotr1.lowOrder ^ rotr8.lowOrder ^ shr7.lowOrder\n  );\n}\n\n/**\n * The 64-bit implementation of the NIST specified Sigma1 function.\n *\n * @param x The 64-bit integer argument.\n * @returns The NIST specified output of the function.\n */\nexport function sigma1_64(x: Int_64): Int_64 {\n  const rotr14 = rotr_64(x, 14),\n    rotr18 = rotr_64(x, 18),\n    rotr41 = rotr_64(x, 41);\n\n  return new Int_64(\n    rotr14.highOrder ^ rotr18.highOrder ^ rotr41.highOrder,\n    rotr14.lowOrder ^ rotr18.lowOrder ^ rotr41.lowOrder\n  );\n}\n", "import { jsSHABase, TWO_PWR_32, H_trunc, H_full, K_sha2, sha_variant_error, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport {\n  ch_64,\n  gamma0_64,\n  gamma1_64,\n  Int_64,\n  maj_64,\n  safeAdd_64_2,\n  safeAdd_64_4,\n  safeAdd_64_5,\n  sigma0_64,\n  sigma1_64,\n} from \"./primitives_64\";\n\ntype VariantType = \"SHA-384\" | \"SHA-512\";\n\nconst K_sha512 = [\n  new Int_64(K_sha2[0], 0xd728ae22),\n  new Int_64(K_sha2[1], 0x23ef65cd),\n  new Int_64(K_sha2[2], 0xec4d3b2f),\n  new Int_64(K_sha2[3], 0x8189dbbc),\n  new Int_64(K_sha2[4], 0xf348b538),\n  new Int_64(K_sha2[5], 0xb605d019),\n  new Int_64(K_sha2[6], 0xaf194f9b),\n  new Int_64(K_sha2[7], 0xda6d8118),\n  new Int_64(K_sha2[8], 0xa3030242),\n  new Int_64(K_sha2[9], 0x45706fbe),\n  new Int_64(K_sha2[10], 0x4ee4b28c),\n  new Int_64(K_sha2[11], 0xd5ffb4e2),\n  new Int_64(K_sha2[12], 0xf27b896f),\n  new Int_64(K_sha2[13], 0x3b1696b1),\n  new Int_64(K_sha2[14], 0x25c71235),\n  new Int_64(K_sha2[15], 0xcf692694),\n  new Int_64(K_sha2[16], 0x9ef14ad2),\n  new Int_64(K_sha2[17], 0x384f25e3),\n  new Int_64(K_sha2[18], 0x8b8cd5b5),\n  new Int_64(K_sha2[19], 0x77ac9c65),\n  new Int_64(K_sha2[20], 0x592b0275),\n  new Int_64(K_sha2[21], 0x6ea6e483),\n  new Int_64(K_sha2[22], 0xbd41fbd4),\n  new Int_64(K_sha2[23], 0x831153b5),\n  new Int_64(K_sha2[24], 0xee66dfab),\n  new Int_64(K_sha2[25], 0x2db43210),\n  new Int_64(K_sha2[26], 0x98fb213f),\n  new Int_64(K_sha2[27], 0xbeef0ee4),\n  new Int_64(K_sha2[28], 0x3da88fc2),\n  new Int_64(K_sha2[29], 0x930aa725),\n  new Int_64(K_sha2[30], 0xe003826f),\n  new Int_64(K_sha2[31], 0x0a0e6e70),\n  new Int_64(K_sha2[32], 0x46d22ffc),\n  new Int_64(K_sha2[33], 0x5c26c926),\n  new Int_64(K_sha2[34], 0x5ac42aed),\n  new Int_64(K_sha2[35], 0x9d95b3df),\n  new Int_64(K_sha2[36], 0x8baf63de),\n  new Int_64(K_sha2[37], 0x3c77b2a8),\n  new Int_64(K_sha2[38], 0x47edaee6),\n  new Int_64(K_sha2[39], 0x1482353b),\n  new Int_64(K_sha2[40], 0x4cf10364),\n  new Int_64(K_sha2[41], 0xbc423001),\n  new Int_64(K_sha2[42], 0xd0f89791),\n  new Int_64(K_sha2[43], 0x0654be30),\n  new Int_64(K_sha2[44], 0xd6ef5218),\n  new Int_64(K_sha2[45], 0x5565a910),\n  new Int_64(K_sha2[46], 0x5771202a),\n  new Int_64(K_sha2[47], 0x32bbd1b8),\n  new Int_64(K_sha2[48], 0xb8d2d0c8),\n  new Int_64(K_sha2[49], 0x5141ab53),\n  new Int_64(K_sha2[50], 0xdf8eeb99),\n  new Int_64(K_sha2[51], 0xe19b48a8),\n  new Int_64(K_sha2[52], 0xc5c95a63),\n  new Int_64(K_sha2[53], 0xe3418acb),\n  new Int_64(K_sha2[54], 0x7763e373),\n  new Int_64(K_sha2[55], 0xd6b2b8a3),\n  new Int_64(K_sha2[56], 0x5defb2fc),\n  new Int_64(K_sha2[57], 0x43172f60),\n  new Int_64(K_sha2[58], 0xa1f0ab72),\n  new Int_64(K_sha2[59], 0x1a6439ec),\n  new Int_64(K_sha2[60], 0x23631e28),\n  new Int_64(K_sha2[61], 0xde82bde9),\n  new Int_64(K_sha2[62], 0xb2c67915),\n  new Int_64(K_sha2[63], 0xe372532b),\n  new Int_64(0xca273ece, 0xea26619c),\n  new Int_64(0xd186b8c7, 0x21c0c207),\n  new Int_64(0xeada7dd6, 0xcde0eb1e),\n  new Int_64(0xf57d4f7f, 0xee6ed178),\n  new Int_64(0x06f067aa, 0x72176fba),\n  new Int_64(0x0a637dc5, 0xa2c898a6),\n  new Int_64(0x113f9804, 0xbef90dae),\n  new Int_64(0x1b710b35, 0x131c471b),\n  new Int_64(0x28db77f5, 0x23047d84),\n  new Int_64(0x32caab7b, 0x40c72493),\n  new Int_64(0x3c9ebe0a, 0x15c9bebc),\n  new Int_64(0x431d67c4, 0x9c100d4c),\n  new Int_64(0x4cc5d4be, 0xcb3e42b6),\n  new Int_64(0x597f299c, 0xfc657e2a),\n  new Int_64(0x5fcb6fab, 0x3ad6faec),\n  new Int_64(0x6c44198c, 0x4a475817),\n];\n\n/**\n * Gets the state values for the specified SHA variant.\n *\n * @param variant: The SHA-512 family variant.\n * @returns The initial state values.\n */\nfunction getNewState512(variant: VariantType): Int_64[] {\n  if (\"SHA-384\" === variant) {\n    return [\n      new Int_64(0xcbbb9d5d, H_trunc[0]),\n      new Int_64(0x0629a292a, H_trunc[1]),\n      new Int_64(0x9159015a, H_trunc[2]),\n      new Int_64(0x0152fecd8, H_trunc[3]),\n      new Int_64(0x67332667, H_trunc[4]),\n      new Int_64(0x98eb44a87, H_trunc[5]),\n      new Int_64(0xdb0c2e0d, H_trunc[6]),\n      new Int_64(0x047b5481d, H_trunc[7]),\n    ];\n  } else {\n    /* SHA-512 */\n    return [\n      new Int_64(H_full[0], 0xf3bcc908),\n      new Int_64(H_full[1], 0x84caa73b),\n      new Int_64(H_full[2], 0xfe94f82b),\n      new Int_64(H_full[3], 0x5f1d36f1),\n      new Int_64(H_full[4], 0xade682d1),\n      new Int_64(H_full[5], 0x2b3e6c1f),\n      new Int_64(H_full[6], 0xfb41bd6b),\n      new Int_64(H_full[7], 0x137e2179),\n    ];\n  }\n}\n\n/**\n * Performs a round of SHA-512 hashing over a block. This clobbers `H`.\n *\n * @param block The binary array representation of the block to hash.\n * @param H The intermediate H values from a previous round.\n * @returns The resulting H values.\n */\nfunction roundSHA512(block: number[], H: Int_64[]): Int_64[] {\n  let a, b, c, d, e, f, g, h, T1, T2, t, offset;\n\n  const W: Int_64[] = [];\n\n  a = H[0];\n  b = H[1];\n  c = H[2];\n  d = H[3];\n  e = H[4];\n  f = H[5];\n  g = H[6];\n  h = H[7];\n\n  for (t = 0; t < 80; t += 1) {\n    if (t < 16) {\n      offset = t * 2;\n      W[t] = new Int_64(block[offset], block[offset + 1]);\n    } else {\n      W[t] = safeAdd_64_4(gamma1_64(W[t - 2]), W[t - 7], gamma0_64(W[t - 15]), W[t - 16]);\n    }\n    T1 = safeAdd_64_5(h, sigma1_64(e), ch_64(e, f, g), K_sha512[t], W[t]);\n    T2 = safeAdd_64_2(sigma0_64(a), maj_64(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = safeAdd_64_2(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = safeAdd_64_2(T1, T2);\n  }\n\n  H[0] = safeAdd_64_2(a, H[0]);\n  H[1] = safeAdd_64_2(b, H[1]);\n  H[2] = safeAdd_64_2(c, H[2]);\n  H[3] = safeAdd_64_2(d, H[3]);\n  H[4] = safeAdd_64_2(e, H[4]);\n  H[5] = safeAdd_64_2(f, H[5]);\n  H[6] = safeAdd_64_2(g, H[6]);\n  H[7] = safeAdd_64_2(h, H[7]);\n\n  return H;\n}\n\n/**\n * Finalizes the SHA-512 hash. This clobbers `remainder` and `H`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param processedBinLen The number of bits already processed.\n * @param H The intermediate H values from a previous round.\n * @param variant The desired SHA-512 variant.\n * @returns The array of integers representing the SHA-512 hash of message.\n */\nfunction finalizeSHA512(\n  remainder: number[],\n  remainderBinLen: number,\n  processedBinLen: number,\n  H: Int_64[],\n  variant: VariantType\n): number[] {\n  let i, retVal;\n\n  /* The 129 addition is a hack but it works.  The correct number is\n    actually 136 (128 + 8) but the below math fails if\n    remainderBinLen + 136 % 1024 = 0. Since remainderBinLen % 8 = 0,\n    \"shorting\" the addition is OK. */\n  const offset = (((remainderBinLen + 129) >>> 10) << 5) + 31,\n    binaryStringInc = 32,\n    totalLen = remainderBinLen + processedBinLen;\n\n  while (remainder.length <= offset) {\n    remainder.push(0);\n  }\n  /* Append '1' at the end of the binary string */\n  remainder[remainderBinLen >>> 5] |= 0x80 << (24 - (remainderBinLen % 32));\n  /* Append length of binary string in the position such that the new\n   * length is correct. JavaScript numbers are limited to 2^53 so it's\n   * \"safe\" to treat the totalLen as a 64-bit integer. */\n\n  remainder[offset] = totalLen & 0xffffffff;\n  /* Bitwise operators treat the operand as a 32-bit number so need to\n   * use hacky division and round to get access to upper 32-ish bits */\n  remainder[offset - 1] = (totalLen / TWO_PWR_32) | 0;\n\n  /* This will always be at least 1 full chunk */\n  for (i = 0; i < remainder.length; i += binaryStringInc) {\n    H = roundSHA512(remainder.slice(i, i + binaryStringInc), H);\n  }\n\n  if (\"SHA-384\" === variant) {\n    H = (H as unknown) as Int_64[];\n    retVal = [\n      H[0].highOrder,\n      H[0].lowOrder,\n      H[1].highOrder,\n      H[1].lowOrder,\n      H[2].highOrder,\n      H[2].lowOrder,\n      H[3].highOrder,\n      H[3].lowOrder,\n      H[4].highOrder,\n      H[4].lowOrder,\n      H[5].highOrder,\n      H[5].lowOrder,\n    ];\n  } else {\n    /* SHA-512 */\n    retVal = [\n      H[0].highOrder,\n      H[0].lowOrder,\n      H[1].highOrder,\n      H[1].lowOrder,\n      H[2].highOrder,\n      H[2].lowOrder,\n      H[3].highOrder,\n      H[3].lowOrder,\n      H[4].highOrder,\n      H[4].lowOrder,\n      H[5].highOrder,\n      H[5].lowOrder,\n      H[6].highOrder,\n      H[6].lowOrder,\n      H[7].highOrder,\n      H[7].lowOrder,\n    ];\n  }\n  return retVal;\n}\n\nexport default class jsSHA extends jsSHABase<Int_64[], VariantType> {\n  intermediateState: Int_64[];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: Int_64[]) => Int_64[];\n  finalizeFunc: (remainder: number[], remainderBinLen: number, processedBinLen: number, H: Int_64[]) => number[];\n  stateCloneFunc: (state: Int_64[]) => Int_64[];\n  newStateFunc: (variant: VariantType) => Int_64[];\n  getMAC: () => number[];\n\n  constructor(variant: VariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(variant: VariantType, inputFormat: FormatNoTextType, options?: FixedLengthOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (!(\"SHA-384\" === variant || \"SHA-512\" === variant)) {\n      throw new Error(sha_variant_error);\n    }\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    this.getMAC = this._getHMAC;\n    this.HMACSupported = true;\n    this.bigEndianMod = -1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA512;\n    this.stateCloneFunc = function (state): Int_64[] {\n      return state.slice();\n    };\n    this.newStateFunc = getNewState512;\n    this.finalizeFunc = function (remainder, remainderBinLen, processedBinLen, H): number[] {\n      return finalizeSHA512(remainder, remainderBinLen, processedBinLen, H, variant);\n    };\n\n    this.intermediateState = getNewState512(variant);\n    this.variantBlockSize = 1024;\n    this.outputBinLen = \"SHA-384\" === variant ? 384 : 512;\n    this.isVariableLen = false;\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n}\n", "import { jsSHABase, packedLEConcat, sha_variant_error, mac_rounds_error, TWO_PWR_32, parseInputOption } from \"./common\";\nimport {\n  packedValue,\n  CSHAKEOptionsNoEncodingType,\n  CSHAKEOptionsEncodingType,\n  SHAKEOptionsNoEncodingType,\n  SHAKEOptionsEncodingType,\n  KMACOptionsNoEncodingType,\n  KMACOptionsEncodingType,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n  ResolvedCSHAKEOptionsNoEncodingType,\n  ResolvedKMACOptionsNoEncodingType,\n} from \"./custom_types\";\nimport { getStrConverter } from \"./converters\";\nimport { Int_64, rotl_64, xor_64_2, xor_64_5 } from \"./primitives_64\";\n\ntype FixedLengthVariantType = \"SHA3-224\" | \"SHA3-256\" | \"SHA3-384\" | \"SHA3-512\" | \"SHAKE128\" | \"SHAKE256\";\n\ntype VariantType = FixedLengthVariantType | \"SHAKE128\" | \"SHAKE256\" | \"CSHAKE128\" | \"CSHAKE256\" | \"KMAC128\" | \"KMAC256\";\n\nconst rc_sha3 = [\n  new Int_64(0x00000000, 0x00000001),\n  new Int_64(0x00000000, 0x00008082),\n  new Int_64(0x80000000, 0x0000808a),\n  new Int_64(0x80000000, 0x80008000),\n  new Int_64(0x00000000, 0x0000808b),\n  new Int_64(0x00000000, 0x80000001),\n  new Int_64(0x80000000, 0x80008081),\n  new Int_64(0x80000000, 0x00008009),\n  new Int_64(0x00000000, 0x0000008a),\n  new Int_64(0x00000000, 0x00000088),\n  new Int_64(0x00000000, 0x80008009),\n  new Int_64(0x00000000, 0x8000000a),\n  new Int_64(0x00000000, 0x8000808b),\n  new Int_64(0x80000000, 0x0000008b),\n  new Int_64(0x80000000, 0x00008089),\n  new Int_64(0x80000000, 0x00008003),\n  new Int_64(0x80000000, 0x00008002),\n  new Int_64(0x80000000, 0x00000080),\n  new Int_64(0x00000000, 0x0000800a),\n  new Int_64(0x80000000, 0x8000000a),\n  new Int_64(0x80000000, 0x80008081),\n  new Int_64(0x80000000, 0x00008080),\n  new Int_64(0x00000000, 0x80000001),\n  new Int_64(0x80000000, 0x80008008),\n];\n\nconst r_sha3 = [\n  [0, 36, 3, 41, 18],\n  [1, 44, 10, 45, 2],\n  [62, 6, 43, 15, 61],\n  [28, 55, 25, 21, 56],\n  [27, 20, 39, 8, 14],\n];\n\n/**\n * Gets the state values for the specified SHA-3 variant.\n *\n * @param _variant Unused for this family.\n * @returns The initial state values.\n */\nfunction getNewState(_variant: VariantType): Int_64[][] {\n  let i;\n  const retVal = [];\n\n  for (i = 0; i < 5; i += 1) {\n    retVal[i] = [new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0), new Int_64(0, 0)];\n  }\n\n  return retVal;\n}\n\n/**\n * Returns a clone of the given SHA3 state.\n *\n * @param state The state to be cloned.\n * @returns The cloned state.\n */\nfunction cloneSHA3State(state: Int_64[][]): Int_64[][] {\n  let i;\n  const clone = [];\n  for (i = 0; i < 5; i += 1) {\n    clone[i] = state[i].slice();\n  }\n\n  return clone;\n}\n\n/**\n * Performs a round of SHA-3 hashing over a block. This clobbers `state`.\n *\n * @param block The binary array representation of the block to hash.\n * @param state Hash state from a previous round.\n * @returns The resulting state value.\n */\nfunction roundSHA3(block: number[] | null, state: Int_64[][]): Int_64[][] {\n  let round, x, y, B;\n  const C = [],\n    D = [];\n\n  if (null !== block) {\n    for (x = 0; x < block.length; x += 2) {\n      state[(x >>> 1) % 5][((x >>> 1) / 5) | 0] = xor_64_2(\n        state[(x >>> 1) % 5][((x >>> 1) / 5) | 0],\n        new Int_64(block[x + 1], block[x])\n      );\n    }\n  }\n\n  for (round = 0; round < 24; round += 1) {\n    /* Any SHA-3 variant name will do here */\n    B = getNewState(\"SHA3-384\");\n\n    /* Perform theta step */\n    for (x = 0; x < 5; x += 1) {\n      C[x] = xor_64_5(state[x][0], state[x][1], state[x][2], state[x][3], state[x][4]);\n    }\n    for (x = 0; x < 5; x += 1) {\n      D[x] = xor_64_2(C[(x + 4) % 5], rotl_64(C[(x + 1) % 5], 1));\n    }\n    for (x = 0; x < 5; x += 1) {\n      for (y = 0; y < 5; y += 1) {\n        state[x][y] = xor_64_2(state[x][y], D[x]);\n      }\n    }\n\n    /* Perform combined ro and pi steps */\n    for (x = 0; x < 5; x += 1) {\n      for (y = 0; y < 5; y += 1) {\n        B[y][(2 * x + 3 * y) % 5] = rotl_64(state[x][y], r_sha3[x][y]);\n      }\n    }\n\n    /* Perform chi step */\n    for (x = 0; x < 5; x += 1) {\n      for (y = 0; y < 5; y += 1) {\n        state[x][y] = xor_64_2(\n          B[x][y],\n          new Int_64(\n            ~B[(x + 1) % 5][y].highOrder & B[(x + 2) % 5][y].highOrder,\n            ~B[(x + 1) % 5][y].lowOrder & B[(x + 2) % 5][y].lowOrder\n          )\n        );\n      }\n    }\n\n    /* Perform iota step */\n    state[0][0] = xor_64_2(state[0][0], rc_sha3[round]);\n  }\n\n  return state;\n}\n\n/**\n * Finalizes the SHA-3 hash. This clobbers `remainder` and `state`.\n *\n * @param remainder Any leftover unprocessed packed ints that still need to be processed.\n * @param remainderBinLen The number of bits in `remainder`.\n * @param _processedBinLen Unused for this family.\n * @param state The state from a previous round.\n * @param blockSize The block size/rate of the variant in bits\n * @param delimiter The delimiter value for the variant\n * @param outputLen The output length for the variant in bits\n * @returns The array of integers representing the SHA-3 hash of message.\n */\nfunction finalizeSHA3(\n  remainder: number[],\n  remainderBinLen: number,\n  _processedBinLen: number,\n  state: Int_64[][],\n  blockSize: number,\n  delimiter: number,\n  outputLen: number\n): number[] {\n  let i,\n    state_offset = 0,\n    temp;\n  const retVal = [],\n    binaryStringInc = blockSize >>> 5,\n    remainderIntLen = remainderBinLen >>> 5;\n\n  /* Process as many blocks as possible, some may be here for multiple rounds\n\t\twith SHAKE\n\t*/\n  for (i = 0; i < remainderIntLen && remainderBinLen >= blockSize; i += binaryStringInc) {\n    state = roundSHA3(remainder.slice(i, i + binaryStringInc), state);\n    remainderBinLen -= blockSize;\n  }\n\n  remainder = remainder.slice(i);\n  remainderBinLen = remainderBinLen % blockSize;\n\n  /* Pad out the remainder to a full block */\n  while (remainder.length < binaryStringInc) {\n    remainder.push(0);\n  }\n\n  /* Find the next \"empty\" byte for the 0x80 and append it via an xor */\n  i = remainderBinLen >>> 3;\n  remainder[i >> 2] ^= delimiter << (8 * (i % 4));\n\n  remainder[binaryStringInc - 1] ^= 0x80000000;\n  state = roundSHA3(remainder, state);\n\n  while (retVal.length * 32 < outputLen) {\n    temp = state[state_offset % 5][(state_offset / 5) | 0];\n    retVal.push(temp.lowOrder);\n    if (retVal.length * 32 >= outputLen) {\n      break;\n    }\n    retVal.push(temp.highOrder);\n    state_offset += 1;\n\n    if (0 === (state_offset * 64) % blockSize) {\n      roundSHA3(null, state);\n      state_offset = 0;\n    }\n  }\n\n  return retVal;\n}\n\n/**\n * Performs NIST left_encode function returned with no extra garbage bits. `x` is limited to <= 9007199254740991.\n *\n * @param x 32-bit number to to encode.\n * @returns The NIST specified output of the function.\n */\nfunction left_encode(x: number): packedValue {\n  let byteOffset,\n    byte,\n    numEncodedBytes = 0;\n  /* JavaScript numbers max out at 0x1FFFFFFFFFFFFF (7 bytes) so this will return a maximum of 7 + 1 = 8 bytes */\n  const retVal = [0, 0],\n    x_64 = [x & 0xffffffff, (x / TWO_PWR_32) & 0x1fffff];\n\n  for (byteOffset = 6; byteOffset >= 0; byteOffset--) {\n    /* This will surprisingly work for large shifts because JavaScript masks the shift amount by 0x1F */\n    byte = (x_64[byteOffset >> 2] >>> (8 * byteOffset)) & 0xff;\n\n    /* Starting from the most significant byte of a 64-bit number, start recording the first non-0 byte and then\n       every byte thereafter */\n    if (byte !== 0 || numEncodedBytes !== 0) {\n      retVal[(numEncodedBytes + 1) >> 2] |= byte << ((numEncodedBytes + 1) * 8);\n      numEncodedBytes += 1;\n    }\n  }\n  numEncodedBytes = numEncodedBytes !== 0 ? numEncodedBytes : 1;\n  retVal[0] |= numEncodedBytes;\n\n  return { value: numEncodedBytes + 1 > 4 ? retVal : [retVal[0]], binLen: 8 + numEncodedBytes * 8 };\n}\n\n/**\n * Performs NIST right_encode function returned with no extra garbage bits. `x` is limited to <= 9007199254740991.\n *\n * @param x 32-bit number to to encode.\n * @returns The NIST specified output of the function.\n */\nfunction right_encode(x: number): packedValue {\n  let byteOffset,\n    byte,\n    numEncodedBytes = 0;\n  /* JavaScript numbers max out at 0x1FFFFFFFFFFFFF (7 bytes) so this will return a maximum of 7 + 1 = 8 bytes */\n  const retVal = [0, 0],\n    x_64 = [x & 0xffffffff, (x / TWO_PWR_32) & 0x1fffff];\n\n  for (byteOffset = 6; byteOffset >= 0; byteOffset--) {\n    /* This will surprisingly work for large shifts because JavaScript masks the shift amount by 0x1F */\n    byte = (x_64[byteOffset >> 2] >>> (8 * byteOffset)) & 0xff;\n\n    /* Starting from the most significant byte of a 64-bit number, start recording the first non-0 byte and then\n       every byte thereafter */\n    if (byte !== 0 || numEncodedBytes !== 0) {\n      retVal[numEncodedBytes >> 2] |= byte << (numEncodedBytes * 8);\n      numEncodedBytes += 1;\n    }\n  }\n  numEncodedBytes = numEncodedBytes !== 0 ? numEncodedBytes : 1;\n  retVal[numEncodedBytes >> 2] |= numEncodedBytes << (numEncodedBytes * 8);\n\n  return { value: numEncodedBytes + 1 > 4 ? retVal : [retVal[0]], binLen: 8 + numEncodedBytes * 8 };\n}\n\n/**\n * Performs NIST encode_string function.\n *\n * @param input Packed array of integers.\n * @returns NIST encode_string output.\n */\nfunction encode_string(input: packedValue): packedValue {\n  return packedLEConcat(left_encode(input[\"binLen\"]), input);\n}\n\n/**\n * Performs NIST byte_pad function.\n *\n * @param packed Packed array of integers.\n * @param outputByteLen Desired length of the output in bytes, assumed to be a multiple of 4.\n * @returns NIST byte_pad output.\n */\nfunction byte_pad(packed: packedValue, outputByteLen: number): number[] {\n  let encodedLen = left_encode(outputByteLen),\n    i;\n\n  encodedLen = packedLEConcat(encodedLen, packed);\n  const outputIntLen = outputByteLen >>> 2,\n    intsToAppend = (outputIntLen - (encodedLen[\"value\"].length % outputIntLen)) % outputIntLen;\n\n  for (i = 0; i < intsToAppend; i++) {\n    encodedLen[\"value\"].push(0);\n  }\n\n  return encodedLen[\"value\"];\n}\n\n/**\n * Parses/validate constructor options for a CSHAKE variant\n *\n * @param options Option given to constructor\n */\nfunction resolveCSHAKEOptions(options: CSHAKEOptionsNoEncodingType): ResolvedCSHAKEOptionsNoEncodingType {\n  const resolvedOptions = options || {};\n\n  return {\n    funcName: parseInputOption(\"funcName\", resolvedOptions[\"funcName\"], 1, { value: [], binLen: 0 }),\n    customization: parseInputOption(\"Customization\", resolvedOptions[\"customization\"], 1, { value: [], binLen: 0 }),\n  };\n}\n\n/**\n * Parses/validate constructor options for a KMAC variant\n *\n * @param options Option given to constructor\n */\nfunction resolveKMACOptions(options: KMACOptionsNoEncodingType): ResolvedKMACOptionsNoEncodingType {\n  const resolvedOptions = options || {};\n\n  return {\n    kmacKey: parseInputOption(\"kmacKey\", resolvedOptions[\"kmacKey\"], 1),\n    /* This is little-endian packed \"KMAC\" */\n    funcName: { value: [0x43414d4b], binLen: 32 },\n    customization: parseInputOption(\"Customization\", resolvedOptions[\"customization\"], 1, { value: [], binLen: 0 }),\n  };\n}\n\nexport default class jsSHA extends jsSHABase<Int_64[][], VariantType> {\n  intermediateState: Int_64[][];\n  variantBlockSize: number;\n  bigEndianMod: -1 | 1;\n  outputBinLen: number;\n  isVariableLen: boolean;\n  HMACSupported: boolean;\n\n  /* eslint-disable-next-line @typescript-eslint/no-explicit-any */\n  converterFunc: (input: any, existingBin: number[], existingBinLen: number) => packedValue;\n  roundFunc: (block: number[], H: Int_64[][]) => Int_64[][];\n  finalizeFunc: (\n    remainder: number[],\n    remainderBinLen: number,\n    processedBinLen: number,\n    H: Int_64[][],\n    outputLen: number\n  ) => number[];\n  stateCloneFunc: (state: Int_64[][]) => Int_64[][];\n  newStateFunc: (variant: VariantType) => Int_64[][];\n  getMAC: ((options: { outputLen: number }) => number[]) | null;\n\n  constructor(variant: FixedLengthVariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(\n    variant: FixedLengthVariantType,\n    inputFormat: FormatNoTextType,\n    options?: FixedLengthOptionsNoEncodingType\n  );\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: \"TEXT\", options?: SHAKEOptionsEncodingType);\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: FormatNoTextType, options?: SHAKEOptionsNoEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: \"TEXT\", options?: CSHAKEOptionsEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: FormatNoTextType, options?: CSHAKEOptionsNoEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: \"TEXT\", options: KMACOptionsEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: FormatNoTextType, options: KMACOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    let delimiter = 0x06,\n      variantBlockSize = 0;\n    super(variant, inputFormat, options);\n    const resolvedOptions = options || {};\n\n    /* In other variants, this was done after variable initialization but need to do it earlier here becaue we want to\n       avoid KMAC initialization */\n    if (this.numRounds !== 1) {\n      if (resolvedOptions[\"kmacKey\"] || resolvedOptions[\"hmacKey\"]) {\n        throw new Error(mac_rounds_error);\n      } else if (this.shaVariant === \"CSHAKE128\" || this.shaVariant === \"CSHAKE256\") {\n        throw new Error(\"Cannot set numRounds for CSHAKE variants\");\n      }\n    }\n\n    this.bigEndianMod = 1;\n    this.converterFunc = getStrConverter(this.inputFormat, this.utfType, this.bigEndianMod);\n    this.roundFunc = roundSHA3;\n    this.stateCloneFunc = cloneSHA3State;\n    this.newStateFunc = getNewState;\n    this.intermediateState = getNewState(variant);\n\n    this.isVariableLen = false;\n    switch (variant) {\n      case \"SHA3-224\":\n        this.variantBlockSize = variantBlockSize = 1152;\n        this.outputBinLen = 224;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHA3-256\":\n        this.variantBlockSize = variantBlockSize = 1088;\n        this.outputBinLen = 256;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHA3-384\":\n        this.variantBlockSize = variantBlockSize = 832;\n        this.outputBinLen = 384;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHA3-512\":\n        this.variantBlockSize = variantBlockSize = 576;\n        this.outputBinLen = 512;\n        this.HMACSupported = true;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getHMAC;\n        break;\n      case \"SHAKE128\":\n        delimiter = 0x1f;\n        this.variantBlockSize = variantBlockSize = 1344;\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      case \"SHAKE256\":\n        delimiter = 0x1f;\n        this.variantBlockSize = variantBlockSize = 1088;\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      case \"KMAC128\":\n        delimiter = 0x4;\n        this.variantBlockSize = variantBlockSize = 1344;\n        this._initializeKMAC(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getKMAC;\n        break;\n      case \"KMAC256\":\n        delimiter = 0x4;\n        this.variantBlockSize = variantBlockSize = 1088;\n        this._initializeKMAC(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        this.getMAC = this._getKMAC;\n        break;\n      case \"CSHAKE128\":\n        this.variantBlockSize = variantBlockSize = 1344;\n        delimiter = this._initializeCSHAKE(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      case \"CSHAKE256\":\n        this.variantBlockSize = variantBlockSize = 1088;\n        delimiter = this._initializeCSHAKE(options);\n        /* This will be set in getHash */\n        this.outputBinLen = -1;\n        this.isVariableLen = true;\n        this.HMACSupported = false;\n        this.getMAC = null;\n        break;\n      default:\n        throw new Error(sha_variant_error);\n    }\n\n    /* This needs to be down here as CSHAKE can change its delimiter */\n    this.finalizeFunc = function (remainder, remainderBinLen, processedBinLen, state, outputBinLen): number[] {\n      return finalizeSHA3(\n        remainder,\n        remainderBinLen,\n        processedBinLen,\n        state,\n        variantBlockSize,\n        delimiter,\n        outputBinLen\n      );\n    };\n\n    if (resolvedOptions[\"hmacKey\"]) {\n      this._setHMACKey(parseInputOption(\"hmacKey\", resolvedOptions[\"hmacKey\"], this.bigEndianMod));\n    }\n  }\n\n  /**\n   * Initialize CSHAKE variants.\n   *\n   * @param options Options containing CSHAKE params.\n   * @param funcNameOverride Overrides any \"funcName\" present in `options` (used with KMAC)\n   * @returns The delimiter to be used\n   */\n  protected _initializeCSHAKE(options?: CSHAKEOptionsNoEncodingType, funcNameOverride?: packedValue): number {\n    const resolvedOptions = resolveCSHAKEOptions(options || {});\n    if (funcNameOverride) {\n      resolvedOptions[\"funcName\"] = funcNameOverride;\n    }\n    const packedParams = packedLEConcat(\n      encode_string(resolvedOptions[\"funcName\"]),\n      encode_string(resolvedOptions[\"customization\"])\n    );\n\n    /* CSHAKE is defined to be a call to SHAKE iff both the customization and function-name string are both empty.  This\n       can be accomplished by processing nothing in this step. */\n    if (resolvedOptions[\"customization\"][\"binLen\"] !== 0 || resolvedOptions[\"funcName\"][\"binLen\"] !== 0) {\n      const byte_pad_out = byte_pad(packedParams, this.variantBlockSize >>> 3);\n      for (let i = 0; i < byte_pad_out.length; i += this.variantBlockSize >>> 5) {\n        this.intermediateState = this.roundFunc(\n          byte_pad_out.slice(i, i + (this.variantBlockSize >>> 5)),\n          this.intermediateState\n        );\n        this.processedLen += this.variantBlockSize;\n      }\n      return 0x04;\n    } else {\n      return 0x1f;\n    }\n  }\n\n  /**\n   * Initialize KMAC variants.\n   *\n   * @param options Options containing KMAC params.\n   */\n  protected _initializeKMAC(options: KMACOptionsNoEncodingType): void {\n    const resolvedOptions = resolveKMACOptions(options || {});\n\n    this._initializeCSHAKE(options, resolvedOptions[\"funcName\"]);\n    const byte_pad_out = byte_pad(encode_string(resolvedOptions[\"kmacKey\"]), this.variantBlockSize >>> 3);\n    for (let i = 0; i < byte_pad_out.length; i += this.variantBlockSize >>> 5) {\n      this.intermediateState = this.roundFunc(\n        byte_pad_out.slice(i, i + (this.variantBlockSize >>> 5)),\n        this.intermediateState\n      );\n      this.processedLen += this.variantBlockSize;\n    }\n    this.macKeySet = true;\n  }\n\n  /**\n   * Returns the the KMAC in the specified format.\n   *\n   * @param options Hashmap of extra outputs options. `outputLen` must be specified.\n   * @returns The KMAC in the format specified.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  protected _getKMAC(options: { outputLen: number }): number[] {\n    const concatedRemainder = packedLEConcat(\n      { value: this.remainder.slice(), binLen: this.remainderLen },\n      right_encode(options[\"outputLen\"])\n    );\n\n    return this.finalizeFunc(\n      concatedRemainder[\"value\"],\n      concatedRemainder[\"binLen\"],\n      this.processedLen,\n      this.stateCloneFunc(this.intermediateState),\n      options[\"outputLen\"]\n    );\n  }\n}\n", "import { sha_variant_error } from \"./common\";\nimport {\n  CSHAKEOptionsEncodingType,\n  CSHAKEOptionsNoEncodingType,\n  SHAKEOptionsEncodingType,\n  SHAKEOptionsNoEncodingType,\n  EncodingType,\n  FixedLengthOptionsEncodingType,\n  FixedLengthOptionsNoEncodingType,\n  FormatNoTextType,\n  KMACOptionsNoEncodingType,\n  KMACOptionsEncodingType,\n} from \"./custom_types\";\nimport jsSHA1 from \"./sha1\";\nimport jsSHA256 from \"./sha256\";\nimport jsSHA512 from \"./sha512\";\nimport jsSHA3 from \"./sha3\";\n\ntype FixedLengthVariantType =\n  | \"SHA-1\"\n  | \"SHA-224\"\n  | \"SHA-256\"\n  | \"SHA-384\"\n  | \"SHA-512\"\n  | \"SHA3-224\"\n  | \"SHA3-256\"\n  | \"SHA3-384\"\n  | \"SHA3-512\";\n\nexport default class jsSHA {\n  private readonly shaObj: jsSHA1 | jsSHA256 | jsSHA512 | jsSHA3;\n  /**\n   * @param variant The desired SHA variant (SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, SHA3-224, SHA3-256, SHA3-256,\n   *   SHA3-384, SHA3-512, SHAKE128, SHAKE256, CSHAKE128, CSHAKE256, KMAC128, or KMAC256) as a string.\n   * @param inputFormat The input format to be used in future `update` calls (TEXT, HEX, B64, BYTES, ARRAYBUFFER,\n   *   or UINT8ARRAY) as a string.\n   * @param options Options in the form of { encoding?: \"UTF8\" | \"UTF16BE\" | \"UTF16LE\"; numRounds?: number }.\n   *   `encoding` is for only TEXT input (defaults to UTF8) and `numRounds` defaults to 1.\n   *   `numRounds` is not valid for any of the MAC or CSHAKE variants.\n   *   * If the variant supports HMAC, `options` may have an additional `hmacKey` key which must be in the form of\n   *     {value: <INPUT>, format: <FORMAT>, encoding?: \"UTF8\" | \"UTF16BE\" | \"UTF16LE\"} where <FORMAT> takes the same\n   *     values as `inputFormat` and <INPUT> can be a `string | ArrayBuffer | Uint8Array` depending on <FORMAT>.\n   *     Supplying this key switches to HMAC calculation and replaces the now deprecated call to `setHMACKey`.\n   *   * If the variant is CSHAKE128 or CSHAKE256, `options` may have two additional keys, `customization` and `funcName`,\n   *     which are the NIST customization and function-name strings.  Both must be in the same form as `hmacKey`.\n   *   * If the variant is KMAC128 or KMAC256, `options` can include the `customization` key from CSHAKE variants and\n   *     *must* have a `kmacKey` key that takes the same form as the `customization` key.\n   */\n  constructor(variant: FixedLengthVariantType, inputFormat: \"TEXT\", options?: FixedLengthOptionsEncodingType);\n  constructor(\n    variant: FixedLengthVariantType,\n    inputFormat: FormatNoTextType,\n    options?: FixedLengthOptionsNoEncodingType\n  );\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: \"TEXT\", options?: SHAKEOptionsEncodingType);\n  constructor(variant: \"SHAKE128\" | \"SHAKE256\", inputFormat: FormatNoTextType, options?: SHAKEOptionsNoEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: \"TEXT\", options?: CSHAKEOptionsEncodingType);\n  constructor(variant: \"CSHAKE128\" | \"CSHAKE256\", inputFormat: FormatNoTextType, options?: CSHAKEOptionsNoEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: \"TEXT\", options: KMACOptionsEncodingType);\n  constructor(variant: \"KMAC128\" | \"KMAC256\", inputFormat: FormatNoTextType, options: KMACOptionsNoEncodingType);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  constructor(variant: any, inputFormat: any, options?: any) {\n    if (\"SHA-1\" == variant) {\n      this.shaObj = new jsSHA1(variant, inputFormat, options);\n    } else if (\"SHA-224\" == variant || \"SHA-256\" == variant) {\n      this.shaObj = new jsSHA256(variant, inputFormat, options);\n    } else if (\"SHA-384\" == variant || \"SHA-512\" == variant) {\n      this.shaObj = new jsSHA512(variant, inputFormat, options);\n    } else if (\n      \"SHA3-224\" == variant ||\n      \"SHA3-256\" == variant ||\n      \"SHA3-384\" == variant ||\n      \"SHA3-512\" == variant ||\n      \"SHAKE128\" == variant ||\n      \"SHAKE256\" == variant ||\n      \"CSHAKE128\" == variant ||\n      \"CSHAKE256\" == variant ||\n      \"KMAC128\" == variant ||\n      \"KMAC256\" == variant\n    ) {\n      this.shaObj = new jsSHA3(variant, inputFormat, options);\n    } else {\n      throw new Error(sha_variant_error);\n    }\n  }\n\n  /**\n   * Takes `input` and hashes as many blocks as possible. Stores the rest for either a future `update` or `getHash` call.\n   *\n   * @param input The input to be hashed\n   */\n  update(input: string | ArrayBuffer | Uint8Array): void {\n    this.shaObj.update(input);\n  }\n\n  /**\n   * Returns the desired SHA or MAC (if a HMAC/KMAC key was specified) hash of the input fed in via `update` calls.\n   *\n   * @param format The desired output formatting (B64, HEX, BYTES, ARRAYBUFFER, or UINT8ARRAY) as a string.\n   * @param options Options in the form of { outputUpper?: boolean; b64Pad?: string; outputLen?: number;  }.\n   *   `outputLen` is required for variable length output variants (this option was previously called `shakeLen` which\n   *    is now deprecated).\n   *   `outputUpper` is only for HEX output (defaults to false) and b64pad is only for B64 output (defaults to \"=\").\n   * @returns The hash in the format specified.\n   */\n  getHash(format: \"HEX\", options?: { outputUpper?: boolean; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"B64\", options?: { b64Pad?: string; outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"BYTES\", options?: { outputLen?: number; shakeLen?: number }): string;\n  getHash(format: \"UINT8ARRAY\", options?: { outputLen?: number; shakeLen?: number }): Uint8Array;\n  getHash(format: \"ARRAYBUFFER\", options?: { outputLen?: number; shakeLen?: number }): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHash(format: any, options?: any): any {\n    return this.shaObj.getHash(format, options);\n  }\n\n  /**\n   * Sets the HMAC key for an eventual `getHMAC` call.  Must be called immediately after jsSHA object instantiation.\n   * Now deprecated in favor of setting the `hmacKey` at object instantiation.\n   *\n   * @param key The key used to calculate the HMAC\n   * @param inputFormat The format of key (HEX, TEXT, B64, BYTES, ARRAYBUFFER, or UINT8ARRAY) as a string.\n   * @param options Options in the form of { encoding?: \"UTF8\" | \"UTF16BE\" | \"UTF16LE }.  `encoding` is only for TEXT\n   *   and defaults to UTF8.\n   */\n  setHMACKey(key: string, inputFormat: \"TEXT\", options?: { encoding?: EncodingType }): void;\n  setHMACKey(key: string, inputFormat: \"B64\" | \"HEX\" | \"BYTES\"): void;\n  setHMACKey(key: ArrayBuffer, inputFormat: \"ARRAYBUFFER\"): void;\n  setHMACKey(key: Uint8Array, inputFormat: \"UINT8ARRAY\"): void;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  setHMACKey(key: any, inputFormat: any, options?: any): void {\n    this.shaObj.setHMACKey(key, inputFormat, options);\n  }\n\n  /**\n   * Returns the the HMAC in the specified format using the key given by a previous `setHMACKey` call. Now deprecated\n   * in favor of just calling `getHash`.\n   *\n   * @param format The desired output formatting (B64, HEX, BYTES, ARRAYBUFFER, or UINT8ARRAY) as a string.\n   * @param options Options in the form of { outputUpper?: boolean; b64Pad?: string }. `outputUpper` is only for HEX\n   *   output (defaults to false) and `b64pad` is only for B64 output (defaults to \"=\").\n   * @returns The HMAC in the format specified.\n   */\n  getHMAC(format: \"HEX\", options?: { outputUpper?: boolean }): string;\n  getHMAC(format: \"B64\", options?: { b64Pad?: string }): string;\n  getHMAC(format: \"BYTES\"): string;\n  getHMAC(format: \"UINT8ARRAY\"): Uint8Array;\n  getHMAC(format: \"ARRAYBUFFER\"): ArrayBuffer;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  getHMAC(format: any, options?: any): any {\n    return this.shaObj.getHMAC(format, options);\n  }\n}\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;\nfunction getSecureRandomBytes(size) {\n    return Buffer.from(window.crypto.getRandomValues(new Uint8Array(size)));\n}\nexports.getSecureRandomBytes = getSecureRandomBytes;\nfunction getSecureRandomWords(size) {\n    return window.crypto.getRandomValues(new Uint16Array(size));\n}\nexports.getSecureRandomWords = getSecureRandomWords;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac_sha512 = void 0;\nasync function hmac_sha512(key, data) {\n    let keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n    let dataBuffer = typeof data === 'string' ? Buffer.from(data, 'utf-8') : data;\n    const hmacAlgo = { name: \"HMAC\", hash: \"SHA-512\" };\n    const hmacKey = await window.crypto.subtle.importKey(\"raw\", keyBuffer, hmacAlgo, false, [\"sign\"]);\n    return Buffer.from(await crypto.subtle.sign(hmacAlgo, hmacKey, dataBuffer));\n}\nexports.hmac_sha512 = hmac_sha512;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2_sha512 = void 0;\nasync function pbkdf2_sha512(key, salt, iterations, keyLen) {\n    const keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n    const saltBuffer = typeof salt === 'string' ? Buffer.from(salt, 'utf-8') : salt;\n    const pbkdf2_key = await window.crypto.subtle.importKey(\"raw\", keyBuffer, { name: \"PBKDF2\" }, false, [\"deriveBits\"]);\n    const derivedBits = await window.crypto.subtle.deriveBits({ name: \"PBKDF2\", hash: \"SHA-512\", salt: saltBuffer, iterations: iterations }, pbkdf2_key, keyLen * 8);\n    return Buffer.from(derivedBits);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = void 0;\nasync function sha256(source) {\n    if (typeof source === 'string') {\n        return Buffer.from(await crypto.subtle.digest(\"SHA-256\", Buffer.from(source, 'utf-8')));\n    }\n    return Buffer.from(await crypto.subtle.digest(\"SHA-256\", source));\n}\nexports.sha256 = sha256;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha512 = void 0;\nasync function sha512(source) {\n    if (typeof source === 'string') {\n        return Buffer.from(await crypto.subtle.digest(\"SHA-512\", Buffer.from(source, 'utf-8')));\n    }\n    return Buffer.from(await crypto.subtle.digest(\"SHA-512\", source));\n}\nexports.sha512 = sha512;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha512 = exports.sha256 = exports.pbkdf2_sha512 = exports.hmac_sha512 = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;\nvar getSecureRandom_1 = require(\"./browser/getSecureRandom\");\nObject.defineProperty(exports, \"getSecureRandomBytes\", { enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomBytes; } });\nObject.defineProperty(exports, \"getSecureRandomWords\", { enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomWords; } });\nvar hmac_sha512_1 = require(\"./browser/hmac_sha512\");\nObject.defineProperty(exports, \"hmac_sha512\", { enumerable: true, get: function () { return hmac_sha512_1.hmac_sha512; } });\nvar pbkdf2_sha512_1 = require(\"./browser/pbkdf2_sha512\");\nObject.defineProperty(exports, \"pbkdf2_sha512\", { enumerable: true, get: function () { return pbkdf2_sha512_1.pbkdf2_sha512; } });\nvar sha256_1 = require(\"./browser/sha256\");\nObject.defineProperty(exports, \"sha256\", { enumerable: true, get: function () { return sha256_1.sha256; } });\nvar sha512_1 = require(\"./browser/sha512\");\nObject.defineProperty(exports, \"sha512\", { enumerable: true, get: function () { return sha512_1.sha512; } });\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha256 = exports.sha256_fallback = exports.sha256_sync = void 0;\nconst jssha_1 = __importDefault(require(\"jssha\"));\nconst crypto_primitives_1 = require(\"@ton/crypto-primitives\");\nfunction sha256_sync(source) {\n    let src;\n    if (typeof source === 'string') {\n        src = Buffer.from(source, 'utf-8').toString('hex');\n    }\n    else {\n        src = source.toString('hex');\n    }\n    let hasher = new jssha_1.default('SHA-256', 'HEX');\n    hasher.update(src);\n    let res = hasher.getHash('HEX');\n    return Buffer.from(res, 'hex');\n}\nexports.sha256_sync = sha256_sync;\nasync function sha256_fallback(source) {\n    return sha256_sync(source);\n}\nexports.sha256_fallback = sha256_fallback;\nfunction sha256(source) {\n    return (0, crypto_primitives_1.sha256)(source);\n}\nexports.sha256 = sha256;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.sha512 = exports.sha512_fallback = exports.sha512_sync = void 0;\nconst jssha_1 = __importDefault(require(\"jssha\"));\nconst crypto_primitives_1 = require(\"@ton/crypto-primitives\");\nfunction sha512_sync(source) {\n    let src;\n    if (typeof source === 'string') {\n        src = Buffer.from(source, 'utf-8').toString('hex');\n    }\n    else {\n        src = source.toString('hex');\n    }\n    let hasher = new jssha_1.default('SHA-512', 'HEX');\n    hasher.update(src);\n    let res = hasher.getHash('HEX');\n    return Buffer.from(res, 'hex');\n}\nexports.sha512_sync = sha512_sync;\nasync function sha512_fallback(source) {\n    return sha512_sync(source);\n}\nexports.sha512_fallback = sha512_fallback;\nasync function sha512(source) {\n    return (0, crypto_primitives_1.sha512)(source);\n}\nexports.sha512 = sha512;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2_sha512 = void 0;\nconst crypto_primitives_1 = require(\"@ton/crypto-primitives\");\nfunction pbkdf2_sha512(key, salt, iterations, keyLen) {\n    return (0, crypto_primitives_1.pbkdf2_sha512)(key, salt, iterations, keyLen);\n}\nexports.pbkdf2_sha512 = pbkdf2_sha512;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.hmac_sha512 = exports.hmac_sha512_fallback = void 0;\nconst jssha_1 = __importDefault(require(\"jssha\"));\nconst crypto_primitives_1 = require(\"@ton/crypto-primitives\");\nasync function hmac_sha512_fallback(key, data) {\n    let keyBuffer = typeof key === 'string' ? Buffer.from(key, 'utf-8') : key;\n    let dataBuffer = typeof data === 'string' ? Buffer.from(data, 'utf-8') : data;\n    const shaObj = new jssha_1.default(\"SHA-512\", \"HEX\", {\n        hmacKey: { value: keyBuffer.toString('hex'), format: \"HEX\" },\n    });\n    shaObj.update(dataBuffer.toString('hex'));\n    const hmac = shaObj.getHash(\"HEX\");\n    return Buffer.from(hmac, 'hex');\n}\nexports.hmac_sha512_fallback = hmac_sha512_fallback;\nfunction hmac_sha512(key, data) {\n    return (0, crypto_primitives_1.hmac_sha512)(key, data);\n}\nexports.hmac_sha512 = hmac_sha512;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = void 0;\nconst crypto_primitives_1 = require(\"@ton/crypto-primitives\");\nasync function getSecureRandomBytes(size) {\n    return (0, crypto_primitives_1.getSecureRandomBytes)(size);\n}\nexports.getSecureRandomBytes = getSecureRandomBytes;\nasync function getSecureRandomWords(size) {\n    return getSecureRandomWords(size);\n}\nexports.getSecureRandomWords = getSecureRandomWords;\nasync function getSecureRandomNumber(min, max) {\n    let range = max - min;\n    var bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n        throw new Error('Range is too large');\n    }\n    var bytesNeeded = Math.ceil(bitsNeeded / 8);\n    var mask = Math.pow(2, bitsNeeded) - 1;\n    while (true) {\n        let res = await getSecureRandomBytes(bitsNeeded);\n        let power = (bytesNeeded - 1) * 8;\n        let numberValue = 0;\n        for (var i = 0; i < bytesNeeded; i++) {\n            numberValue += res[i] * Math.pow(2, power);\n            power -= 8;\n        }\n        numberValue = numberValue & mask; // Truncate\n        if (numberValue >= range) {\n            continue;\n        }\n        return min + numberValue;\n    }\n}\nexports.getSecureRandomNumber = getSecureRandomNumber;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wordlist = void 0;\n// Source https://www.eff.org/dice\nexports.wordlist = [\n    'abacus',\n    'abdomen',\n    'abdominal',\n    'abide',\n    'abiding',\n    'ability',\n    'ablaze',\n    'able',\n    'abnormal',\n    'abrasion',\n    'abrasive',\n    'abreast',\n    'abridge',\n    'abroad',\n    'abruptly',\n    'absence',\n    'absentee',\n    'absently',\n    'absinthe',\n    'absolute',\n    'absolve',\n    'abstain',\n    'abstract',\n    'absurd',\n    'accent',\n    'acclaim',\n    'acclimate',\n    'accompany',\n    'account',\n    'accuracy',\n    'accurate',\n    'accustom',\n    'acetone',\n    'achiness',\n    'aching',\n    'acid',\n    'acorn',\n    'acquaint',\n    'acquire',\n    'acre',\n    'acrobat',\n    'acronym',\n    'acting',\n    'action',\n    'activate',\n    'activator',\n    'active',\n    'activism',\n    'activist',\n    'activity',\n    'actress',\n    'acts',\n    'acutely',\n    'acuteness',\n    'aeration',\n    'aerobics',\n    'aerosol',\n    'aerospace',\n    'afar',\n    'affair',\n    'affected',\n    'affecting',\n    'affection',\n    'affidavit',\n    'affiliate',\n    'affirm',\n    'affix',\n    'afflicted',\n    'affluent',\n    'afford',\n    'affront',\n    'aflame',\n    'afloat',\n    'aflutter',\n    'afoot',\n    'afraid',\n    'afterglow',\n    'afterlife',\n    'aftermath',\n    'aftermost',\n    'afternoon',\n    'aged',\n    'ageless',\n    'agency',\n    'agenda',\n    'agent',\n    'aggregate',\n    'aghast',\n    'agile',\n    'agility',\n    'aging',\n    'agnostic',\n    'agonize',\n    'agonizing',\n    'agony',\n    'agreeable',\n    'agreeably',\n    'agreed',\n    'agreeing',\n    'agreement',\n    'aground',\n    'ahead',\n    'ahoy',\n    'aide',\n    'aids',\n    'aim',\n    'ajar',\n    'alabaster',\n    'alarm',\n    'albatross',\n    'album',\n    'alfalfa',\n    'algebra',\n    'algorithm',\n    'alias',\n    'alibi',\n    'alienable',\n    'alienate',\n    'aliens',\n    'alike',\n    'alive',\n    'alkaline',\n    'alkalize',\n    'almanac',\n    'almighty',\n    'almost',\n    'aloe',\n    'aloft',\n    'aloha',\n    'alone',\n    'alongside',\n    'aloof',\n    'alphabet',\n    'alright',\n    'although',\n    'altitude',\n    'alto',\n    'aluminum',\n    'alumni',\n    'always',\n    'amaretto',\n    'amaze',\n    'amazingly',\n    'amber',\n    'ambiance',\n    'ambiguity',\n    'ambiguous',\n    'ambition',\n    'ambitious',\n    'ambulance',\n    'ambush',\n    'amendable',\n    'amendment',\n    'amends',\n    'amenity',\n    'amiable',\n    'amicably',\n    'amid',\n    'amigo',\n    'amino',\n    'amiss',\n    'ammonia',\n    'ammonium',\n    'amnesty',\n    'amniotic',\n    'among',\n    'amount',\n    'amperage',\n    'ample',\n    'amplifier',\n    'amplify',\n    'amply',\n    'amuck',\n    'amulet',\n    'amusable',\n    'amused',\n    'amusement',\n    'amuser',\n    'amusing',\n    'anaconda',\n    'anaerobic',\n    'anagram',\n    'anatomist',\n    'anatomy',\n    'anchor',\n    'anchovy',\n    'ancient',\n    'android',\n    'anemia',\n    'anemic',\n    'aneurism',\n    'anew',\n    'angelfish',\n    'angelic',\n    'anger',\n    'angled',\n    'angler',\n    'angles',\n    'angling',\n    'angrily',\n    'angriness',\n    'anguished',\n    'angular',\n    'animal',\n    'animate',\n    'animating',\n    'animation',\n    'animator',\n    'anime',\n    'animosity',\n    'ankle',\n    'annex',\n    'annotate',\n    'announcer',\n    'annoying',\n    'annually',\n    'annuity',\n    'anointer',\n    'another',\n    'answering',\n    'antacid',\n    'antarctic',\n    'anteater',\n    'antelope',\n    'antennae',\n    'anthem',\n    'anthill',\n    'anthology',\n    'antibody',\n    'antics',\n    'antidote',\n    'antihero',\n    'antiquely',\n    'antiques',\n    'antiquity',\n    'antirust',\n    'antitoxic',\n    'antitrust',\n    'antiviral',\n    'antivirus',\n    'antler',\n    'antonym',\n    'antsy',\n    'anvil',\n    'anybody',\n    'anyhow',\n    'anymore',\n    'anyone',\n    'anyplace',\n    'anything',\n    'anytime',\n    'anyway',\n    'anywhere',\n    'aorta',\n    'apache',\n    'apostle',\n    'appealing',\n    'appear',\n    'appease',\n    'appeasing',\n    'appendage',\n    'appendix',\n    'appetite',\n    'appetizer',\n    'applaud',\n    'applause',\n    'apple',\n    'appliance',\n    'applicant',\n    'applied',\n    'apply',\n    'appointee',\n    'appraisal',\n    'appraiser',\n    'apprehend',\n    'approach',\n    'approval',\n    'approve',\n    'apricot',\n    'april',\n    'apron',\n    'aptitude',\n    'aptly',\n    'aqua',\n    'aqueduct',\n    'arbitrary',\n    'arbitrate',\n    'ardently',\n    'area',\n    'arena',\n    'arguable',\n    'arguably',\n    'argue',\n    'arise',\n    'armadillo',\n    'armband',\n    'armchair',\n    'armed',\n    'armful',\n    'armhole',\n    'arming',\n    'armless',\n    'armoire',\n    'armored',\n    'armory',\n    'armrest',\n    'army',\n    'aroma',\n    'arose',\n    'around',\n    'arousal',\n    'arrange',\n    'array',\n    'arrest',\n    'arrival',\n    'arrive',\n    'arrogance',\n    'arrogant',\n    'arson',\n    'art',\n    'ascend',\n    'ascension',\n    'ascent',\n    'ascertain',\n    'ashamed',\n    'ashen',\n    'ashes',\n    'ashy',\n    'aside',\n    'askew',\n    'asleep',\n    'asparagus',\n    'aspect',\n    'aspirate',\n    'aspire',\n    'aspirin',\n    'astonish',\n    'astound',\n    'astride',\n    'astrology',\n    'astronaut',\n    'astronomy',\n    'astute',\n    'atlantic',\n    'atlas',\n    'atom',\n    'atonable',\n    'atop',\n    'atrium',\n    'atrocious',\n    'atrophy',\n    'attach',\n    'attain',\n    'attempt',\n    'attendant',\n    'attendee',\n    'attention',\n    'attentive',\n    'attest',\n    'attic',\n    'attire',\n    'attitude',\n    'attractor',\n    'attribute',\n    'atypical',\n    'auction',\n    'audacious',\n    'audacity',\n    'audible',\n    'audibly',\n    'audience',\n    'audio',\n    'audition',\n    'augmented',\n    'august',\n    'authentic',\n    'author',\n    'autism',\n    'autistic',\n    'autograph',\n    'automaker',\n    'automated',\n    'automatic',\n    'autopilot',\n    'available',\n    'avalanche',\n    'avatar',\n    'avenge',\n    'avenging',\n    'avenue',\n    'average',\n    'aversion',\n    'avert',\n    'aviation',\n    'aviator',\n    'avid',\n    'avoid',\n    'await',\n    'awaken',\n    'award',\n    'aware',\n    'awhile',\n    'awkward',\n    'awning',\n    'awoke',\n    'awry',\n    'axis',\n    'babble',\n    'babbling',\n    'babied',\n    'baboon',\n    'backache',\n    'backboard',\n    'backboned',\n    'backdrop',\n    'backed',\n    'backer',\n    'backfield',\n    'backfire',\n    'backhand',\n    'backing',\n    'backlands',\n    'backlash',\n    'backless',\n    'backlight',\n    'backlit',\n    'backlog',\n    'backpack',\n    'backpedal',\n    'backrest',\n    'backroom',\n    'backshift',\n    'backside',\n    'backslid',\n    'backspace',\n    'backspin',\n    'backstab',\n    'backstage',\n    'backtalk',\n    'backtrack',\n    'backup',\n    'backward',\n    'backwash',\n    'backwater',\n    'backyard',\n    'bacon',\n    'bacteria',\n    'bacterium',\n    'badass',\n    'badge',\n    'badland',\n    'badly',\n    'badness',\n    'baffle',\n    'baffling',\n    'bagel',\n    'bagful',\n    'baggage',\n    'bagged',\n    'baggie',\n    'bagginess',\n    'bagging',\n    'baggy',\n    'bagpipe',\n    'baguette',\n    'baked',\n    'bakery',\n    'bakeshop',\n    'baking',\n    'balance',\n    'balancing',\n    'balcony',\n    'balmy',\n    'balsamic',\n    'bamboo',\n    'banana',\n    'banish',\n    'banister',\n    'banjo',\n    'bankable',\n    'bankbook',\n    'banked',\n    'banker',\n    'banking',\n    'banknote',\n    'bankroll',\n    'banner',\n    'bannister',\n    'banshee',\n    'banter',\n    'barbecue',\n    'barbed',\n    'barbell',\n    'barber',\n    'barcode',\n    'barge',\n    'bargraph',\n    'barista',\n    'baritone',\n    'barley',\n    'barmaid',\n    'barman',\n    'barn',\n    'barometer',\n    'barrack',\n    'barracuda',\n    'barrel',\n    'barrette',\n    'barricade',\n    'barrier',\n    'barstool',\n    'bartender',\n    'barterer',\n    'bash',\n    'basically',\n    'basics',\n    'basil',\n    'basin',\n    'basis',\n    'basket',\n    'batboy',\n    'batch',\n    'bath',\n    'baton',\n    'bats',\n    'battalion',\n    'battered',\n    'battering',\n    'battery',\n    'batting',\n    'battle',\n    'bauble',\n    'bazooka',\n    'blabber',\n    'bladder',\n    'blade',\n    'blah',\n    'blame',\n    'blaming',\n    'blanching',\n    'blandness',\n    'blank',\n    'blaspheme',\n    'blasphemy',\n    'blast',\n    'blatancy',\n    'blatantly',\n    'blazer',\n    'blazing',\n    'bleach',\n    'bleak',\n    'bleep',\n    'blemish',\n    'blend',\n    'bless',\n    'blighted',\n    'blimp',\n    'bling',\n    'blinked',\n    'blinker',\n    'blinking',\n    'blinks',\n    'blip',\n    'blissful',\n    'blitz',\n    'blizzard',\n    'bloated',\n    'bloating',\n    'blob',\n    'blog',\n    'bloomers',\n    'blooming',\n    'blooper',\n    'blot',\n    'blouse',\n    'blubber',\n    'bluff',\n    'bluish',\n    'blunderer',\n    'blunt',\n    'blurb',\n    'blurred',\n    'blurry',\n    'blurt',\n    'blush',\n    'blustery',\n    'boaster',\n    'boastful',\n    'boasting',\n    'boat',\n    'bobbed',\n    'bobbing',\n    'bobble',\n    'bobcat',\n    'bobsled',\n    'bobtail',\n    'bodacious',\n    'body',\n    'bogged',\n    'boggle',\n    'bogus',\n    'boil',\n    'bok',\n    'bolster',\n    'bolt',\n    'bonanza',\n    'bonded',\n    'bonding',\n    'bondless',\n    'boned',\n    'bonehead',\n    'boneless',\n    'bonelike',\n    'boney',\n    'bonfire',\n    'bonnet',\n    'bonsai',\n    'bonus',\n    'bony',\n    'boogeyman',\n    'boogieman',\n    'book',\n    'boondocks',\n    'booted',\n    'booth',\n    'bootie',\n    'booting',\n    'bootlace',\n    'bootleg',\n    'boots',\n    'boozy',\n    'borax',\n    'boring',\n    'borough',\n    'borrower',\n    'borrowing',\n    'boss',\n    'botanical',\n    'botanist',\n    'botany',\n    'botch',\n    'both',\n    'bottle',\n    'bottling',\n    'bottom',\n    'bounce',\n    'bouncing',\n    'bouncy',\n    'bounding',\n    'boundless',\n    'bountiful',\n    'bovine',\n    'boxcar',\n    'boxer',\n    'boxing',\n    'boxlike',\n    'boxy',\n    'breach',\n    'breath',\n    'breeches',\n    'breeching',\n    'breeder',\n    'breeding',\n    'breeze',\n    'breezy',\n    'brethren',\n    'brewery',\n    'brewing',\n    'briar',\n    'bribe',\n    'brick',\n    'bride',\n    'bridged',\n    'brigade',\n    'bright',\n    'brilliant',\n    'brim',\n    'bring',\n    'brink',\n    'brisket',\n    'briskly',\n    'briskness',\n    'bristle',\n    'brittle',\n    'broadband',\n    'broadcast',\n    'broaden',\n    'broadly',\n    'broadness',\n    'broadside',\n    'broadways',\n    'broiler',\n    'broiling',\n    'broken',\n    'broker',\n    'bronchial',\n    'bronco',\n    'bronze',\n    'bronzing',\n    'brook',\n    'broom',\n    'brought',\n    'browbeat',\n    'brownnose',\n    'browse',\n    'browsing',\n    'bruising',\n    'brunch',\n    'brunette',\n    'brunt',\n    'brush',\n    'brussels',\n    'brute',\n    'brutishly',\n    'bubble',\n    'bubbling',\n    'bubbly',\n    'buccaneer',\n    'bucked',\n    'bucket',\n    'buckle',\n    'buckshot',\n    'buckskin',\n    'bucktooth',\n    'buckwheat',\n    'buddhism',\n    'buddhist',\n    'budding',\n    'buddy',\n    'budget',\n    'buffalo',\n    'buffed',\n    'buffer',\n    'buffing',\n    'buffoon',\n    'buggy',\n    'bulb',\n    'bulge',\n    'bulginess',\n    'bulgur',\n    'bulk',\n    'bulldog',\n    'bulldozer',\n    'bullfight',\n    'bullfrog',\n    'bullhorn',\n    'bullion',\n    'bullish',\n    'bullpen',\n    'bullring',\n    'bullseye',\n    'bullwhip',\n    'bully',\n    'bunch',\n    'bundle',\n    'bungee',\n    'bunion',\n    'bunkbed',\n    'bunkhouse',\n    'bunkmate',\n    'bunny',\n    'bunt',\n    'busboy',\n    'bush',\n    'busily',\n    'busload',\n    'bust',\n    'busybody',\n    'buzz',\n    'cabana',\n    'cabbage',\n    'cabbie',\n    'cabdriver',\n    'cable',\n    'caboose',\n    'cache',\n    'cackle',\n    'cacti',\n    'cactus',\n    'caddie',\n    'caddy',\n    'cadet',\n    'cadillac',\n    'cadmium',\n    'cage',\n    'cahoots',\n    'cake',\n    'calamari',\n    'calamity',\n    'calcium',\n    'calculate',\n    'calculus',\n    'caliber',\n    'calibrate',\n    'calm',\n    'caloric',\n    'calorie',\n    'calzone',\n    'camcorder',\n    'cameo',\n    'camera',\n    'camisole',\n    'camper',\n    'campfire',\n    'camping',\n    'campsite',\n    'campus',\n    'canal',\n    'canary',\n    'cancel',\n    'candied',\n    'candle',\n    'candy',\n    'cane',\n    'canine',\n    'canister',\n    'cannabis',\n    'canned',\n    'canning',\n    'cannon',\n    'cannot',\n    'canola',\n    'canon',\n    'canopener',\n    'canopy',\n    'canteen',\n    'canyon',\n    'capable',\n    'capably',\n    'capacity',\n    'cape',\n    'capillary',\n    'capital',\n    'capitol',\n    'capped',\n    'capricorn',\n    'capsize',\n    'capsule',\n    'caption',\n    'captivate',\n    'captive',\n    'captivity',\n    'capture',\n    'caramel',\n    'carat',\n    'caravan',\n    'carbon',\n    'cardboard',\n    'carded',\n    'cardiac',\n    'cardigan',\n    'cardinal',\n    'cardstock',\n    'carefully',\n    'caregiver',\n    'careless',\n    'caress',\n    'caretaker',\n    'cargo',\n    'caring',\n    'carless',\n    'carload',\n    'carmaker',\n    'carnage',\n    'carnation',\n    'carnival',\n    'carnivore',\n    'carol',\n    'carpenter',\n    'carpentry',\n    'carpool',\n    'carport',\n    'carried',\n    'carrot',\n    'carrousel',\n    'carry',\n    'cartel',\n    'cartload',\n    'carton',\n    'cartoon',\n    'cartridge',\n    'cartwheel',\n    'carve',\n    'carving',\n    'carwash',\n    'cascade',\n    'case',\n    'cash',\n    'casing',\n    'casino',\n    'casket',\n    'cassette',\n    'casually',\n    'casualty',\n    'catacomb',\n    'catalog',\n    'catalyst',\n    'catalyze',\n    'catapult',\n    'cataract',\n    'catatonic',\n    'catcall',\n    'catchable',\n    'catcher',\n    'catching',\n    'catchy',\n    'caterer',\n    'catering',\n    'catfight',\n    'catfish',\n    'cathedral',\n    'cathouse',\n    'catlike',\n    'catnap',\n    'catnip',\n    'catsup',\n    'cattail',\n    'cattishly',\n    'cattle',\n    'catty',\n    'catwalk',\n    'caucasian',\n    'caucus',\n    'causal',\n    'causation',\n    'cause',\n    'causing',\n    'cauterize',\n    'caution',\n    'cautious',\n    'cavalier',\n    'cavalry',\n    'caviar',\n    'cavity',\n    'cedar',\n    'celery',\n    'celestial',\n    'celibacy',\n    'celibate',\n    'celtic',\n    'cement',\n    'census',\n    'ceramics',\n    'ceremony',\n    'certainly',\n    'certainty',\n    'certified',\n    'certify',\n    'cesarean',\n    'cesspool',\n    'chafe',\n    'chaffing',\n    'chain',\n    'chair',\n    'chalice',\n    'challenge',\n    'chamber',\n    'chamomile',\n    'champion',\n    'chance',\n    'change',\n    'channel',\n    'chant',\n    'chaos',\n    'chaperone',\n    'chaplain',\n    'chapped',\n    'chaps',\n    'chapter',\n    'character',\n    'charbroil',\n    'charcoal',\n    'charger',\n    'charging',\n    'chariot',\n    'charity',\n    'charm',\n    'charred',\n    'charter',\n    'charting',\n    'chase',\n    'chasing',\n    'chaste',\n    'chastise',\n    'chastity',\n    'chatroom',\n    'chatter',\n    'chatting',\n    'chatty',\n    'cheating',\n    'cheddar',\n    'cheek',\n    'cheer',\n    'cheese',\n    'cheesy',\n    'chef',\n    'chemicals',\n    'chemist',\n    'chemo',\n    'cherisher',\n    'cherub',\n    'chess',\n    'chest',\n    'chevron',\n    'chevy',\n    'chewable',\n    'chewer',\n    'chewing',\n    'chewy',\n    'chief',\n    'chihuahua',\n    'childcare',\n    'childhood',\n    'childish',\n    'childless',\n    'childlike',\n    'chili',\n    'chill',\n    'chimp',\n    'chip',\n    'chirping',\n    'chirpy',\n    'chitchat',\n    'chivalry',\n    'chive',\n    'chloride',\n    'chlorine',\n    'choice',\n    'chokehold',\n    'choking',\n    'chomp',\n    'chooser',\n    'choosing',\n    'choosy',\n    'chop',\n    'chosen',\n    'chowder',\n    'chowtime',\n    'chrome',\n    'chubby',\n    'chuck',\n    'chug',\n    'chummy',\n    'chump',\n    'chunk',\n    'churn',\n    'chute',\n    'cider',\n    'cilantro',\n    'cinch',\n    'cinema',\n    'cinnamon',\n    'circle',\n    'circling',\n    'circular',\n    'circulate',\n    'circus',\n    'citable',\n    'citadel',\n    'citation',\n    'citizen',\n    'citric',\n    'citrus',\n    'city',\n    'civic',\n    'civil',\n    'clad',\n    'claim',\n    'clambake',\n    'clammy',\n    'clamor',\n    'clamp',\n    'clamshell',\n    'clang',\n    'clanking',\n    'clapped',\n    'clapper',\n    'clapping',\n    'clarify',\n    'clarinet',\n    'clarity',\n    'clash',\n    'clasp',\n    'class',\n    'clatter',\n    'clause',\n    'clavicle',\n    'claw',\n    'clay',\n    'clean',\n    'clear',\n    'cleat',\n    'cleaver',\n    'cleft',\n    'clench',\n    'clergyman',\n    'clerical',\n    'clerk',\n    'clever',\n    'clicker',\n    'client',\n    'climate',\n    'climatic',\n    'cling',\n    'clinic',\n    'clinking',\n    'clip',\n    'clique',\n    'cloak',\n    'clobber',\n    'clock',\n    'clone',\n    'cloning',\n    'closable',\n    'closure',\n    'clothes',\n    'clothing',\n    'cloud',\n    'clover',\n    'clubbed',\n    'clubbing',\n    'clubhouse',\n    'clump',\n    'clumsily',\n    'clumsy',\n    'clunky',\n    'clustered',\n    'clutch',\n    'clutter',\n    'coach',\n    'coagulant',\n    'coastal',\n    'coaster',\n    'coasting',\n    'coastland',\n    'coastline',\n    'coat',\n    'coauthor',\n    'cobalt',\n    'cobbler',\n    'cobweb',\n    'cocoa',\n    'coconut',\n    'cod',\n    'coeditor',\n    'coerce',\n    'coexist',\n    'coffee',\n    'cofounder',\n    'cognition',\n    'cognitive',\n    'cogwheel',\n    'coherence',\n    'coherent',\n    'cohesive',\n    'coil',\n    'coke',\n    'cola',\n    'cold',\n    'coleslaw',\n    'coliseum',\n    'collage',\n    'collapse',\n    'collar',\n    'collected',\n    'collector',\n    'collide',\n    'collie',\n    'collision',\n    'colonial',\n    'colonist',\n    'colonize',\n    'colony',\n    'colossal',\n    'colt',\n    'coma',\n    'come',\n    'comfort',\n    'comfy',\n    'comic',\n    'coming',\n    'comma',\n    'commence',\n    'commend',\n    'comment',\n    'commerce',\n    'commode',\n    'commodity',\n    'commodore',\n    'common',\n    'commotion',\n    'commute',\n    'commuting',\n    'compacted',\n    'compacter',\n    'compactly',\n    'compactor',\n    'companion',\n    'company',\n    'compare',\n    'compel',\n    'compile',\n    'comply',\n    'component',\n    'composed',\n    'composer',\n    'composite',\n    'compost',\n    'composure',\n    'compound',\n    'compress',\n    'comprised',\n    'computer',\n    'computing',\n    'comrade',\n    'concave',\n    'conceal',\n    'conceded',\n    'concept',\n    'concerned',\n    'concert',\n    'conch',\n    'concierge',\n    'concise',\n    'conclude',\n    'concrete',\n    'concur',\n    'condense',\n    'condiment',\n    'condition',\n    'condone',\n    'conducive',\n    'conductor',\n    'conduit',\n    'cone',\n    'confess',\n    'confetti',\n    'confidant',\n    'confident',\n    'confider',\n    'confiding',\n    'configure',\n    'confined',\n    'confining',\n    'confirm',\n    'conflict',\n    'conform',\n    'confound',\n    'confront',\n    'confused',\n    'confusing',\n    'confusion',\n    'congenial',\n    'congested',\n    'congrats',\n    'congress',\n    'conical',\n    'conjoined',\n    'conjure',\n    'conjuror',\n    'connected',\n    'connector',\n    'consensus',\n    'consent',\n    'console',\n    'consoling',\n    'consonant',\n    'constable',\n    'constant',\n    'constrain',\n    'constrict',\n    'construct',\n    'consult',\n    'consumer',\n    'consuming',\n    'contact',\n    'container',\n    'contempt',\n    'contend',\n    'contented',\n    'contently',\n    'contents',\n    'contest',\n    'context',\n    'contort',\n    'contour',\n    'contrite',\n    'control',\n    'contusion',\n    'convene',\n    'convent',\n    'copartner',\n    'cope',\n    'copied',\n    'copier',\n    'copilot',\n    'coping',\n    'copious',\n    'copper',\n    'copy',\n    'coral',\n    'cork',\n    'cornball',\n    'cornbread',\n    'corncob',\n    'cornea',\n    'corned',\n    'corner',\n    'cornfield',\n    'cornflake',\n    'cornhusk',\n    'cornmeal',\n    'cornstalk',\n    'corny',\n    'coronary',\n    'coroner',\n    'corporal',\n    'corporate',\n    'corral',\n    'correct',\n    'corridor',\n    'corrode',\n    'corroding',\n    'corrosive',\n    'corsage',\n    'corset',\n    'cortex',\n    'cosigner',\n    'cosmetics',\n    'cosmic',\n    'cosmos',\n    'cosponsor',\n    'cost',\n    'cottage',\n    'cotton',\n    'couch',\n    'cough',\n    'could',\n    'countable',\n    'countdown',\n    'counting',\n    'countless',\n    'country',\n    'county',\n    'courier',\n    'covenant',\n    'cover',\n    'coveted',\n    'coveting',\n    'coyness',\n    'cozily',\n    'coziness',\n    'cozy',\n    'crabbing',\n    'crabgrass',\n    'crablike',\n    'crabmeat',\n    'cradle',\n    'cradling',\n    'crafter',\n    'craftily',\n    'craftsman',\n    'craftwork',\n    'crafty',\n    'cramp',\n    'cranberry',\n    'crane',\n    'cranial',\n    'cranium',\n    'crank',\n    'crate',\n    'crave',\n    'craving',\n    'crawfish',\n    'crawlers',\n    'crawling',\n    'crayfish',\n    'crayon',\n    'crazed',\n    'crazily',\n    'craziness',\n    'crazy',\n    'creamed',\n    'creamer',\n    'creamlike',\n    'crease',\n    'creasing',\n    'creatable',\n    'create',\n    'creation',\n    'creative',\n    'creature',\n    'credible',\n    'credibly',\n    'credit',\n    'creed',\n    'creme',\n    'creole',\n    'crepe',\n    'crept',\n    'crescent',\n    'crested',\n    'cresting',\n    'crestless',\n    'crevice',\n    'crewless',\n    'crewman',\n    'crewmate',\n    'crib',\n    'cricket',\n    'cried',\n    'crier',\n    'crimp',\n    'crimson',\n    'cringe',\n    'cringing',\n    'crinkle',\n    'crinkly',\n    'crisped',\n    'crisping',\n    'crisply',\n    'crispness',\n    'crispy',\n    'criteria',\n    'critter',\n    'croak',\n    'crock',\n    'crook',\n    'croon',\n    'crop',\n    'cross',\n    'crouch',\n    'crouton',\n    'crowbar',\n    'crowd',\n    'crown',\n    'crucial',\n    'crudely',\n    'crudeness',\n    'cruelly',\n    'cruelness',\n    'cruelty',\n    'crumb',\n    'crummiest',\n    'crummy',\n    'crumpet',\n    'crumpled',\n    'cruncher',\n    'crunching',\n    'crunchy',\n    'crusader',\n    'crushable',\n    'crushed',\n    'crusher',\n    'crushing',\n    'crust',\n    'crux',\n    'crying',\n    'cryptic',\n    'crystal',\n    'cubbyhole',\n    'cube',\n    'cubical',\n    'cubicle',\n    'cucumber',\n    'cuddle',\n    'cuddly',\n    'cufflink',\n    'culinary',\n    'culminate',\n    'culpable',\n    'culprit',\n    'cultivate',\n    'cultural',\n    'culture',\n    'cupbearer',\n    'cupcake',\n    'cupid',\n    'cupped',\n    'cupping',\n    'curable',\n    'curator',\n    'curdle',\n    'cure',\n    'curfew',\n    'curing',\n    'curled',\n    'curler',\n    'curliness',\n    'curling',\n    'curly',\n    'curry',\n    'curse',\n    'cursive',\n    'cursor',\n    'curtain',\n    'curtly',\n    'curtsy',\n    'curvature',\n    'curve',\n    'curvy',\n    'cushy',\n    'cusp',\n    'cussed',\n    'custard',\n    'custodian',\n    'custody',\n    'customary',\n    'customer',\n    'customize',\n    'customs',\n    'cut',\n    'cycle',\n    'cyclic',\n    'cycling',\n    'cyclist',\n    'cylinder',\n    'cymbal',\n    'cytoplasm',\n    'cytoplast',\n    'dab',\n    'dad',\n    'daffodil',\n    'dagger',\n    'daily',\n    'daintily',\n    'dainty',\n    'dairy',\n    'daisy',\n    'dallying',\n    'dance',\n    'dancing',\n    'dandelion',\n    'dander',\n    'dandruff',\n    'dandy',\n    'danger',\n    'dangle',\n    'dangling',\n    'daredevil',\n    'dares',\n    'daringly',\n    'darkened',\n    'darkening',\n    'darkish',\n    'darkness',\n    'darkroom',\n    'darling',\n    'darn',\n    'dart',\n    'darwinism',\n    'dash',\n    'dastardly',\n    'data',\n    'datebook',\n    'dating',\n    'daughter',\n    'daunting',\n    'dawdler',\n    'dawn',\n    'daybed',\n    'daybreak',\n    'daycare',\n    'daydream',\n    'daylight',\n    'daylong',\n    'dayroom',\n    'daytime',\n    'dazzler',\n    'dazzling',\n    'deacon',\n    'deafening',\n    'deafness',\n    'dealer',\n    'dealing',\n    'dealmaker',\n    'dealt',\n    'dean',\n    'debatable',\n    'debate',\n    'debating',\n    'debit',\n    'debrief',\n    'debtless',\n    'debtor',\n    'debug',\n    'debunk',\n    'decade',\n    'decaf',\n    'decal',\n    'decathlon',\n    'decay',\n    'deceased',\n    'deceit',\n    'deceiver',\n    'deceiving',\n    'december',\n    'decency',\n    'decent',\n    'deception',\n    'deceptive',\n    'decibel',\n    'decidable',\n    'decimal',\n    'decimeter',\n    'decipher',\n    'deck',\n    'declared',\n    'decline',\n    'decode',\n    'decompose',\n    'decorated',\n    'decorator',\n    'decoy',\n    'decrease',\n    'decree',\n    'dedicate',\n    'dedicator',\n    'deduce',\n    'deduct',\n    'deed',\n    'deem',\n    'deepen',\n    'deeply',\n    'deepness',\n    'deface',\n    'defacing',\n    'defame',\n    'default',\n    'defeat',\n    'defection',\n    'defective',\n    'defendant',\n    'defender',\n    'defense',\n    'defensive',\n    'deferral',\n    'deferred',\n    'defiance',\n    'defiant',\n    'defile',\n    'defiling',\n    'define',\n    'definite',\n    'deflate',\n    'deflation',\n    'deflator',\n    'deflected',\n    'deflector',\n    'defog',\n    'deforest',\n    'defraud',\n    'defrost',\n    'deftly',\n    'defuse',\n    'defy',\n    'degraded',\n    'degrading',\n    'degrease',\n    'degree',\n    'dehydrate',\n    'deity',\n    'dejected',\n    'delay',\n    'delegate',\n    'delegator',\n    'delete',\n    'deletion',\n    'delicacy',\n    'delicate',\n    'delicious',\n    'delighted',\n    'delirious',\n    'delirium',\n    'deliverer',\n    'delivery',\n    'delouse',\n    'delta',\n    'deluge',\n    'delusion',\n    'deluxe',\n    'demanding',\n    'demeaning',\n    'demeanor',\n    'demise',\n    'democracy',\n    'democrat',\n    'demote',\n    'demotion',\n    'demystify',\n    'denatured',\n    'deniable',\n    'denial',\n    'denim',\n    'denote',\n    'dense',\n    'density',\n    'dental',\n    'dentist',\n    'denture',\n    'deny',\n    'deodorant',\n    'deodorize',\n    'departed',\n    'departure',\n    'depict',\n    'deplete',\n    'depletion',\n    'deplored',\n    'deploy',\n    'deport',\n    'depose',\n    'depraved',\n    'depravity',\n    'deprecate',\n    'depress',\n    'deprive',\n    'depth',\n    'deputize',\n    'deputy',\n    'derail',\n    'deranged',\n    'derby',\n    'derived',\n    'desecrate',\n    'deserve',\n    'deserving',\n    'designate',\n    'designed',\n    'designer',\n    'designing',\n    'deskbound',\n    'desktop',\n    'deskwork',\n    'desolate',\n    'despair',\n    'despise',\n    'despite',\n    'destiny',\n    'destitute',\n    'destruct',\n    'detached',\n    'detail',\n    'detection',\n    'detective',\n    'detector',\n    'detention',\n    'detergent',\n    'detest',\n    'detonate',\n    'detonator',\n    'detoxify',\n    'detract',\n    'deuce',\n    'devalue',\n    'deviancy',\n    'deviant',\n    'deviate',\n    'deviation',\n    'deviator',\n    'device',\n    'devious',\n    'devotedly',\n    'devotee',\n    'devotion',\n    'devourer',\n    'devouring',\n    'devoutly',\n    'dexterity',\n    'dexterous',\n    'diabetes',\n    'diabetic',\n    'diabolic',\n    'diagnoses',\n    'diagnosis',\n    'diagram',\n    'dial',\n    'diameter',\n    'diaper',\n    'diaphragm',\n    'diary',\n    'dice',\n    'dicing',\n    'dictate',\n    'dictation',\n    'dictator',\n    'difficult',\n    'diffused',\n    'diffuser',\n    'diffusion',\n    'diffusive',\n    'dig',\n    'dilation',\n    'diligence',\n    'diligent',\n    'dill',\n    'dilute',\n    'dime',\n    'diminish',\n    'dimly',\n    'dimmed',\n    'dimmer',\n    'dimness',\n    'dimple',\n    'diner',\n    'dingbat',\n    'dinghy',\n    'dinginess',\n    'dingo',\n    'dingy',\n    'dining',\n    'dinner',\n    'diocese',\n    'dioxide',\n    'diploma',\n    'dipped',\n    'dipper',\n    'dipping',\n    'directed',\n    'direction',\n    'directive',\n    'directly',\n    'directory',\n    'direness',\n    'dirtiness',\n    'disabled',\n    'disagree',\n    'disallow',\n    'disarm',\n    'disarray',\n    'disaster',\n    'disband',\n    'disbelief',\n    'disburse',\n    'discard',\n    'discern',\n    'discharge',\n    'disclose',\n    'discolor',\n    'discount',\n    'discourse',\n    'discover',\n    'discuss',\n    'disdain',\n    'disengage',\n    'disfigure',\n    'disgrace',\n    'dish',\n    'disinfect',\n    'disjoin',\n    'disk',\n    'dislike',\n    'disliking',\n    'dislocate',\n    'dislodge',\n    'disloyal',\n    'dismantle',\n    'dismay',\n    'dismiss',\n    'dismount',\n    'disobey',\n    'disorder',\n    'disown',\n    'disparate',\n    'disparity',\n    'dispatch',\n    'dispense',\n    'dispersal',\n    'dispersed',\n    'disperser',\n    'displace',\n    'display',\n    'displease',\n    'disposal',\n    'dispose',\n    'disprove',\n    'dispute',\n    'disregard',\n    'disrupt',\n    'dissuade',\n    'distance',\n    'distant',\n    'distaste',\n    'distill',\n    'distinct',\n    'distort',\n    'distract',\n    'distress',\n    'district',\n    'distrust',\n    'ditch',\n    'ditto',\n    'ditzy',\n    'dividable',\n    'divided',\n    'dividend',\n    'dividers',\n    'dividing',\n    'divinely',\n    'diving',\n    'divinity',\n    'divisible',\n    'divisibly',\n    'division',\n    'divisive',\n    'divorcee',\n    'dizziness',\n    'dizzy',\n    'doable',\n    'docile',\n    'dock',\n    'doctrine',\n    'document',\n    'dodge',\n    'dodgy',\n    'doily',\n    'doing',\n    'dole',\n    'dollar',\n    'dollhouse',\n    'dollop',\n    'dolly',\n    'dolphin',\n    'domain',\n    'domelike',\n    'domestic',\n    'dominion',\n    'dominoes',\n    'donated',\n    'donation',\n    'donator',\n    'donor',\n    'donut',\n    'doodle',\n    'doorbell',\n    'doorframe',\n    'doorknob',\n    'doorman',\n    'doormat',\n    'doornail',\n    'doorpost',\n    'doorstep',\n    'doorstop',\n    'doorway',\n    'doozy',\n    'dork',\n    'dormitory',\n    'dorsal',\n    'dosage',\n    'dose',\n    'dotted',\n    'doubling',\n    'douche',\n    'dove',\n    'down',\n    'dowry',\n    'doze',\n    'drab',\n    'dragging',\n    'dragonfly',\n    'dragonish',\n    'dragster',\n    'drainable',\n    'drainage',\n    'drained',\n    'drainer',\n    'drainpipe',\n    'dramatic',\n    'dramatize',\n    'drank',\n    'drapery',\n    'drastic',\n    'draw',\n    'dreaded',\n    'dreadful',\n    'dreadlock',\n    'dreamboat',\n    'dreamily',\n    'dreamland',\n    'dreamless',\n    'dreamlike',\n    'dreamt',\n    'dreamy',\n    'drearily',\n    'dreary',\n    'drench',\n    'dress',\n    'drew',\n    'dribble',\n    'dried',\n    'drier',\n    'drift',\n    'driller',\n    'drilling',\n    'drinkable',\n    'drinking',\n    'dripping',\n    'drippy',\n    'drivable',\n    'driven',\n    'driver',\n    'driveway',\n    'driving',\n    'drizzle',\n    'drizzly',\n    'drone',\n    'drool',\n    'droop',\n    'drop-down',\n    'dropbox',\n    'dropkick',\n    'droplet',\n    'dropout',\n    'dropper',\n    'drove',\n    'drown',\n    'drowsily',\n    'drudge',\n    'drum',\n    'dry',\n    'dubbed',\n    'dubiously',\n    'duchess',\n    'duckbill',\n    'ducking',\n    'duckling',\n    'ducktail',\n    'ducky',\n    'duct',\n    'dude',\n    'duffel',\n    'dugout',\n    'duh',\n    'duke',\n    'duller',\n    'dullness',\n    'duly',\n    'dumping',\n    'dumpling',\n    'dumpster',\n    'duo',\n    'dupe',\n    'duplex',\n    'duplicate',\n    'duplicity',\n    'durable',\n    'durably',\n    'duration',\n    'duress',\n    'during',\n    'dusk',\n    'dust',\n    'dutiful',\n    'duty',\n    'duvet',\n    'dwarf',\n    'dweeb',\n    'dwelled',\n    'dweller',\n    'dwelling',\n    'dwindle',\n    'dwindling',\n    'dynamic',\n    'dynamite',\n    'dynasty',\n    'dyslexia',\n    'dyslexic',\n    'each',\n    'eagle',\n    'earache',\n    'eardrum',\n    'earflap',\n    'earful',\n    'earlobe',\n    'early',\n    'earmark',\n    'earmuff',\n    'earphone',\n    'earpiece',\n    'earplugs',\n    'earring',\n    'earshot',\n    'earthen',\n    'earthlike',\n    'earthling',\n    'earthly',\n    'earthworm',\n    'earthy',\n    'earwig',\n    'easeful',\n    'easel',\n    'easiest',\n    'easily',\n    'easiness',\n    'easing',\n    'eastbound',\n    'eastcoast',\n    'easter',\n    'eastward',\n    'eatable',\n    'eaten',\n    'eatery',\n    'eating',\n    'eats',\n    'ebay',\n    'ebony',\n    'ebook',\n    'ecard',\n    'eccentric',\n    'echo',\n    'eclair',\n    'eclipse',\n    'ecologist',\n    'ecology',\n    'economic',\n    'economist',\n    'economy',\n    'ecosphere',\n    'ecosystem',\n    'edge',\n    'edginess',\n    'edging',\n    'edgy',\n    'edition',\n    'editor',\n    'educated',\n    'education',\n    'educator',\n    'eel',\n    'effective',\n    'effects',\n    'efficient',\n    'effort',\n    'eggbeater',\n    'egging',\n    'eggnog',\n    'eggplant',\n    'eggshell',\n    'egomaniac',\n    'egotism',\n    'egotistic',\n    'either',\n    'eject',\n    'elaborate',\n    'elastic',\n    'elated',\n    'elbow',\n    'eldercare',\n    'elderly',\n    'eldest',\n    'electable',\n    'election',\n    'elective',\n    'elephant',\n    'elevate',\n    'elevating',\n    'elevation',\n    'elevator',\n    'eleven',\n    'elf',\n    'eligible',\n    'eligibly',\n    'eliminate',\n    'elite',\n    'elitism',\n    'elixir',\n    'elk',\n    'ellipse',\n    'elliptic',\n    'elm',\n    'elongated',\n    'elope',\n    'eloquence',\n    'eloquent',\n    'elsewhere',\n    'elude',\n    'elusive',\n    'elves',\n    'email',\n    'embargo',\n    'embark',\n    'embassy',\n    'embattled',\n    'embellish',\n    'ember',\n    'embezzle',\n    'emblaze',\n    'emblem',\n    'embody',\n    'embolism',\n    'emboss',\n    'embroider',\n    'emcee',\n    'emerald',\n    'emergency',\n    'emission',\n    'emit',\n    'emote',\n    'emoticon',\n    'emotion',\n    'empathic',\n    'empathy',\n    'emperor',\n    'emphases',\n    'emphasis',\n    'emphasize',\n    'emphatic',\n    'empirical',\n    'employed',\n    'employee',\n    'employer',\n    'emporium',\n    'empower',\n    'emptier',\n    'emptiness',\n    'empty',\n    'emu',\n    'enable',\n    'enactment',\n    'enamel',\n    'enchanted',\n    'enchilada',\n    'encircle',\n    'enclose',\n    'enclosure',\n    'encode',\n    'encore',\n    'encounter',\n    'encourage',\n    'encroach',\n    'encrust',\n    'encrypt',\n    'endanger',\n    'endeared',\n    'endearing',\n    'ended',\n    'ending',\n    'endless',\n    'endnote',\n    'endocrine',\n    'endorphin',\n    'endorse',\n    'endowment',\n    'endpoint',\n    'endurable',\n    'endurance',\n    'enduring',\n    'energetic',\n    'energize',\n    'energy',\n    'enforced',\n    'enforcer',\n    'engaged',\n    'engaging',\n    'engine',\n    'engorge',\n    'engraved',\n    'engraver',\n    'engraving',\n    'engross',\n    'engulf',\n    'enhance',\n    'enigmatic',\n    'enjoyable',\n    'enjoyably',\n    'enjoyer',\n    'enjoying',\n    'enjoyment',\n    'enlarged',\n    'enlarging',\n    'enlighten',\n    'enlisted',\n    'enquirer',\n    'enrage',\n    'enrich',\n    'enroll',\n    'enslave',\n    'ensnare',\n    'ensure',\n    'entail',\n    'entangled',\n    'entering',\n    'entertain',\n    'enticing',\n    'entire',\n    'entitle',\n    'entity',\n    'entomb',\n    'entourage',\n    'entrap',\n    'entree',\n    'entrench',\n    'entrust',\n    'entryway',\n    'entwine',\n    'enunciate',\n    'envelope',\n    'enviable',\n    'enviably',\n    'envious',\n    'envision',\n    'envoy',\n    'envy',\n    'enzyme',\n    'epic',\n    'epidemic',\n    'epidermal',\n    'epidermis',\n    'epidural',\n    'epilepsy',\n    'epileptic',\n    'epilogue',\n    'epiphany',\n    'episode',\n    'equal',\n    'equate',\n    'equation',\n    'equator',\n    'equinox',\n    'equipment',\n    'equity',\n    'equivocal',\n    'eradicate',\n    'erasable',\n    'erased',\n    'eraser',\n    'erasure',\n    'ergonomic',\n    'errand',\n    'errant',\n    'erratic',\n    'error',\n    'erupt',\n    'escalate',\n    'escalator',\n    'escapable',\n    'escapade',\n    'escapist',\n    'escargot',\n    'eskimo',\n    'esophagus',\n    'espionage',\n    'espresso',\n    'esquire',\n    'essay',\n    'essence',\n    'essential',\n    'establish',\n    'estate',\n    'esteemed',\n    'estimate',\n    'estimator',\n    'estranged',\n    'estrogen',\n    'etching',\n    'eternal',\n    'eternity',\n    'ethanol',\n    'ether',\n    'ethically',\n    'ethics',\n    'euphemism',\n    'evacuate',\n    'evacuee',\n    'evade',\n    'evaluate',\n    'evaluator',\n    'evaporate',\n    'evasion',\n    'evasive',\n    'even',\n    'everglade',\n    'evergreen',\n    'everybody',\n    'everyday',\n    'everyone',\n    'evict',\n    'evidence',\n    'evident',\n    'evil',\n    'evoke',\n    'evolution',\n    'evolve',\n    'exact',\n    'exalted',\n    'example',\n    'excavate',\n    'excavator',\n    'exceeding',\n    'exception',\n    'excess',\n    'exchange',\n    'excitable',\n    'exciting',\n    'exclaim',\n    'exclude',\n    'excluding',\n    'exclusion',\n    'exclusive',\n    'excretion',\n    'excretory',\n    'excursion',\n    'excusable',\n    'excusably',\n    'excuse',\n    'exemplary',\n    'exemplify',\n    'exemption',\n    'exerciser',\n    'exert',\n    'exes',\n    'exfoliate',\n    'exhale',\n    'exhaust',\n    'exhume',\n    'exile',\n    'existing',\n    'exit',\n    'exodus',\n    'exonerate',\n    'exorcism',\n    'exorcist',\n    'expand',\n    'expanse',\n    'expansion',\n    'expansive',\n    'expectant',\n    'expedited',\n    'expediter',\n    'expel',\n    'expend',\n    'expenses',\n    'expensive',\n    'expert',\n    'expire',\n    'expiring',\n    'explain',\n    'expletive',\n    'explicit',\n    'explode',\n    'exploit',\n    'explore',\n    'exploring',\n    'exponent',\n    'exporter',\n    'exposable',\n    'expose',\n    'exposure',\n    'express',\n    'expulsion',\n    'exquisite',\n    'extended',\n    'extending',\n    'extent',\n    'extenuate',\n    'exterior',\n    'external',\n    'extinct',\n    'extortion',\n    'extradite',\n    'extras',\n    'extrovert',\n    'extrude',\n    'extruding',\n    'exuberant',\n    'fable',\n    'fabric',\n    'fabulous',\n    'facebook',\n    'facecloth',\n    'facedown',\n    'faceless',\n    'facelift',\n    'faceplate',\n    'faceted',\n    'facial',\n    'facility',\n    'facing',\n    'facsimile',\n    'faction',\n    'factoid',\n    'factor',\n    'factsheet',\n    'factual',\n    'faculty',\n    'fade',\n    'fading',\n    'failing',\n    'falcon',\n    'fall',\n    'false',\n    'falsify',\n    'fame',\n    'familiar',\n    'family',\n    'famine',\n    'famished',\n    'fanatic',\n    'fancied',\n    'fanciness',\n    'fancy',\n    'fanfare',\n    'fang',\n    'fanning',\n    'fantasize',\n    'fantastic',\n    'fantasy',\n    'fascism',\n    'fastball',\n    'faster',\n    'fasting',\n    'fastness',\n    'faucet',\n    'favorable',\n    'favorably',\n    'favored',\n    'favoring',\n    'favorite',\n    'fax',\n    'feast',\n    'federal',\n    'fedora',\n    'feeble',\n    'feed',\n    'feel',\n    'feisty',\n    'feline',\n    'felt-tip',\n    'feminine',\n    'feminism',\n    'feminist',\n    'feminize',\n    'femur',\n    'fence',\n    'fencing',\n    'fender',\n    'ferment',\n    'fernlike',\n    'ferocious',\n    'ferocity',\n    'ferret',\n    'ferris',\n    'ferry',\n    'fervor',\n    'fester',\n    'festival',\n    'festive',\n    'festivity',\n    'fetal',\n    'fetch',\n    'fever',\n    'fiber',\n    'fiction',\n    'fiddle',\n    'fiddling',\n    'fidelity',\n    'fidgeting',\n    'fidgety',\n    'fifteen',\n    'fifth',\n    'fiftieth',\n    'fifty',\n    'figment',\n    'figure',\n    'figurine',\n    'filing',\n    'filled',\n    'filler',\n    'filling',\n    'film',\n    'filter',\n    'filth',\n    'filtrate',\n    'finale',\n    'finalist',\n    'finalize',\n    'finally',\n    'finance',\n    'financial',\n    'finch',\n    'fineness',\n    'finer',\n    'finicky',\n    'finished',\n    'finisher',\n    'finishing',\n    'finite',\n    'finless',\n    'finlike',\n    'fiscally',\n    'fit',\n    'five',\n    'flaccid',\n    'flagman',\n    'flagpole',\n    'flagship',\n    'flagstick',\n    'flagstone',\n    'flail',\n    'flakily',\n    'flaky',\n    'flame',\n    'flammable',\n    'flanked',\n    'flanking',\n    'flannels',\n    'flap',\n    'flaring',\n    'flashback',\n    'flashbulb',\n    'flashcard',\n    'flashily',\n    'flashing',\n    'flashy',\n    'flask',\n    'flatbed',\n    'flatfoot',\n    'flatly',\n    'flatness',\n    'flatten',\n    'flattered',\n    'flatterer',\n    'flattery',\n    'flattop',\n    'flatware',\n    'flatworm',\n    'flavored',\n    'flavorful',\n    'flavoring',\n    'flaxseed',\n    'fled',\n    'fleshed',\n    'fleshy',\n    'flick',\n    'flier',\n    'flight',\n    'flinch',\n    'fling',\n    'flint',\n    'flip',\n    'flirt',\n    'float',\n    'flock',\n    'flogging',\n    'flop',\n    'floral',\n    'florist',\n    'floss',\n    'flounder',\n    'flyable',\n    'flyaway',\n    'flyer',\n    'flying',\n    'flyover',\n    'flypaper',\n    'foam',\n    'foe',\n    'fog',\n    'foil',\n    'folic',\n    'folk',\n    'follicle',\n    'follow',\n    'fondling',\n    'fondly',\n    'fondness',\n    'fondue',\n    'font',\n    'food',\n    'fool',\n    'footage',\n    'football',\n    'footbath',\n    'footboard',\n    'footer',\n    'footgear',\n    'foothill',\n    'foothold',\n    'footing',\n    'footless',\n    'footman',\n    'footnote',\n    'footpad',\n    'footpath',\n    'footprint',\n    'footrest',\n    'footsie',\n    'footsore',\n    'footwear',\n    'footwork',\n    'fossil',\n    'foster',\n    'founder',\n    'founding',\n    'fountain',\n    'fox',\n    'foyer',\n    'fraction',\n    'fracture',\n    'fragile',\n    'fragility',\n    'fragment',\n    'fragrance',\n    'fragrant',\n    'frail',\n    'frame',\n    'framing',\n    'frantic',\n    'fraternal',\n    'frayed',\n    'fraying',\n    'frays',\n    'freckled',\n    'freckles',\n    'freebase',\n    'freebee',\n    'freebie',\n    'freedom',\n    'freefall',\n    'freehand',\n    'freeing',\n    'freeload',\n    'freely',\n    'freemason',\n    'freeness',\n    'freestyle',\n    'freeware',\n    'freeway',\n    'freewill',\n    'freezable',\n    'freezing',\n    'freight',\n    'french',\n    'frenzied',\n    'frenzy',\n    'frequency',\n    'frequent',\n    'fresh',\n    'fretful',\n    'fretted',\n    'friction',\n    'friday',\n    'fridge',\n    'fried',\n    'friend',\n    'frighten',\n    'frightful',\n    'frigidity',\n    'frigidly',\n    'frill',\n    'fringe',\n    'frisbee',\n    'frisk',\n    'fritter',\n    'frivolous',\n    'frolic',\n    'from',\n    'front',\n    'frostbite',\n    'frosted',\n    'frostily',\n    'frosting',\n    'frostlike',\n    'frosty',\n    'froth',\n    'frown',\n    'frozen',\n    'fructose',\n    'frugality',\n    'frugally',\n    'fruit',\n    'frustrate',\n    'frying',\n    'gab',\n    'gaffe',\n    'gag',\n    'gainfully',\n    'gaining',\n    'gains',\n    'gala',\n    'gallantly',\n    'galleria',\n    'gallery',\n    'galley',\n    'gallon',\n    'gallows',\n    'gallstone',\n    'galore',\n    'galvanize',\n    'gambling',\n    'game',\n    'gaming',\n    'gamma',\n    'gander',\n    'gangly',\n    'gangrene',\n    'gangway',\n    'gap',\n    'garage',\n    'garbage',\n    'garden',\n    'gargle',\n    'garland',\n    'garlic',\n    'garment',\n    'garnet',\n    'garnish',\n    'garter',\n    'gas',\n    'gatherer',\n    'gathering',\n    'gating',\n    'gauging',\n    'gauntlet',\n    'gauze',\n    'gave',\n    'gawk',\n    'gazing',\n    'gear',\n    'gecko',\n    'geek',\n    'geiger',\n    'gem',\n    'gender',\n    'generic',\n    'generous',\n    'genetics',\n    'genre',\n    'gentile',\n    'gentleman',\n    'gently',\n    'gents',\n    'geography',\n    'geologic',\n    'geologist',\n    'geology',\n    'geometric',\n    'geometry',\n    'geranium',\n    'gerbil',\n    'geriatric',\n    'germicide',\n    'germinate',\n    'germless',\n    'germproof',\n    'gestate',\n    'gestation',\n    'gesture',\n    'getaway',\n    'getting',\n    'getup',\n    'giant',\n    'gibberish',\n    'giblet',\n    'giddily',\n    'giddiness',\n    'giddy',\n    'gift',\n    'gigabyte',\n    'gigahertz',\n    'gigantic',\n    'giggle',\n    'giggling',\n    'giggly',\n    'gigolo',\n    'gilled',\n    'gills',\n    'gimmick',\n    'girdle',\n    'giveaway',\n    'given',\n    'giver',\n    'giving',\n    'gizmo',\n    'gizzard',\n    'glacial',\n    'glacier',\n    'glade',\n    'gladiator',\n    'gladly',\n    'glamorous',\n    'glamour',\n    'glance',\n    'glancing',\n    'glandular',\n    'glare',\n    'glaring',\n    'glass',\n    'glaucoma',\n    'glazing',\n    'gleaming',\n    'gleeful',\n    'glider',\n    'gliding',\n    'glimmer',\n    'glimpse',\n    'glisten',\n    'glitch',\n    'glitter',\n    'glitzy',\n    'gloater',\n    'gloating',\n    'gloomily',\n    'gloomy',\n    'glorified',\n    'glorifier',\n    'glorify',\n    'glorious',\n    'glory',\n    'gloss',\n    'glove',\n    'glowing',\n    'glowworm',\n    'glucose',\n    'glue',\n    'gluten',\n    'glutinous',\n    'glutton',\n    'gnarly',\n    'gnat',\n    'goal',\n    'goatskin',\n    'goes',\n    'goggles',\n    'going',\n    'goldfish',\n    'goldmine',\n    'goldsmith',\n    'golf',\n    'goliath',\n    'gonad',\n    'gondola',\n    'gone',\n    'gong',\n    'good',\n    'gooey',\n    'goofball',\n    'goofiness',\n    'goofy',\n    'google',\n    'goon',\n    'gopher',\n    'gore',\n    'gorged',\n    'gorgeous',\n    'gory',\n    'gosling',\n    'gossip',\n    'gothic',\n    'gotten',\n    'gout',\n    'gown',\n    'grab',\n    'graceful',\n    'graceless',\n    'gracious',\n    'gradation',\n    'graded',\n    'grader',\n    'gradient',\n    'grading',\n    'gradually',\n    'graduate',\n    'graffiti',\n    'grafted',\n    'grafting',\n    'grain',\n    'granddad',\n    'grandkid',\n    'grandly',\n    'grandma',\n    'grandpa',\n    'grandson',\n    'granite',\n    'granny',\n    'granola',\n    'grant',\n    'granular',\n    'grape',\n    'graph',\n    'grapple',\n    'grappling',\n    'grasp',\n    'grass',\n    'gratified',\n    'gratify',\n    'grating',\n    'gratitude',\n    'gratuity',\n    'gravel',\n    'graveness',\n    'graves',\n    'graveyard',\n    'gravitate',\n    'gravity',\n    'gravy',\n    'gray',\n    'grazing',\n    'greasily',\n    'greedily',\n    'greedless',\n    'greedy',\n    'green',\n    'greeter',\n    'greeting',\n    'grew',\n    'greyhound',\n    'grid',\n    'grief',\n    'grievance',\n    'grieving',\n    'grievous',\n    'grill',\n    'grimace',\n    'grimacing',\n    'grime',\n    'griminess',\n    'grimy',\n    'grinch',\n    'grinning',\n    'grip',\n    'gristle',\n    'grit',\n    'groggily',\n    'groggy',\n    'groin',\n    'groom',\n    'groove',\n    'grooving',\n    'groovy',\n    'grope',\n    'ground',\n    'grouped',\n    'grout',\n    'grove',\n    'grower',\n    'growing',\n    'growl',\n    'grub',\n    'grudge',\n    'grudging',\n    'grueling',\n    'gruffly',\n    'grumble',\n    'grumbling',\n    'grumbly',\n    'grumpily',\n    'grunge',\n    'grunt',\n    'guacamole',\n    'guidable',\n    'guidance',\n    'guide',\n    'guiding',\n    'guileless',\n    'guise',\n    'gulf',\n    'gullible',\n    'gully',\n    'gulp',\n    'gumball',\n    'gumdrop',\n    'gumminess',\n    'gumming',\n    'gummy',\n    'gurgle',\n    'gurgling',\n    'guru',\n    'gush',\n    'gusto',\n    'gusty',\n    'gutless',\n    'guts',\n    'gutter',\n    'guy',\n    'guzzler',\n    'gyration',\n    'habitable',\n    'habitant',\n    'habitat',\n    'habitual',\n    'hacked',\n    'hacker',\n    'hacking',\n    'hacksaw',\n    'had',\n    'haggler',\n    'haiku',\n    'half',\n    'halogen',\n    'halt',\n    'halved',\n    'halves',\n    'hamburger',\n    'hamlet',\n    'hammock',\n    'hamper',\n    'hamster',\n    'hamstring',\n    'handbag',\n    'handball',\n    'handbook',\n    'handbrake',\n    'handcart',\n    'handclap',\n    'handclasp',\n    'handcraft',\n    'handcuff',\n    'handed',\n    'handful',\n    'handgrip',\n    'handgun',\n    'handheld',\n    'handiness',\n    'handiwork',\n    'handlebar',\n    'handled',\n    'handler',\n    'handling',\n    'handmade',\n    'handoff',\n    'handpick',\n    'handprint',\n    'handrail',\n    'handsaw',\n    'handset',\n    'handsfree',\n    'handshake',\n    'handstand',\n    'handwash',\n    'handwork',\n    'handwoven',\n    'handwrite',\n    'handyman',\n    'hangnail',\n    'hangout',\n    'hangover',\n    'hangup',\n    'hankering',\n    'hankie',\n    'hanky',\n    'haphazard',\n    'happening',\n    'happier',\n    'happiest',\n    'happily',\n    'happiness',\n    'happy',\n    'harbor',\n    'hardcopy',\n    'hardcore',\n    'hardcover',\n    'harddisk',\n    'hardened',\n    'hardener',\n    'hardening',\n    'hardhat',\n    'hardhead',\n    'hardiness',\n    'hardly',\n    'hardness',\n    'hardship',\n    'hardware',\n    'hardwired',\n    'hardwood',\n    'hardy',\n    'harmful',\n    'harmless',\n    'harmonica',\n    'harmonics',\n    'harmonize',\n    'harmony',\n    'harness',\n    'harpist',\n    'harsh',\n    'harvest',\n    'hash',\n    'hassle',\n    'haste',\n    'hastily',\n    'hastiness',\n    'hasty',\n    'hatbox',\n    'hatchback',\n    'hatchery',\n    'hatchet',\n    'hatching',\n    'hatchling',\n    'hate',\n    'hatless',\n    'hatred',\n    'haunt',\n    'haven',\n    'hazard',\n    'hazelnut',\n    'hazily',\n    'haziness',\n    'hazing',\n    'hazy',\n    'headache',\n    'headband',\n    'headboard',\n    'headcount',\n    'headdress',\n    'headed',\n    'header',\n    'headfirst',\n    'headgear',\n    'heading',\n    'headlamp',\n    'headless',\n    'headlock',\n    'headphone',\n    'headpiece',\n    'headrest',\n    'headroom',\n    'headscarf',\n    'headset',\n    'headsman',\n    'headstand',\n    'headstone',\n    'headway',\n    'headwear',\n    'heap',\n    'heat',\n    'heave',\n    'heavily',\n    'heaviness',\n    'heaving',\n    'hedge',\n    'hedging',\n    'heftiness',\n    'hefty',\n    'helium',\n    'helmet',\n    'helper',\n    'helpful',\n    'helping',\n    'helpless',\n    'helpline',\n    'hemlock',\n    'hemstitch',\n    'hence',\n    'henchman',\n    'henna',\n    'herald',\n    'herbal',\n    'herbicide',\n    'herbs',\n    'heritage',\n    'hermit',\n    'heroics',\n    'heroism',\n    'herring',\n    'herself',\n    'hertz',\n    'hesitancy',\n    'hesitant',\n    'hesitate',\n    'hexagon',\n    'hexagram',\n    'hubcap',\n    'huddle',\n    'huddling',\n    'huff',\n    'hug',\n    'hula',\n    'hulk',\n    'hull',\n    'human',\n    'humble',\n    'humbling',\n    'humbly',\n    'humid',\n    'humiliate',\n    'humility',\n    'humming',\n    'hummus',\n    'humongous',\n    'humorist',\n    'humorless',\n    'humorous',\n    'humpback',\n    'humped',\n    'humvee',\n    'hunchback',\n    'hundredth',\n    'hunger',\n    'hungrily',\n    'hungry',\n    'hunk',\n    'hunter',\n    'hunting',\n    'huntress',\n    'huntsman',\n    'hurdle',\n    'hurled',\n    'hurler',\n    'hurling',\n    'hurray',\n    'hurricane',\n    'hurried',\n    'hurry',\n    'hurt',\n    'husband',\n    'hush',\n    'husked',\n    'huskiness',\n    'hut',\n    'hybrid',\n    'hydrant',\n    'hydrated',\n    'hydration',\n    'hydrogen',\n    'hydroxide',\n    'hyperlink',\n    'hypertext',\n    'hyphen',\n    'hypnoses',\n    'hypnosis',\n    'hypnotic',\n    'hypnotism',\n    'hypnotist',\n    'hypnotize',\n    'hypocrisy',\n    'hypocrite',\n    'ibuprofen',\n    'ice',\n    'iciness',\n    'icing',\n    'icky',\n    'icon',\n    'icy',\n    'idealism',\n    'idealist',\n    'idealize',\n    'ideally',\n    'idealness',\n    'identical',\n    'identify',\n    'identity',\n    'ideology',\n    'idiocy',\n    'idiom',\n    'idly',\n    'igloo',\n    'ignition',\n    'ignore',\n    'iguana',\n    'illicitly',\n    'illusion',\n    'illusive',\n    'image',\n    'imaginary',\n    'imagines',\n    'imaging',\n    'imbecile',\n    'imitate',\n    'imitation',\n    'immature',\n    'immerse',\n    'immersion',\n    'imminent',\n    'immobile',\n    'immodest',\n    'immorally',\n    'immortal',\n    'immovable',\n    'immovably',\n    'immunity',\n    'immunize',\n    'impaired',\n    'impale',\n    'impart',\n    'impatient',\n    'impeach',\n    'impeding',\n    'impending',\n    'imperfect',\n    'imperial',\n    'impish',\n    'implant',\n    'implement',\n    'implicate',\n    'implicit',\n    'implode',\n    'implosion',\n    'implosive',\n    'imply',\n    'impolite',\n    'important',\n    'importer',\n    'impose',\n    'imposing',\n    'impotence',\n    'impotency',\n    'impotent',\n    'impound',\n    'imprecise',\n    'imprint',\n    'imprison',\n    'impromptu',\n    'improper',\n    'improve',\n    'improving',\n    'improvise',\n    'imprudent',\n    'impulse',\n    'impulsive',\n    'impure',\n    'impurity',\n    'iodine',\n    'iodize',\n    'ion',\n    'ipad',\n    'iphone',\n    'ipod',\n    'irate',\n    'irk',\n    'iron',\n    'irregular',\n    'irrigate',\n    'irritable',\n    'irritably',\n    'irritant',\n    'irritate',\n    'islamic',\n    'islamist',\n    'isolated',\n    'isolating',\n    'isolation',\n    'isotope',\n    'issue',\n    'issuing',\n    'italicize',\n    'italics',\n    'item',\n    'itinerary',\n    'itunes',\n    'ivory',\n    'ivy',\n    'jab',\n    'jackal',\n    'jacket',\n    'jackknife',\n    'jackpot',\n    'jailbird',\n    'jailbreak',\n    'jailer',\n    'jailhouse',\n    'jalapeno',\n    'jam',\n    'janitor',\n    'january',\n    'jargon',\n    'jarring',\n    'jasmine',\n    'jaundice',\n    'jaunt',\n    'java',\n    'jawed',\n    'jawless',\n    'jawline',\n    'jaws',\n    'jaybird',\n    'jaywalker',\n    'jazz',\n    'jeep',\n    'jeeringly',\n    'jellied',\n    'jelly',\n    'jersey',\n    'jester',\n    'jet',\n    'jiffy',\n    'jigsaw',\n    'jimmy',\n    'jingle',\n    'jingling',\n    'jinx',\n    'jitters',\n    'jittery',\n    'job',\n    'jockey',\n    'jockstrap',\n    'jogger',\n    'jogging',\n    'john',\n    'joining',\n    'jokester',\n    'jokingly',\n    'jolliness',\n    'jolly',\n    'jolt',\n    'jot',\n    'jovial',\n    'joyfully',\n    'joylessly',\n    'joyous',\n    'joyride',\n    'joystick',\n    'jubilance',\n    'jubilant',\n    'judge',\n    'judgingly',\n    'judicial',\n    'judiciary',\n    'judo',\n    'juggle',\n    'juggling',\n    'jugular',\n    'juice',\n    'juiciness',\n    'juicy',\n    'jujitsu',\n    'jukebox',\n    'july',\n    'jumble',\n    'jumbo',\n    'jump',\n    'junction',\n    'juncture',\n    'june',\n    'junior',\n    'juniper',\n    'junkie',\n    'junkman',\n    'junkyard',\n    'jurist',\n    'juror',\n    'jury',\n    'justice',\n    'justifier',\n    'justify',\n    'justly',\n    'justness',\n    'juvenile',\n    'kabob',\n    'kangaroo',\n    'karaoke',\n    'karate',\n    'karma',\n    'kebab',\n    'keenly',\n    'keenness',\n    'keep',\n    'keg',\n    'kelp',\n    'kennel',\n    'kept',\n    'kerchief',\n    'kerosene',\n    'kettle',\n    'kick',\n    'kiln',\n    'kilobyte',\n    'kilogram',\n    'kilometer',\n    'kilowatt',\n    'kilt',\n    'kimono',\n    'kindle',\n    'kindling',\n    'kindly',\n    'kindness',\n    'kindred',\n    'kinetic',\n    'kinfolk',\n    'king',\n    'kinship',\n    'kinsman',\n    'kinswoman',\n    'kissable',\n    'kisser',\n    'kissing',\n    'kitchen',\n    'kite',\n    'kitten',\n    'kitty',\n    'kiwi',\n    'kleenex',\n    'knapsack',\n    'knee',\n    'knelt',\n    'knickers',\n    'knoll',\n    'koala',\n    'kooky',\n    'kosher',\n    'krypton',\n    'kudos',\n    'kung',\n    'labored',\n    'laborer',\n    'laboring',\n    'laborious',\n    'labrador',\n    'ladder',\n    'ladies',\n    'ladle',\n    'ladybug',\n    'ladylike',\n    'lagged',\n    'lagging',\n    'lagoon',\n    'lair',\n    'lake',\n    'lance',\n    'landed',\n    'landfall',\n    'landfill',\n    'landing',\n    'landlady',\n    'landless',\n    'landline',\n    'landlord',\n    'landmark',\n    'landmass',\n    'landmine',\n    'landowner',\n    'landscape',\n    'landside',\n    'landslide',\n    'language',\n    'lankiness',\n    'lanky',\n    'lantern',\n    'lapdog',\n    'lapel',\n    'lapped',\n    'lapping',\n    'laptop',\n    'lard',\n    'large',\n    'lark',\n    'lash',\n    'lasso',\n    'last',\n    'latch',\n    'late',\n    'lather',\n    'latitude',\n    'latrine',\n    'latter',\n    'latticed',\n    'launch',\n    'launder',\n    'laundry',\n    'laurel',\n    'lavender',\n    'lavish',\n    'laxative',\n    'lazily',\n    'laziness',\n    'lazy',\n    'lecturer',\n    'left',\n    'legacy',\n    'legal',\n    'legend',\n    'legged',\n    'leggings',\n    'legible',\n    'legibly',\n    'legislate',\n    'lego',\n    'legroom',\n    'legume',\n    'legwarmer',\n    'legwork',\n    'lemon',\n    'lend',\n    'length',\n    'lens',\n    'lent',\n    'leotard',\n    'lesser',\n    'letdown',\n    'lethargic',\n    'lethargy',\n    'letter',\n    'lettuce',\n    'level',\n    'leverage',\n    'levers',\n    'levitate',\n    'levitator',\n    'liability',\n    'liable',\n    'liberty',\n    'librarian',\n    'library',\n    'licking',\n    'licorice',\n    'lid',\n    'life',\n    'lifter',\n    'lifting',\n    'liftoff',\n    'ligament',\n    'likely',\n    'likeness',\n    'likewise',\n    'liking',\n    'lilac',\n    'lilly',\n    'lily',\n    'limb',\n    'limeade',\n    'limelight',\n    'limes',\n    'limit',\n    'limping',\n    'limpness',\n    'line',\n    'lingo',\n    'linguini',\n    'linguist',\n    'lining',\n    'linked',\n    'linoleum',\n    'linseed',\n    'lint',\n    'lion',\n    'lip',\n    'liquefy',\n    'liqueur',\n    'liquid',\n    'lisp',\n    'list',\n    'litigate',\n    'litigator',\n    'litmus',\n    'litter',\n    'little',\n    'livable',\n    'lived',\n    'lively',\n    'liver',\n    'livestock',\n    'lividly',\n    'living',\n    'lizard',\n    'lubricant',\n    'lubricate',\n    'lucid',\n    'luckily',\n    'luckiness',\n    'luckless',\n    'lucrative',\n    'ludicrous',\n    'lugged',\n    'lukewarm',\n    'lullaby',\n    'lumber',\n    'luminance',\n    'luminous',\n    'lumpiness',\n    'lumping',\n    'lumpish',\n    'lunacy',\n    'lunar',\n    'lunchbox',\n    'luncheon',\n    'lunchroom',\n    'lunchtime',\n    'lung',\n    'lurch',\n    'lure',\n    'luridness',\n    'lurk',\n    'lushly',\n    'lushness',\n    'luster',\n    'lustfully',\n    'lustily',\n    'lustiness',\n    'lustrous',\n    'lusty',\n    'luxurious',\n    'luxury',\n    'lying',\n    'lyrically',\n    'lyricism',\n    'lyricist',\n    'lyrics',\n    'macarena',\n    'macaroni',\n    'macaw',\n    'mace',\n    'machine',\n    'machinist',\n    'magazine',\n    'magenta',\n    'maggot',\n    'magical',\n    'magician',\n    'magma',\n    'magnesium',\n    'magnetic',\n    'magnetism',\n    'magnetize',\n    'magnifier',\n    'magnify',\n    'magnitude',\n    'magnolia',\n    'mahogany',\n    'maimed',\n    'majestic',\n    'majesty',\n    'majorette',\n    'majority',\n    'makeover',\n    'maker',\n    'makeshift',\n    'making',\n    'malformed',\n    'malt',\n    'mama',\n    'mammal',\n    'mammary',\n    'mammogram',\n    'manager',\n    'managing',\n    'manatee',\n    'mandarin',\n    'mandate',\n    'mandatory',\n    'mandolin',\n    'manger',\n    'mangle',\n    'mango',\n    'mangy',\n    'manhandle',\n    'manhole',\n    'manhood',\n    'manhunt',\n    'manicotti',\n    'manicure',\n    'manifesto',\n    'manila',\n    'mankind',\n    'manlike',\n    'manliness',\n    'manly',\n    'manmade',\n    'manned',\n    'mannish',\n    'manor',\n    'manpower',\n    'mantis',\n    'mantra',\n    'manual',\n    'many',\n    'map',\n    'marathon',\n    'marauding',\n    'marbled',\n    'marbles',\n    'marbling',\n    'march',\n    'mardi',\n    'margarine',\n    'margarita',\n    'margin',\n    'marigold',\n    'marina',\n    'marine',\n    'marital',\n    'maritime',\n    'marlin',\n    'marmalade',\n    'maroon',\n    'married',\n    'marrow',\n    'marry',\n    'marshland',\n    'marshy',\n    'marsupial',\n    'marvelous',\n    'marxism',\n    'mascot',\n    'masculine',\n    'mashed',\n    'mashing',\n    'massager',\n    'masses',\n    'massive',\n    'mastiff',\n    'matador',\n    'matchbook',\n    'matchbox',\n    'matcher',\n    'matching',\n    'matchless',\n    'material',\n    'maternal',\n    'maternity',\n    'math',\n    'mating',\n    'matriarch',\n    'matrimony',\n    'matrix',\n    'matron',\n    'matted',\n    'matter',\n    'maturely',\n    'maturing',\n    'maturity',\n    'mauve',\n    'maverick',\n    'maximize',\n    'maximum',\n    'maybe',\n    'mayday',\n    'mayflower',\n    'moaner',\n    'moaning',\n    'mobile',\n    'mobility',\n    'mobilize',\n    'mobster',\n    'mocha',\n    'mocker',\n    'mockup',\n    'modified',\n    'modify',\n    'modular',\n    'modulator',\n    'module',\n    'moisten',\n    'moistness',\n    'moisture',\n    'molar',\n    'molasses',\n    'mold',\n    'molecular',\n    'molecule',\n    'molehill',\n    'mollusk',\n    'mom',\n    'monastery',\n    'monday',\n    'monetary',\n    'monetize',\n    'moneybags',\n    'moneyless',\n    'moneywise',\n    'mongoose',\n    'mongrel',\n    'monitor',\n    'monkhood',\n    'monogamy',\n    'monogram',\n    'monologue',\n    'monopoly',\n    'monorail',\n    'monotone',\n    'monotype',\n    'monoxide',\n    'monsieur',\n    'monsoon',\n    'monstrous',\n    'monthly',\n    'monument',\n    'moocher',\n    'moodiness',\n    'moody',\n    'mooing',\n    'moonbeam',\n    'mooned',\n    'moonlight',\n    'moonlike',\n    'moonlit',\n    'moonrise',\n    'moonscape',\n    'moonshine',\n    'moonstone',\n    'moonwalk',\n    'mop',\n    'morale',\n    'morality',\n    'morally',\n    'morbidity',\n    'morbidly',\n    'morphine',\n    'morphing',\n    'morse',\n    'mortality',\n    'mortally',\n    'mortician',\n    'mortified',\n    'mortify',\n    'mortuary',\n    'mosaic',\n    'mossy',\n    'most',\n    'mothball',\n    'mothproof',\n    'motion',\n    'motivate',\n    'motivator',\n    'motive',\n    'motocross',\n    'motor',\n    'motto',\n    'mountable',\n    'mountain',\n    'mounted',\n    'mounting',\n    'mourner',\n    'mournful',\n    'mouse',\n    'mousiness',\n    'moustache',\n    'mousy',\n    'mouth',\n    'movable',\n    'move',\n    'movie',\n    'moving',\n    'mower',\n    'mowing',\n    'much',\n    'muck',\n    'mud',\n    'mug',\n    'mulberry',\n    'mulch',\n    'mule',\n    'mulled',\n    'mullets',\n    'multiple',\n    'multiply',\n    'multitask',\n    'multitude',\n    'mumble',\n    'mumbling',\n    'mumbo',\n    'mummified',\n    'mummify',\n    'mummy',\n    'mumps',\n    'munchkin',\n    'mundane',\n    'municipal',\n    'muppet',\n    'mural',\n    'murkiness',\n    'murky',\n    'murmuring',\n    'muscular',\n    'museum',\n    'mushily',\n    'mushiness',\n    'mushroom',\n    'mushy',\n    'music',\n    'musket',\n    'muskiness',\n    'musky',\n    'mustang',\n    'mustard',\n    'muster',\n    'mustiness',\n    'musty',\n    'mutable',\n    'mutate',\n    'mutation',\n    'mute',\n    'mutilated',\n    'mutilator',\n    'mutiny',\n    'mutt',\n    'mutual',\n    'muzzle',\n    'myself',\n    'myspace',\n    'mystified',\n    'mystify',\n    'myth',\n    'nacho',\n    'nag',\n    'nail',\n    'name',\n    'naming',\n    'nanny',\n    'nanometer',\n    'nape',\n    'napkin',\n    'napped',\n    'napping',\n    'nappy',\n    'narrow',\n    'nastily',\n    'nastiness',\n    'national',\n    'native',\n    'nativity',\n    'natural',\n    'nature',\n    'naturist',\n    'nautical',\n    'navigate',\n    'navigator',\n    'navy',\n    'nearby',\n    'nearest',\n    'nearly',\n    'nearness',\n    'neatly',\n    'neatness',\n    'nebula',\n    'nebulizer',\n    'nectar',\n    'negate',\n    'negation',\n    'negative',\n    'neglector',\n    'negligee',\n    'negligent',\n    'negotiate',\n    'nemeses',\n    'nemesis',\n    'neon',\n    'nephew',\n    'nerd',\n    'nervous',\n    'nervy',\n    'nest',\n    'net',\n    'neurology',\n    'neuron',\n    'neurosis',\n    'neurotic',\n    'neuter',\n    'neutron',\n    'never',\n    'next',\n    'nibble',\n    'nickname',\n    'nicotine',\n    'niece',\n    'nifty',\n    'nimble',\n    'nimbly',\n    'nineteen',\n    'ninetieth',\n    'ninja',\n    'nintendo',\n    'ninth',\n    'nuclear',\n    'nuclei',\n    'nucleus',\n    'nugget',\n    'nullify',\n    'number',\n    'numbing',\n    'numbly',\n    'numbness',\n    'numeral',\n    'numerate',\n    'numerator',\n    'numeric',\n    'numerous',\n    'nuptials',\n    'nursery',\n    'nursing',\n    'nurture',\n    'nutcase',\n    'nutlike',\n    'nutmeg',\n    'nutrient',\n    'nutshell',\n    'nuttiness',\n    'nutty',\n    'nuzzle',\n    'nylon',\n    'oaf',\n    'oak',\n    'oasis',\n    'oat',\n    'obedience',\n    'obedient',\n    'obituary',\n    'object',\n    'obligate',\n    'obliged',\n    'oblivion',\n    'oblivious',\n    'oblong',\n    'obnoxious',\n    'oboe',\n    'obscure',\n    'obscurity',\n    'observant',\n    'observer',\n    'observing',\n    'obsessed',\n    'obsession',\n    'obsessive',\n    'obsolete',\n    'obstacle',\n    'obstinate',\n    'obstruct',\n    'obtain',\n    'obtrusive',\n    'obtuse',\n    'obvious',\n    'occultist',\n    'occupancy',\n    'occupant',\n    'occupier',\n    'occupy',\n    'ocean',\n    'ocelot',\n    'octagon',\n    'octane',\n    'october',\n    'octopus',\n    'ogle',\n    'oil',\n    'oink',\n    'ointment',\n    'okay',\n    'old',\n    'olive',\n    'olympics',\n    'omega',\n    'omen',\n    'ominous',\n    'omission',\n    'omit',\n    'omnivore',\n    'onboard',\n    'oncoming',\n    'ongoing',\n    'onion',\n    'online',\n    'onlooker',\n    'only',\n    'onscreen',\n    'onset',\n    'onshore',\n    'onslaught',\n    'onstage',\n    'onto',\n    'onward',\n    'onyx',\n    'oops',\n    'ooze',\n    'oozy',\n    'opacity',\n    'opal',\n    'open',\n    'operable',\n    'operate',\n    'operating',\n    'operation',\n    'operative',\n    'operator',\n    'opium',\n    'opossum',\n    'opponent',\n    'oppose',\n    'opposing',\n    'opposite',\n    'oppressed',\n    'oppressor',\n    'opt',\n    'opulently',\n    'osmosis',\n    'other',\n    'otter',\n    'ouch',\n    'ought',\n    'ounce',\n    'outage',\n    'outback',\n    'outbid',\n    'outboard',\n    'outbound',\n    'outbreak',\n    'outburst',\n    'outcast',\n    'outclass',\n    'outcome',\n    'outdated',\n    'outdoors',\n    'outer',\n    'outfield',\n    'outfit',\n    'outflank',\n    'outgoing',\n    'outgrow',\n    'outhouse',\n    'outing',\n    'outlast',\n    'outlet',\n    'outline',\n    'outlook',\n    'outlying',\n    'outmatch',\n    'outmost',\n    'outnumber',\n    'outplayed',\n    'outpost',\n    'outpour',\n    'output',\n    'outrage',\n    'outrank',\n    'outreach',\n    'outright',\n    'outscore',\n    'outsell',\n    'outshine',\n    'outshoot',\n    'outsider',\n    'outskirts',\n    'outsmart',\n    'outsource',\n    'outspoken',\n    'outtakes',\n    'outthink',\n    'outward',\n    'outweigh',\n    'outwit',\n    'oval',\n    'ovary',\n    'oven',\n    'overact',\n    'overall',\n    'overarch',\n    'overbid',\n    'overbill',\n    'overbite',\n    'overblown',\n    'overboard',\n    'overbook',\n    'overbuilt',\n    'overcast',\n    'overcoat',\n    'overcome',\n    'overcook',\n    'overcrowd',\n    'overdraft',\n    'overdrawn',\n    'overdress',\n    'overdrive',\n    'overdue',\n    'overeager',\n    'overeater',\n    'overexert',\n    'overfed',\n    'overfeed',\n    'overfill',\n    'overflow',\n    'overfull',\n    'overgrown',\n    'overhand',\n    'overhang',\n    'overhaul',\n    'overhead',\n    'overhear',\n    'overheat',\n    'overhung',\n    'overjoyed',\n    'overkill',\n    'overlabor',\n    'overlaid',\n    'overlap',\n    'overlay',\n    'overload',\n    'overlook',\n    'overlord',\n    'overlying',\n    'overnight',\n    'overpass',\n    'overpay',\n    'overplant',\n    'overplay',\n    'overpower',\n    'overprice',\n    'overrate',\n    'overreach',\n    'overreact',\n    'override',\n    'overripe',\n    'overrule',\n    'overrun',\n    'overshoot',\n    'overshot',\n    'oversight',\n    'oversized',\n    'oversleep',\n    'oversold',\n    'overspend',\n    'overstate',\n    'overstay',\n    'overstep',\n    'overstock',\n    'overstuff',\n    'oversweet',\n    'overtake',\n    'overthrow',\n    'overtime',\n    'overtly',\n    'overtone',\n    'overture',\n    'overturn',\n    'overuse',\n    'overvalue',\n    'overview',\n    'overwrite',\n    'owl',\n    'oxford',\n    'oxidant',\n    'oxidation',\n    'oxidize',\n    'oxidizing',\n    'oxygen',\n    'oxymoron',\n    'oyster',\n    'ozone',\n    'paced',\n    'pacemaker',\n    'pacific',\n    'pacifier',\n    'pacifism',\n    'pacifist',\n    'pacify',\n    'padded',\n    'padding',\n    'paddle',\n    'paddling',\n    'padlock',\n    'pagan',\n    'pager',\n    'paging',\n    'pajamas',\n    'palace',\n    'palatable',\n    'palm',\n    'palpable',\n    'palpitate',\n    'paltry',\n    'pampered',\n    'pamperer',\n    'pampers',\n    'pamphlet',\n    'panama',\n    'pancake',\n    'pancreas',\n    'panda',\n    'pandemic',\n    'pang',\n    'panhandle',\n    'panic',\n    'panning',\n    'panorama',\n    'panoramic',\n    'panther',\n    'pantomime',\n    'pantry',\n    'pants',\n    'pantyhose',\n    'paparazzi',\n    'papaya',\n    'paper',\n    'paprika',\n    'papyrus',\n    'parabola',\n    'parachute',\n    'parade',\n    'paradox',\n    'paragraph',\n    'parakeet',\n    'paralegal',\n    'paralyses',\n    'paralysis',\n    'paralyze',\n    'paramedic',\n    'parameter',\n    'paramount',\n    'parasail',\n    'parasite',\n    'parasitic',\n    'parcel',\n    'parched',\n    'parchment',\n    'pardon',\n    'parish',\n    'parka',\n    'parking',\n    'parkway',\n    'parlor',\n    'parmesan',\n    'parole',\n    'parrot',\n    'parsley',\n    'parsnip',\n    'partake',\n    'parted',\n    'parting',\n    'partition',\n    'partly',\n    'partner',\n    'partridge',\n    'party',\n    'passable',\n    'passably',\n    'passage',\n    'passcode',\n    'passenger',\n    'passerby',\n    'passing',\n    'passion',\n    'passive',\n    'passivism',\n    'passover',\n    'passport',\n    'password',\n    'pasta',\n    'pasted',\n    'pastel',\n    'pastime',\n    'pastor',\n    'pastrami',\n    'pasture',\n    'pasty',\n    'patchwork',\n    'patchy',\n    'paternal',\n    'paternity',\n    'path',\n    'patience',\n    'patient',\n    'patio',\n    'patriarch',\n    'patriot',\n    'patrol',\n    'patronage',\n    'patronize',\n    'pauper',\n    'pavement',\n    'paver',\n    'pavestone',\n    'pavilion',\n    'paving',\n    'pawing',\n    'payable',\n    'payback',\n    'paycheck',\n    'payday',\n    'payee',\n    'payer',\n    'paying',\n    'payment',\n    'payphone',\n    'payroll',\n    'pebble',\n    'pebbly',\n    'pecan',\n    'pectin',\n    'peculiar',\n    'peddling',\n    'pediatric',\n    'pedicure',\n    'pedigree',\n    'pedometer',\n    'pegboard',\n    'pelican',\n    'pellet',\n    'pelt',\n    'pelvis',\n    'penalize',\n    'penalty',\n    'pencil',\n    'pendant',\n    'pending',\n    'penholder',\n    'penknife',\n    'pennant',\n    'penniless',\n    'penny',\n    'penpal',\n    'pension',\n    'pentagon',\n    'pentagram',\n    'pep',\n    'perceive',\n    'percent',\n    'perch',\n    'percolate',\n    'perennial',\n    'perfected',\n    'perfectly',\n    'perfume',\n    'periscope',\n    'perish',\n    'perjurer',\n    'perjury',\n    'perkiness',\n    'perky',\n    'perm',\n    'peroxide',\n    'perpetual',\n    'perplexed',\n    'persecute',\n    'persevere',\n    'persuaded',\n    'persuader',\n    'pesky',\n    'peso',\n    'pessimism',\n    'pessimist',\n    'pester',\n    'pesticide',\n    'petal',\n    'petite',\n    'petition',\n    'petri',\n    'petroleum',\n    'petted',\n    'petticoat',\n    'pettiness',\n    'petty',\n    'petunia',\n    'phantom',\n    'phobia',\n    'phoenix',\n    'phonebook',\n    'phoney',\n    'phonics',\n    'phoniness',\n    'phony',\n    'phosphate',\n    'photo',\n    'phrase',\n    'phrasing',\n    'placard',\n    'placate',\n    'placidly',\n    'plank',\n    'planner',\n    'plant',\n    'plasma',\n    'plaster',\n    'plastic',\n    'plated',\n    'platform',\n    'plating',\n    'platinum',\n    'platonic',\n    'platter',\n    'platypus',\n    'plausible',\n    'plausibly',\n    'playable',\n    'playback',\n    'player',\n    'playful',\n    'playgroup',\n    'playhouse',\n    'playing',\n    'playlist',\n    'playmaker',\n    'playmate',\n    'playoff',\n    'playpen',\n    'playroom',\n    'playset',\n    'plaything',\n    'playtime',\n    'plaza',\n    'pleading',\n    'pleat',\n    'pledge',\n    'plentiful',\n    'plenty',\n    'plethora',\n    'plexiglas',\n    'pliable',\n    'plod',\n    'plop',\n    'plot',\n    'plow',\n    'ploy',\n    'pluck',\n    'plug',\n    'plunder',\n    'plunging',\n    'plural',\n    'plus',\n    'plutonium',\n    'plywood',\n    'poach',\n    'pod',\n    'poem',\n    'poet',\n    'pogo',\n    'pointed',\n    'pointer',\n    'pointing',\n    'pointless',\n    'pointy',\n    'poise',\n    'poison',\n    'poker',\n    'poking',\n    'polar',\n    'police',\n    'policy',\n    'polio',\n    'polish',\n    'politely',\n    'polka',\n    'polo',\n    'polyester',\n    'polygon',\n    'polygraph',\n    'polymer',\n    'poncho',\n    'pond',\n    'pony',\n    'popcorn',\n    'pope',\n    'poplar',\n    'popper',\n    'poppy',\n    'popsicle',\n    'populace',\n    'popular',\n    'populate',\n    'porcupine',\n    'pork',\n    'porous',\n    'porridge',\n    'portable',\n    'portal',\n    'portfolio',\n    'porthole',\n    'portion',\n    'portly',\n    'portside',\n    'poser',\n    'posh',\n    'posing',\n    'possible',\n    'possibly',\n    'possum',\n    'postage',\n    'postal',\n    'postbox',\n    'postcard',\n    'posted',\n    'poster',\n    'posting',\n    'postnasal',\n    'posture',\n    'postwar',\n    'pouch',\n    'pounce',\n    'pouncing',\n    'pound',\n    'pouring',\n    'pout',\n    'powdered',\n    'powdering',\n    'powdery',\n    'power',\n    'powwow',\n    'pox',\n    'praising',\n    'prance',\n    'prancing',\n    'pranker',\n    'prankish',\n    'prankster',\n    'prayer',\n    'praying',\n    'preacher',\n    'preaching',\n    'preachy',\n    'preamble',\n    'precinct',\n    'precise',\n    'precision',\n    'precook',\n    'precut',\n    'predator',\n    'predefine',\n    'predict',\n    'preface',\n    'prefix',\n    'preflight',\n    'preformed',\n    'pregame',\n    'pregnancy',\n    'pregnant',\n    'preheated',\n    'prelaunch',\n    'prelaw',\n    'prelude',\n    'premiere',\n    'premises',\n    'premium',\n    'prenatal',\n    'preoccupy',\n    'preorder',\n    'prepaid',\n    'prepay',\n    'preplan',\n    'preppy',\n    'preschool',\n    'prescribe',\n    'preseason',\n    'preset',\n    'preshow',\n    'president',\n    'presoak',\n    'press',\n    'presume',\n    'presuming',\n    'preteen',\n    'pretended',\n    'pretender',\n    'pretense',\n    'pretext',\n    'pretty',\n    'pretzel',\n    'prevail',\n    'prevalent',\n    'prevent',\n    'preview',\n    'previous',\n    'prewar',\n    'prewashed',\n    'prideful',\n    'pried',\n    'primal',\n    'primarily',\n    'primary',\n    'primate',\n    'primer',\n    'primp',\n    'princess',\n    'print',\n    'prior',\n    'prism',\n    'prison',\n    'prissy',\n    'pristine',\n    'privacy',\n    'private',\n    'privatize',\n    'prize',\n    'proactive',\n    'probable',\n    'probably',\n    'probation',\n    'probe',\n    'probing',\n    'probiotic',\n    'problem',\n    'procedure',\n    'process',\n    'proclaim',\n    'procreate',\n    'procurer',\n    'prodigal',\n    'prodigy',\n    'produce',\n    'product',\n    'profane',\n    'profanity',\n    'professed',\n    'professor',\n    'profile',\n    'profound',\n    'profusely',\n    'progeny',\n    'prognosis',\n    'program',\n    'progress',\n    'projector',\n    'prologue',\n    'prolonged',\n    'promenade',\n    'prominent',\n    'promoter',\n    'promotion',\n    'prompter',\n    'promptly',\n    'prone',\n    'prong',\n    'pronounce',\n    'pronto',\n    'proofing',\n    'proofread',\n    'proofs',\n    'propeller',\n    'properly',\n    'property',\n    'proponent',\n    'proposal',\n    'propose',\n    'props',\n    'prorate',\n    'protector',\n    'protegee',\n    'proton',\n    'prototype',\n    'protozoan',\n    'protract',\n    'protrude',\n    'proud',\n    'provable',\n    'proved',\n    'proven',\n    'provided',\n    'provider',\n    'providing',\n    'province',\n    'proving',\n    'provoke',\n    'provoking',\n    'provolone',\n    'prowess',\n    'prowler',\n    'prowling',\n    'proximity',\n    'proxy',\n    'prozac',\n    'prude',\n    'prudishly',\n    'prune',\n    'pruning',\n    'pry',\n    'psychic',\n    'public',\n    'publisher',\n    'pucker',\n    'pueblo',\n    'pug',\n    'pull',\n    'pulmonary',\n    'pulp',\n    'pulsate',\n    'pulse',\n    'pulverize',\n    'puma',\n    'pumice',\n    'pummel',\n    'punch',\n    'punctual',\n    'punctuate',\n    'punctured',\n    'pungent',\n    'punisher',\n    'punk',\n    'pupil',\n    'puppet',\n    'puppy',\n    'purchase',\n    'pureblood',\n    'purebred',\n    'purely',\n    'pureness',\n    'purgatory',\n    'purge',\n    'purging',\n    'purifier',\n    'purify',\n    'purist',\n    'puritan',\n    'purity',\n    'purple',\n    'purplish',\n    'purposely',\n    'purr',\n    'purse',\n    'pursuable',\n    'pursuant',\n    'pursuit',\n    'purveyor',\n    'pushcart',\n    'pushchair',\n    'pusher',\n    'pushiness',\n    'pushing',\n    'pushover',\n    'pushpin',\n    'pushup',\n    'pushy',\n    'putdown',\n    'putt',\n    'puzzle',\n    'puzzling',\n    'pyramid',\n    'pyromania',\n    'python',\n    'quack',\n    'quadrant',\n    'quail',\n    'quaintly',\n    'quake',\n    'quaking',\n    'qualified',\n    'qualifier',\n    'qualify',\n    'quality',\n    'qualm',\n    'quantum',\n    'quarrel',\n    'quarry',\n    'quartered',\n    'quarterly',\n    'quarters',\n    'quartet',\n    'quench',\n    'query',\n    'quicken',\n    'quickly',\n    'quickness',\n    'quicksand',\n    'quickstep',\n    'quiet',\n    'quill',\n    'quilt',\n    'quintet',\n    'quintuple',\n    'quirk',\n    'quit',\n    'quiver',\n    'quizzical',\n    'quotable',\n    'quotation',\n    'quote',\n    'rabid',\n    'race',\n    'racing',\n    'racism',\n    'rack',\n    'racoon',\n    'radar',\n    'radial',\n    'radiance',\n    'radiantly',\n    'radiated',\n    'radiation',\n    'radiator',\n    'radio',\n    'radish',\n    'raffle',\n    'raft',\n    'rage',\n    'ragged',\n    'raging',\n    'ragweed',\n    'raider',\n    'railcar',\n    'railing',\n    'railroad',\n    'railway',\n    'raisin',\n    'rake',\n    'raking',\n    'rally',\n    'ramble',\n    'rambling',\n    'ramp',\n    'ramrod',\n    'ranch',\n    'rancidity',\n    'random',\n    'ranged',\n    'ranger',\n    'ranging',\n    'ranked',\n    'ranking',\n    'ransack',\n    'ranting',\n    'rants',\n    'rare',\n    'rarity',\n    'rascal',\n    'rash',\n    'rasping',\n    'ravage',\n    'raven',\n    'ravine',\n    'raving',\n    'ravioli',\n    'ravishing',\n    'reabsorb',\n    'reach',\n    'reacquire',\n    'reaction',\n    'reactive',\n    'reactor',\n    'reaffirm',\n    'ream',\n    'reanalyze',\n    'reappear',\n    'reapply',\n    'reappoint',\n    'reapprove',\n    'rearrange',\n    'rearview',\n    'reason',\n    'reassign',\n    'reassure',\n    'reattach',\n    'reawake',\n    'rebalance',\n    'rebate',\n    'rebel',\n    'rebirth',\n    'reboot',\n    'reborn',\n    'rebound',\n    'rebuff',\n    'rebuild',\n    'rebuilt',\n    'reburial',\n    'rebuttal',\n    'recall',\n    'recant',\n    'recapture',\n    'recast',\n    'recede',\n    'recent',\n    'recess',\n    'recharger',\n    'recipient',\n    'recital',\n    'recite',\n    'reckless',\n    'reclaim',\n    'recliner',\n    'reclining',\n    'recluse',\n    'reclusive',\n    'recognize',\n    'recoil',\n    'recollect',\n    'recolor',\n    'reconcile',\n    'reconfirm',\n    'reconvene',\n    'recopy',\n    'record',\n    'recount',\n    'recoup',\n    'recovery',\n    'recreate',\n    'rectal',\n    'rectangle',\n    'rectified',\n    'rectify',\n    'recycled',\n    'recycler',\n    'recycling',\n    'reemerge',\n    'reenact',\n    'reenter',\n    'reentry',\n    'reexamine',\n    'referable',\n    'referee',\n    'reference',\n    'refill',\n    'refinance',\n    'refined',\n    'refinery',\n    'refining',\n    'refinish',\n    'reflected',\n    'reflector',\n    'reflex',\n    'reflux',\n    'refocus',\n    'refold',\n    'reforest',\n    'reformat',\n    'reformed',\n    'reformer',\n    'reformist',\n    'refract',\n    'refrain',\n    'refreeze',\n    'refresh',\n    'refried',\n    'refueling',\n    'refund',\n    'refurbish',\n    'refurnish',\n    'refusal',\n    'refuse',\n    'refusing',\n    'refutable',\n    'refute',\n    'regain',\n    'regalia',\n    'regally',\n    'reggae',\n    'regime',\n    'region',\n    'register',\n    'registrar',\n    'registry',\n    'regress',\n    'regretful',\n    'regroup',\n    'regular',\n    'regulate',\n    'regulator',\n    'rehab',\n    'reheat',\n    'rehire',\n    'rehydrate',\n    'reimburse',\n    'reissue',\n    'reiterate',\n    'rejoice',\n    'rejoicing',\n    'rejoin',\n    'rekindle',\n    'relapse',\n    'relapsing',\n    'relatable',\n    'related',\n    'relation',\n    'relative',\n    'relax',\n    'relay',\n    'relearn',\n    'release',\n    'relenting',\n    'reliable',\n    'reliably',\n    'reliance',\n    'reliant',\n    'relic',\n    'relieve',\n    'relieving',\n    'relight',\n    'relish',\n    'relive',\n    'reload',\n    'relocate',\n    'relock',\n    'reluctant',\n    'rely',\n    'remake',\n    'remark',\n    'remarry',\n    'rematch',\n    'remedial',\n    'remedy',\n    'remember',\n    'reminder',\n    'remindful',\n    'remission',\n    'remix',\n    'remnant',\n    'remodeler',\n    'remold',\n    'remorse',\n    'remote',\n    'removable',\n    'removal',\n    'removed',\n    'remover',\n    'removing',\n    'rename',\n    'renderer',\n    'rendering',\n    'rendition',\n    'renegade',\n    'renewable',\n    'renewably',\n    'renewal',\n    'renewed',\n    'renounce',\n    'renovate',\n    'renovator',\n    'rentable',\n    'rental',\n    'rented',\n    'renter',\n    'reoccupy',\n    'reoccur',\n    'reopen',\n    'reorder',\n    'repackage',\n    'repacking',\n    'repaint',\n    'repair',\n    'repave',\n    'repaying',\n    'repayment',\n    'repeal',\n    'repeated',\n    'repeater',\n    'repent',\n    'rephrase',\n    'replace',\n    'replay',\n    'replica',\n    'reply',\n    'reporter',\n    'repose',\n    'repossess',\n    'repost',\n    'repressed',\n    'reprimand',\n    'reprint',\n    'reprise',\n    'reproach',\n    'reprocess',\n    'reproduce',\n    'reprogram',\n    'reps',\n    'reptile',\n    'reptilian',\n    'repugnant',\n    'repulsion',\n    'repulsive',\n    'repurpose',\n    'reputable',\n    'reputably',\n    'request',\n    'require',\n    'requisite',\n    'reroute',\n    'rerun',\n    'resale',\n    'resample',\n    'rescuer',\n    'reseal',\n    'research',\n    'reselect',\n    'reseller',\n    'resemble',\n    'resend',\n    'resent',\n    'reset',\n    'reshape',\n    'reshoot',\n    'reshuffle',\n    'residence',\n    'residency',\n    'resident',\n    'residual',\n    'residue',\n    'resigned',\n    'resilient',\n    'resistant',\n    'resisting',\n    'resize',\n    'resolute',\n    'resolved',\n    'resonant',\n    'resonate',\n    'resort',\n    'resource',\n    'respect',\n    'resubmit',\n    'result',\n    'resume',\n    'resupply',\n    'resurface',\n    'resurrect',\n    'retail',\n    'retainer',\n    'retaining',\n    'retake',\n    'retaliate',\n    'retention',\n    'rethink',\n    'retinal',\n    'retired',\n    'retiree',\n    'retiring',\n    'retold',\n    'retool',\n    'retorted',\n    'retouch',\n    'retrace',\n    'retract',\n    'retrain',\n    'retread',\n    'retreat',\n    'retrial',\n    'retrieval',\n    'retriever',\n    'retry',\n    'return',\n    'retying',\n    'retype',\n    'reunion',\n    'reunite',\n    'reusable',\n    'reuse',\n    'reveal',\n    'reveler',\n    'revenge',\n    'revenue',\n    'reverb',\n    'revered',\n    'reverence',\n    'reverend',\n    'reversal',\n    'reverse',\n    'reversing',\n    'reversion',\n    'revert',\n    'revisable',\n    'revise',\n    'revision',\n    'revisit',\n    'revivable',\n    'revival',\n    'reviver',\n    'reviving',\n    'revocable',\n    'revoke',\n    'revolt',\n    'revolver',\n    'revolving',\n    'reward',\n    'rewash',\n    'rewind',\n    'rewire',\n    'reword',\n    'rework',\n    'rewrap',\n    'rewrite',\n    'rhyme',\n    'ribbon',\n    'ribcage',\n    'rice',\n    'riches',\n    'richly',\n    'richness',\n    'rickety',\n    'ricotta',\n    'riddance',\n    'ridden',\n    'ride',\n    'riding',\n    'rifling',\n    'rift',\n    'rigging',\n    'rigid',\n    'rigor',\n    'rimless',\n    'rimmed',\n    'rind',\n    'rink',\n    'rinse',\n    'rinsing',\n    'riot',\n    'ripcord',\n    'ripeness',\n    'ripening',\n    'ripping',\n    'ripple',\n    'rippling',\n    'riptide',\n    'rise',\n    'rising',\n    'risk',\n    'risotto',\n    'ritalin',\n    'ritzy',\n    'rival',\n    'riverbank',\n    'riverbed',\n    'riverboat',\n    'riverside',\n    'riveter',\n    'riveting',\n    'roamer',\n    'roaming',\n    'roast',\n    'robbing',\n    'robe',\n    'robin',\n    'robotics',\n    'robust',\n    'rockband',\n    'rocker',\n    'rocket',\n    'rockfish',\n    'rockiness',\n    'rocking',\n    'rocklike',\n    'rockslide',\n    'rockstar',\n    'rocky',\n    'rogue',\n    'roman',\n    'romp',\n    'rope',\n    'roping',\n    'roster',\n    'rosy',\n    'rotten',\n    'rotting',\n    'rotunda',\n    'roulette',\n    'rounding',\n    'roundish',\n    'roundness',\n    'roundup',\n    'roundworm',\n    'routine',\n    'routing',\n    'rover',\n    'roving',\n    'royal',\n    'rubbed',\n    'rubber',\n    'rubbing',\n    'rubble',\n    'rubdown',\n    'ruby',\n    'ruckus',\n    'rudder',\n    'rug',\n    'ruined',\n    'rule',\n    'rumble',\n    'rumbling',\n    'rummage',\n    'rumor',\n    'runaround',\n    'rundown',\n    'runner',\n    'running',\n    'runny',\n    'runt',\n    'runway',\n    'rupture',\n    'rural',\n    'ruse',\n    'rush',\n    'rust',\n    'rut',\n    'sabbath',\n    'sabotage',\n    'sacrament',\n    'sacred',\n    'sacrifice',\n    'sadden',\n    'saddlebag',\n    'saddled',\n    'saddling',\n    'sadly',\n    'sadness',\n    'safari',\n    'safeguard',\n    'safehouse',\n    'safely',\n    'safeness',\n    'saffron',\n    'saga',\n    'sage',\n    'sagging',\n    'saggy',\n    'said',\n    'saint',\n    'sake',\n    'salad',\n    'salami',\n    'salaried',\n    'salary',\n    'saline',\n    'salon',\n    'saloon',\n    'salsa',\n    'salt',\n    'salutary',\n    'salute',\n    'salvage',\n    'salvaging',\n    'salvation',\n    'same',\n    'sample',\n    'sampling',\n    'sanction',\n    'sanctity',\n    'sanctuary',\n    'sandal',\n    'sandbag',\n    'sandbank',\n    'sandbar',\n    'sandblast',\n    'sandbox',\n    'sanded',\n    'sandfish',\n    'sanding',\n    'sandlot',\n    'sandpaper',\n    'sandpit',\n    'sandstone',\n    'sandstorm',\n    'sandworm',\n    'sandy',\n    'sanitary',\n    'sanitizer',\n    'sank',\n    'santa',\n    'sapling',\n    'sappiness',\n    'sappy',\n    'sarcasm',\n    'sarcastic',\n    'sardine',\n    'sash',\n    'sasquatch',\n    'sassy',\n    'satchel',\n    'satiable',\n    'satin',\n    'satirical',\n    'satisfied',\n    'satisfy',\n    'saturate',\n    'saturday',\n    'sauciness',\n    'saucy',\n    'sauna',\n    'savage',\n    'savanna',\n    'saved',\n    'savings',\n    'savior',\n    'savor',\n    'saxophone',\n    'say',\n    'scabbed',\n    'scabby',\n    'scalded',\n    'scalding',\n    'scale',\n    'scaling',\n    'scallion',\n    'scallop',\n    'scalping',\n    'scam',\n    'scandal',\n    'scanner',\n    'scanning',\n    'scant',\n    'scapegoat',\n    'scarce',\n    'scarcity',\n    'scarecrow',\n    'scared',\n    'scarf',\n    'scarily',\n    'scariness',\n    'scarring',\n    'scary',\n    'scavenger',\n    'scenic',\n    'schedule',\n    'schematic',\n    'scheme',\n    'scheming',\n    'schilling',\n    'schnapps',\n    'scholar',\n    'science',\n    'scientist',\n    'scion',\n    'scoff',\n    'scolding',\n    'scone',\n    'scoop',\n    'scooter',\n    'scope',\n    'scorch',\n    'scorebook',\n    'scorecard',\n    'scored',\n    'scoreless',\n    'scorer',\n    'scoring',\n    'scorn',\n    'scorpion',\n    'scotch',\n    'scoundrel',\n    'scoured',\n    'scouring',\n    'scouting',\n    'scouts',\n    'scowling',\n    'scrabble',\n    'scraggly',\n    'scrambled',\n    'scrambler',\n    'scrap',\n    'scratch',\n    'scrawny',\n    'screen',\n    'scribble',\n    'scribe',\n    'scribing',\n    'scrimmage',\n    'script',\n    'scroll',\n    'scrooge',\n    'scrounger',\n    'scrubbed',\n    'scrubber',\n    'scruffy',\n    'scrunch',\n    'scrutiny',\n    'scuba',\n    'scuff',\n    'sculptor',\n    'sculpture',\n    'scurvy',\n    'scuttle',\n    'secluded',\n    'secluding',\n    'seclusion',\n    'second',\n    'secrecy',\n    'secret',\n    'sectional',\n    'sector',\n    'secular',\n    'securely',\n    'security',\n    'sedan',\n    'sedate',\n    'sedation',\n    'sedative',\n    'sediment',\n    'seduce',\n    'seducing',\n    'segment',\n    'seismic',\n    'seizing',\n    'seldom',\n    'selected',\n    'selection',\n    'selective',\n    'selector',\n    'self',\n    'seltzer',\n    'semantic',\n    'semester',\n    'semicolon',\n    'semifinal',\n    'seminar',\n    'semisoft',\n    'semisweet',\n    'senate',\n    'senator',\n    'send',\n    'senior',\n    'senorita',\n    'sensation',\n    'sensitive',\n    'sensitize',\n    'sensually',\n    'sensuous',\n    'sepia',\n    'september',\n    'septic',\n    'septum',\n    'sequel',\n    'sequence',\n    'sequester',\n    'series',\n    'sermon',\n    'serotonin',\n    'serpent',\n    'serrated',\n    'serve',\n    'service',\n    'serving',\n    'sesame',\n    'sessions',\n    'setback',\n    'setting',\n    'settle',\n    'settling',\n    'setup',\n    'sevenfold',\n    'seventeen',\n    'seventh',\n    'seventy',\n    'severity',\n    'shabby',\n    'shack',\n    'shaded',\n    'shadily',\n    'shadiness',\n    'shading',\n    'shadow',\n    'shady',\n    'shaft',\n    'shakable',\n    'shakily',\n    'shakiness',\n    'shaking',\n    'shaky',\n    'shale',\n    'shallot',\n    'shallow',\n    'shame',\n    'shampoo',\n    'shamrock',\n    'shank',\n    'shanty',\n    'shape',\n    'shaping',\n    'share',\n    'sharpener',\n    'sharper',\n    'sharpie',\n    'sharply',\n    'sharpness',\n    'shawl',\n    'sheath',\n    'shed',\n    'sheep',\n    'sheet',\n    'shelf',\n    'shell',\n    'shelter',\n    'shelve',\n    'shelving',\n    'sherry',\n    'shield',\n    'shifter',\n    'shifting',\n    'shiftless',\n    'shifty',\n    'shimmer',\n    'shimmy',\n    'shindig',\n    'shine',\n    'shingle',\n    'shininess',\n    'shining',\n    'shiny',\n    'ship',\n    'shirt',\n    'shivering',\n    'shock',\n    'shone',\n    'shoplift',\n    'shopper',\n    'shopping',\n    'shoptalk',\n    'shore',\n    'shortage',\n    'shortcake',\n    'shortcut',\n    'shorten',\n    'shorter',\n    'shorthand',\n    'shortlist',\n    'shortly',\n    'shortness',\n    'shorts',\n    'shortwave',\n    'shorty',\n    'shout',\n    'shove',\n    'showbiz',\n    'showcase',\n    'showdown',\n    'shower',\n    'showgirl',\n    'showing',\n    'showman',\n    'shown',\n    'showoff',\n    'showpiece',\n    'showplace',\n    'showroom',\n    'showy',\n    'shrank',\n    'shrapnel',\n    'shredder',\n    'shredding',\n    'shrewdly',\n    'shriek',\n    'shrill',\n    'shrimp',\n    'shrine',\n    'shrink',\n    'shrivel',\n    'shrouded',\n    'shrubbery',\n    'shrubs',\n    'shrug',\n    'shrunk',\n    'shucking',\n    'shudder',\n    'shuffle',\n    'shuffling',\n    'shun',\n    'shush',\n    'shut',\n    'shy',\n    'siamese',\n    'siberian',\n    'sibling',\n    'siding',\n    'sierra',\n    'siesta',\n    'sift',\n    'sighing',\n    'silenced',\n    'silencer',\n    'silent',\n    'silica',\n    'silicon',\n    'silk',\n    'silliness',\n    'silly',\n    'silo',\n    'silt',\n    'silver',\n    'similarly',\n    'simile',\n    'simmering',\n    'simple',\n    'simplify',\n    'simply',\n    'sincere',\n    'sincerity',\n    'singer',\n    'singing',\n    'single',\n    'singular',\n    'sinister',\n    'sinless',\n    'sinner',\n    'sinuous',\n    'sip',\n    'siren',\n    'sister',\n    'sitcom',\n    'sitter',\n    'sitting',\n    'situated',\n    'situation',\n    'sixfold',\n    'sixteen',\n    'sixth',\n    'sixties',\n    'sixtieth',\n    'sixtyfold',\n    'sizable',\n    'sizably',\n    'size',\n    'sizing',\n    'sizzle',\n    'sizzling',\n    'skater',\n    'skating',\n    'skedaddle',\n    'skeletal',\n    'skeleton',\n    'skeptic',\n    'sketch',\n    'skewed',\n    'skewer',\n    'skid',\n    'skied',\n    'skier',\n    'skies',\n    'skiing',\n    'skilled',\n    'skillet',\n    'skillful',\n    'skimmed',\n    'skimmer',\n    'skimming',\n    'skimpily',\n    'skincare',\n    'skinhead',\n    'skinless',\n    'skinning',\n    'skinny',\n    'skintight',\n    'skipper',\n    'skipping',\n    'skirmish',\n    'skirt',\n    'skittle',\n    'skydiver',\n    'skylight',\n    'skyline',\n    'skype',\n    'skyrocket',\n    'skyward',\n    'slab',\n    'slacked',\n    'slacker',\n    'slacking',\n    'slackness',\n    'slacks',\n    'slain',\n    'slam',\n    'slander',\n    'slang',\n    'slapping',\n    'slapstick',\n    'slashed',\n    'slashing',\n    'slate',\n    'slather',\n    'slaw',\n    'sled',\n    'sleek',\n    'sleep',\n    'sleet',\n    'sleeve',\n    'slept',\n    'sliceable',\n    'sliced',\n    'slicer',\n    'slicing',\n    'slick',\n    'slider',\n    'slideshow',\n    'sliding',\n    'slighted',\n    'slighting',\n    'slightly',\n    'slimness',\n    'slimy',\n    'slinging',\n    'slingshot',\n    'slinky',\n    'slip',\n    'slit',\n    'sliver',\n    'slobbery',\n    'slogan',\n    'sloped',\n    'sloping',\n    'sloppily',\n    'sloppy',\n    'slot',\n    'slouching',\n    'slouchy',\n    'sludge',\n    'slug',\n    'slum',\n    'slurp',\n    'slush',\n    'sly',\n    'small',\n    'smartly',\n    'smartness',\n    'smasher',\n    'smashing',\n    'smashup',\n    'smell',\n    'smelting',\n    'smile',\n    'smilingly',\n    'smirk',\n    'smite',\n    'smith',\n    'smitten',\n    'smock',\n    'smog',\n    'smoked',\n    'smokeless',\n    'smokiness',\n    'smoking',\n    'smoky',\n    'smolder',\n    'smooth',\n    'smother',\n    'smudge',\n    'smudgy',\n    'smuggler',\n    'smuggling',\n    'smugly',\n    'smugness',\n    'snack',\n    'snagged',\n    'snaking',\n    'snap',\n    'snare',\n    'snarl',\n    'snazzy',\n    'sneak',\n    'sneer',\n    'sneeze',\n    'sneezing',\n    'snide',\n    'sniff',\n    'snippet',\n    'snipping',\n    'snitch',\n    'snooper',\n    'snooze',\n    'snore',\n    'snoring',\n    'snorkel',\n    'snort',\n    'snout',\n    'snowbird',\n    'snowboard',\n    'snowbound',\n    'snowcap',\n    'snowdrift',\n    'snowdrop',\n    'snowfall',\n    'snowfield',\n    'snowflake',\n    'snowiness',\n    'snowless',\n    'snowman',\n    'snowplow',\n    'snowshoe',\n    'snowstorm',\n    'snowsuit',\n    'snowy',\n    'snub',\n    'snuff',\n    'snuggle',\n    'snugly',\n    'snugness',\n    'speak',\n    'spearfish',\n    'spearhead',\n    'spearman',\n    'spearmint',\n    'species',\n    'specimen',\n    'specked',\n    'speckled',\n    'specks',\n    'spectacle',\n    'spectator',\n    'spectrum',\n    'speculate',\n    'speech',\n    'speed',\n    'spellbind',\n    'speller',\n    'spelling',\n    'spendable',\n    'spender',\n    'spending',\n    'spent',\n    'spew',\n    'sphere',\n    'spherical',\n    'sphinx',\n    'spider',\n    'spied',\n    'spiffy',\n    'spill',\n    'spilt',\n    'spinach',\n    'spinal',\n    'spindle',\n    'spinner',\n    'spinning',\n    'spinout',\n    'spinster',\n    'spiny',\n    'spiral',\n    'spirited',\n    'spiritism',\n    'spirits',\n    'spiritual',\n    'splashed',\n    'splashing',\n    'splashy',\n    'splatter',\n    'spleen',\n    'splendid',\n    'splendor',\n    'splice',\n    'splicing',\n    'splinter',\n    'splotchy',\n    'splurge',\n    'spoilage',\n    'spoiled',\n    'spoiler',\n    'spoiling',\n    'spoils',\n    'spoken',\n    'spokesman',\n    'sponge',\n    'spongy',\n    'sponsor',\n    'spoof',\n    'spookily',\n    'spooky',\n    'spool',\n    'spoon',\n    'spore',\n    'sporting',\n    'sports',\n    'sporty',\n    'spotless',\n    'spotlight',\n    'spotted',\n    'spotter',\n    'spotting',\n    'spotty',\n    'spousal',\n    'spouse',\n    'spout',\n    'sprain',\n    'sprang',\n    'sprawl',\n    'spray',\n    'spree',\n    'sprig',\n    'spring',\n    'sprinkled',\n    'sprinkler',\n    'sprint',\n    'sprite',\n    'sprout',\n    'spruce',\n    'sprung',\n    'spry',\n    'spud',\n    'spur',\n    'sputter',\n    'spyglass',\n    'squabble',\n    'squad',\n    'squall',\n    'squander',\n    'squash',\n    'squatted',\n    'squatter',\n    'squatting',\n    'squeak',\n    'squealer',\n    'squealing',\n    'squeamish',\n    'squeegee',\n    'squeeze',\n    'squeezing',\n    'squid',\n    'squiggle',\n    'squiggly',\n    'squint',\n    'squire',\n    'squirt',\n    'squishier',\n    'squishy',\n    'stability',\n    'stabilize',\n    'stable',\n    'stack',\n    'stadium',\n    'staff',\n    'stage',\n    'staging',\n    'stagnant',\n    'stagnate',\n    'stainable',\n    'stained',\n    'staining',\n    'stainless',\n    'stalemate',\n    'staleness',\n    'stalling',\n    'stallion',\n    'stamina',\n    'stammer',\n    'stamp',\n    'stand',\n    'stank',\n    'staple',\n    'stapling',\n    'starboard',\n    'starch',\n    'stardom',\n    'stardust',\n    'starfish',\n    'stargazer',\n    'staring',\n    'stark',\n    'starless',\n    'starlet',\n    'starlight',\n    'starlit',\n    'starring',\n    'starry',\n    'starship',\n    'starter',\n    'starting',\n    'startle',\n    'startling',\n    'startup',\n    'starved',\n    'starving',\n    'stash',\n    'state',\n    'static',\n    'statistic',\n    'statue',\n    'stature',\n    'status',\n    'statute',\n    'statutory',\n    'staunch',\n    'stays',\n    'steadfast',\n    'steadier',\n    'steadily',\n    'steadying',\n    'steam',\n    'steed',\n    'steep',\n    'steerable',\n    'steering',\n    'steersman',\n    'stegosaur',\n    'stellar',\n    'stem',\n    'stench',\n    'stencil',\n    'step',\n    'stereo',\n    'sterile',\n    'sterility',\n    'sterilize',\n    'sterling',\n    'sternness',\n    'sternum',\n    'stew',\n    'stick',\n    'stiffen',\n    'stiffly',\n    'stiffness',\n    'stifle',\n    'stifling',\n    'stillness',\n    'stilt',\n    'stimulant',\n    'stimulate',\n    'stimuli',\n    'stimulus',\n    'stinger',\n    'stingily',\n    'stinging',\n    'stingray',\n    'stingy',\n    'stinking',\n    'stinky',\n    'stipend',\n    'stipulate',\n    'stir',\n    'stitch',\n    'stock',\n    'stoic',\n    'stoke',\n    'stole',\n    'stomp',\n    'stonewall',\n    'stoneware',\n    'stonework',\n    'stoning',\n    'stony',\n    'stood',\n    'stooge',\n    'stool',\n    'stoop',\n    'stoplight',\n    'stoppable',\n    'stoppage',\n    'stopped',\n    'stopper',\n    'stopping',\n    'stopwatch',\n    'storable',\n    'storage',\n    'storeroom',\n    'storewide',\n    'storm',\n    'stout',\n    'stove',\n    'stowaway',\n    'stowing',\n    'straddle',\n    'straggler',\n    'strained',\n    'strainer',\n    'straining',\n    'strangely',\n    'stranger',\n    'strangle',\n    'strategic',\n    'strategy',\n    'stratus',\n    'straw',\n    'stray',\n    'streak',\n    'stream',\n    'street',\n    'strength',\n    'strenuous',\n    'strep',\n    'stress',\n    'stretch',\n    'strewn',\n    'stricken',\n    'strict',\n    'stride',\n    'strife',\n    'strike',\n    'striking',\n    'strive',\n    'striving',\n    'strobe',\n    'strode',\n    'stroller',\n    'strongbox',\n    'strongly',\n    'strongman',\n    'struck',\n    'structure',\n    'strudel',\n    'struggle',\n    'strum',\n    'strung',\n    'strut',\n    'stubbed',\n    'stubble',\n    'stubbly',\n    'stubborn',\n    'stucco',\n    'stuck',\n    'student',\n    'studied',\n    'studio',\n    'study',\n    'stuffed',\n    'stuffing',\n    'stuffy',\n    'stumble',\n    'stumbling',\n    'stump',\n    'stung',\n    'stunned',\n    'stunner',\n    'stunning',\n    'stunt',\n    'stupor',\n    'sturdily',\n    'sturdy',\n    'styling',\n    'stylishly',\n    'stylist',\n    'stylized',\n    'stylus',\n    'suave',\n    'subarctic',\n    'subatomic',\n    'subdivide',\n    'subdued',\n    'subduing',\n    'subfloor',\n    'subgroup',\n    'subheader',\n    'subject',\n    'sublease',\n    'sublet',\n    'sublevel',\n    'sublime',\n    'submarine',\n    'submerge',\n    'submersed',\n    'submitter',\n    'subpanel',\n    'subpar',\n    'subplot',\n    'subprime',\n    'subscribe',\n    'subscript',\n    'subsector',\n    'subside',\n    'subsiding',\n    'subsidize',\n    'subsidy',\n    'subsoil',\n    'subsonic',\n    'substance',\n    'subsystem',\n    'subtext',\n    'subtitle',\n    'subtly',\n    'subtotal',\n    'subtract',\n    'subtype',\n    'suburb',\n    'subway',\n    'subwoofer',\n    'subzero',\n    'succulent',\n    'such',\n    'suction',\n    'sudden',\n    'sudoku',\n    'suds',\n    'sufferer',\n    'suffering',\n    'suffice',\n    'suffix',\n    'suffocate',\n    'suffrage',\n    'sugar',\n    'suggest',\n    'suing',\n    'suitable',\n    'suitably',\n    'suitcase',\n    'suitor',\n    'sulfate',\n    'sulfide',\n    'sulfite',\n    'sulfur',\n    'sulk',\n    'sullen',\n    'sulphate',\n    'sulphuric',\n    'sultry',\n    'superbowl',\n    'superglue',\n    'superhero',\n    'superior',\n    'superjet',\n    'superman',\n    'supermom',\n    'supernova',\n    'supervise',\n    'supper',\n    'supplier',\n    'supply',\n    'support',\n    'supremacy',\n    'supreme',\n    'surcharge',\n    'surely',\n    'sureness',\n    'surface',\n    'surfacing',\n    'surfboard',\n    'surfer',\n    'surgery',\n    'surgical',\n    'surging',\n    'surname',\n    'surpass',\n    'surplus',\n    'surprise',\n    'surreal',\n    'surrender',\n    'surrogate',\n    'surround',\n    'survey',\n    'survival',\n    'survive',\n    'surviving',\n    'survivor',\n    'sushi',\n    'suspect',\n    'suspend',\n    'suspense',\n    'sustained',\n    'sustainer',\n    'swab',\n    'swaddling',\n    'swagger',\n    'swampland',\n    'swan',\n    'swapping',\n    'swarm',\n    'sway',\n    'swear',\n    'sweat',\n    'sweep',\n    'swell',\n    'swept',\n    'swerve',\n    'swifter',\n    'swiftly',\n    'swiftness',\n    'swimmable',\n    'swimmer',\n    'swimming',\n    'swimsuit',\n    'swimwear',\n    'swinger',\n    'swinging',\n    'swipe',\n    'swirl',\n    'switch',\n    'swivel',\n    'swizzle',\n    'swooned',\n    'swoop',\n    'swoosh',\n    'swore',\n    'sworn',\n    'swung',\n    'sycamore',\n    'sympathy',\n    'symphonic',\n    'symphony',\n    'symptom',\n    'synapse',\n    'syndrome',\n    'synergy',\n    'synopses',\n    'synopsis',\n    'synthesis',\n    'synthetic',\n    'syrup',\n    'system',\n    't-shirt',\n    'tabasco',\n    'tabby',\n    'tableful',\n    'tables',\n    'tablet',\n    'tableware',\n    'tabloid',\n    'tackiness',\n    'tacking',\n    'tackle',\n    'tackling',\n    'tacky',\n    'taco',\n    'tactful',\n    'tactical',\n    'tactics',\n    'tactile',\n    'tactless',\n    'tadpole',\n    'taekwondo',\n    'tag',\n    'tainted',\n    'take',\n    'taking',\n    'talcum',\n    'talisman',\n    'tall',\n    'talon',\n    'tamale',\n    'tameness',\n    'tamer',\n    'tamper',\n    'tank',\n    'tanned',\n    'tannery',\n    'tanning',\n    'tantrum',\n    'tapeless',\n    'tapered',\n    'tapering',\n    'tapestry',\n    'tapioca',\n    'tapping',\n    'taps',\n    'tarantula',\n    'target',\n    'tarmac',\n    'tarnish',\n    'tarot',\n    'tartar',\n    'tartly',\n    'tartness',\n    'task',\n    'tassel',\n    'taste',\n    'tastiness',\n    'tasting',\n    'tasty',\n    'tattered',\n    'tattle',\n    'tattling',\n    'tattoo',\n    'taunt',\n    'tavern',\n    'thank',\n    'that',\n    'thaw',\n    'theater',\n    'theatrics',\n    'thee',\n    'theft',\n    'theme',\n    'theology',\n    'theorize',\n    'thermal',\n    'thermos',\n    'thesaurus',\n    'these',\n    'thesis',\n    'thespian',\n    'thicken',\n    'thicket',\n    'thickness',\n    'thieving',\n    'thievish',\n    'thigh',\n    'thimble',\n    'thing',\n    'think',\n    'thinly',\n    'thinner',\n    'thinness',\n    'thinning',\n    'thirstily',\n    'thirsting',\n    'thirsty',\n    'thirteen',\n    'thirty',\n    'thong',\n    'thorn',\n    'those',\n    'thousand',\n    'thrash',\n    'thread',\n    'threaten',\n    'threefold',\n    'thrift',\n    'thrill',\n    'thrive',\n    'thriving',\n    'throat',\n    'throbbing',\n    'throng',\n    'throttle',\n    'throwaway',\n    'throwback',\n    'thrower',\n    'throwing',\n    'thud',\n    'thumb',\n    'thumping',\n    'thursday',\n    'thus',\n    'thwarting',\n    'thyself',\n    'tiara',\n    'tibia',\n    'tidal',\n    'tidbit',\n    'tidiness',\n    'tidings',\n    'tidy',\n    'tiger',\n    'tighten',\n    'tightly',\n    'tightness',\n    'tightrope',\n    'tightwad',\n    'tigress',\n    'tile',\n    'tiling',\n    'till',\n    'tilt',\n    'timid',\n    'timing',\n    'timothy',\n    'tinderbox',\n    'tinfoil',\n    'tingle',\n    'tingling',\n    'tingly',\n    'tinker',\n    'tinkling',\n    'tinsel',\n    'tinsmith',\n    'tint',\n    'tinwork',\n    'tiny',\n    'tipoff',\n    'tipped',\n    'tipper',\n    'tipping',\n    'tiptoeing',\n    'tiptop',\n    'tiring',\n    'tissue',\n    'trace',\n    'tracing',\n    'track',\n    'traction',\n    'tractor',\n    'trade',\n    'trading',\n    'tradition',\n    'traffic',\n    'tragedy',\n    'trailing',\n    'trailside',\n    'train',\n    'traitor',\n    'trance',\n    'tranquil',\n    'transfer',\n    'transform',\n    'translate',\n    'transpire',\n    'transport',\n    'transpose',\n    'trapdoor',\n    'trapeze',\n    'trapezoid',\n    'trapped',\n    'trapper',\n    'trapping',\n    'traps',\n    'trash',\n    'travel',\n    'traverse',\n    'travesty',\n    'tray',\n    'treachery',\n    'treading',\n    'treadmill',\n    'treason',\n    'treat',\n    'treble',\n    'tree',\n    'trekker',\n    'tremble',\n    'trembling',\n    'tremor',\n    'trench',\n    'trend',\n    'trespass',\n    'triage',\n    'trial',\n    'triangle',\n    'tribesman',\n    'tribunal',\n    'tribune',\n    'tributary',\n    'tribute',\n    'triceps',\n    'trickery',\n    'trickily',\n    'tricking',\n    'trickle',\n    'trickster',\n    'tricky',\n    'tricolor',\n    'tricycle',\n    'trident',\n    'tried',\n    'trifle',\n    'trifocals',\n    'trillion',\n    'trilogy',\n    'trimester',\n    'trimmer',\n    'trimming',\n    'trimness',\n    'trinity',\n    'trio',\n    'tripod',\n    'tripping',\n    'triumph',\n    'trivial',\n    'trodden',\n    'trolling',\n    'trombone',\n    'trophy',\n    'tropical',\n    'tropics',\n    'trouble',\n    'troubling',\n    'trough',\n    'trousers',\n    'trout',\n    'trowel',\n    'truce',\n    'truck',\n    'truffle',\n    'trump',\n    'trunks',\n    'trustable',\n    'trustee',\n    'trustful',\n    'trusting',\n    'trustless',\n    'truth',\n    'try',\n    'tubby',\n    'tubeless',\n    'tubular',\n    'tucking',\n    'tuesday',\n    'tug',\n    'tuition',\n    'tulip',\n    'tumble',\n    'tumbling',\n    'tummy',\n    'turban',\n    'turbine',\n    'turbofan',\n    'turbojet',\n    'turbulent',\n    'turf',\n    'turkey',\n    'turmoil',\n    'turret',\n    'turtle',\n    'tusk',\n    'tutor',\n    'tutu',\n    'tux',\n    'tweak',\n    'tweed',\n    'tweet',\n    'tweezers',\n    'twelve',\n    'twentieth',\n    'twenty',\n    'twerp',\n    'twice',\n    'twiddle',\n    'twiddling',\n    'twig',\n    'twilight',\n    'twine',\n    'twins',\n    'twirl',\n    'twistable',\n    'twisted',\n    'twister',\n    'twisting',\n    'twisty',\n    'twitch',\n    'twitter',\n    'tycoon',\n    'tying',\n    'tyke',\n    'udder',\n    'ultimate',\n    'ultimatum',\n    'ultra',\n    'umbilical',\n    'umbrella',\n    'umpire',\n    'unabashed',\n    'unable',\n    'unadorned',\n    'unadvised',\n    'unafraid',\n    'unaired',\n    'unaligned',\n    'unaltered',\n    'unarmored',\n    'unashamed',\n    'unaudited',\n    'unawake',\n    'unaware',\n    'unbaked',\n    'unbalance',\n    'unbeaten',\n    'unbend',\n    'unbent',\n    'unbiased',\n    'unbitten',\n    'unblended',\n    'unblessed',\n    'unblock',\n    'unbolted',\n    'unbounded',\n    'unboxed',\n    'unbraided',\n    'unbridle',\n    'unbroken',\n    'unbuckled',\n    'unbundle',\n    'unburned',\n    'unbutton',\n    'uncanny',\n    'uncapped',\n    'uncaring',\n    'uncertain',\n    'unchain',\n    'unchanged',\n    'uncharted',\n    'uncheck',\n    'uncivil',\n    'unclad',\n    'unclaimed',\n    'unclamped',\n    'unclasp',\n    'uncle',\n    'unclip',\n    'uncloak',\n    'unclog',\n    'unclothed',\n    'uncoated',\n    'uncoiled',\n    'uncolored',\n    'uncombed',\n    'uncommon',\n    'uncooked',\n    'uncork',\n    'uncorrupt',\n    'uncounted',\n    'uncouple',\n    'uncouth',\n    'uncover',\n    'uncross',\n    'uncrown',\n    'uncrushed',\n    'uncured',\n    'uncurious',\n    'uncurled',\n    'uncut',\n    'undamaged',\n    'undated',\n    'undaunted',\n    'undead',\n    'undecided',\n    'undefined',\n    'underage',\n    'underarm',\n    'undercoat',\n    'undercook',\n    'undercut',\n    'underdog',\n    'underdone',\n    'underfed',\n    'underfeed',\n    'underfoot',\n    'undergo',\n    'undergrad',\n    'underhand',\n    'underline',\n    'underling',\n    'undermine',\n    'undermost',\n    'underpaid',\n    'underpass',\n    'underpay',\n    'underrate',\n    'undertake',\n    'undertone',\n    'undertook',\n    'undertow',\n    'underuse',\n    'underwear',\n    'underwent',\n    'underwire',\n    'undesired',\n    'undiluted',\n    'undivided',\n    'undocked',\n    'undoing',\n    'undone',\n    'undrafted',\n    'undress',\n    'undrilled',\n    'undusted',\n    'undying',\n    'unearned',\n    'unearth',\n    'unease',\n    'uneasily',\n    'uneasy',\n    'uneatable',\n    'uneaten',\n    'unedited',\n    'unelected',\n    'unending',\n    'unengaged',\n    'unenvied',\n    'unequal',\n    'unethical',\n    'uneven',\n    'unexpired',\n    'unexposed',\n    'unfailing',\n    'unfair',\n    'unfasten',\n    'unfazed',\n    'unfeeling',\n    'unfiled',\n    'unfilled',\n    'unfitted',\n    'unfitting',\n    'unfixable',\n    'unfixed',\n    'unflawed',\n    'unfocused',\n    'unfold',\n    'unfounded',\n    'unframed',\n    'unfreeze',\n    'unfrosted',\n    'unfrozen',\n    'unfunded',\n    'unglazed',\n    'ungloved',\n    'unglue',\n    'ungodly',\n    'ungraded',\n    'ungreased',\n    'unguarded',\n    'unguided',\n    'unhappily',\n    'unhappy',\n    'unharmed',\n    'unhealthy',\n    'unheard',\n    'unhearing',\n    'unheated',\n    'unhelpful',\n    'unhidden',\n    'unhinge',\n    'unhitched',\n    'unholy',\n    'unhook',\n    'unicorn',\n    'unicycle',\n    'unified',\n    'unifier',\n    'uniformed',\n    'uniformly',\n    'unify',\n    'unimpeded',\n    'uninjured',\n    'uninstall',\n    'uninsured',\n    'uninvited',\n    'union',\n    'uniquely',\n    'unisexual',\n    'unison',\n    'unissued',\n    'unit',\n    'universal',\n    'universe',\n    'unjustly',\n    'unkempt',\n    'unkind',\n    'unknotted',\n    'unknowing',\n    'unknown',\n    'unlaced',\n    'unlatch',\n    'unlawful',\n    'unleaded',\n    'unlearned',\n    'unleash',\n    'unless',\n    'unleveled',\n    'unlighted',\n    'unlikable',\n    'unlimited',\n    'unlined',\n    'unlinked',\n    'unlisted',\n    'unlit',\n    'unlivable',\n    'unloaded',\n    'unloader',\n    'unlocked',\n    'unlocking',\n    'unlovable',\n    'unloved',\n    'unlovely',\n    'unloving',\n    'unluckily',\n    'unlucky',\n    'unmade',\n    'unmanaged',\n    'unmanned',\n    'unmapped',\n    'unmarked',\n    'unmasked',\n    'unmasking',\n    'unmatched',\n    'unmindful',\n    'unmixable',\n    'unmixed',\n    'unmolded',\n    'unmoral',\n    'unmovable',\n    'unmoved',\n    'unmoving',\n    'unnamable',\n    'unnamed',\n    'unnatural',\n    'unneeded',\n    'unnerve',\n    'unnerving',\n    'unnoticed',\n    'unopened',\n    'unopposed',\n    'unpack',\n    'unpadded',\n    'unpaid',\n    'unpainted',\n    'unpaired',\n    'unpaved',\n    'unpeeled',\n    'unpicked',\n    'unpiloted',\n    'unpinned',\n    'unplanned',\n    'unplanted',\n    'unpleased',\n    'unpledged',\n    'unplowed',\n    'unplug',\n    'unpopular',\n    'unproven',\n    'unquote',\n    'unranked',\n    'unrated',\n    'unraveled',\n    'unreached',\n    'unread',\n    'unreal',\n    'unreeling',\n    'unrefined',\n    'unrelated',\n    'unrented',\n    'unrest',\n    'unretired',\n    'unrevised',\n    'unrigged',\n    'unripe',\n    'unrivaled',\n    'unroasted',\n    'unrobed',\n    'unroll',\n    'unruffled',\n    'unruly',\n    'unrushed',\n    'unsaddle',\n    'unsafe',\n    'unsaid',\n    'unsalted',\n    'unsaved',\n    'unsavory',\n    'unscathed',\n    'unscented',\n    'unscrew',\n    'unsealed',\n    'unseated',\n    'unsecured',\n    'unseeing',\n    'unseemly',\n    'unseen',\n    'unselect',\n    'unselfish',\n    'unsent',\n    'unsettled',\n    'unshackle',\n    'unshaken',\n    'unshaved',\n    'unshaven',\n    'unsheathe',\n    'unshipped',\n    'unsightly',\n    'unsigned',\n    'unskilled',\n    'unsliced',\n    'unsmooth',\n    'unsnap',\n    'unsocial',\n    'unsoiled',\n    'unsold',\n    'unsolved',\n    'unsorted',\n    'unspoiled',\n    'unspoken',\n    'unstable',\n    'unstaffed',\n    'unstamped',\n    'unsteady',\n    'unsterile',\n    'unstirred',\n    'unstitch',\n    'unstopped',\n    'unstuck',\n    'unstuffed',\n    'unstylish',\n    'unsubtle',\n    'unsubtly',\n    'unsuited',\n    'unsure',\n    'unsworn',\n    'untagged',\n    'untainted',\n    'untaken',\n    'untamed',\n    'untangled',\n    'untapped',\n    'untaxed',\n    'unthawed',\n    'unthread',\n    'untidy',\n    'untie',\n    'until',\n    'untimed',\n    'untimely',\n    'untitled',\n    'untoasted',\n    'untold',\n    'untouched',\n    'untracked',\n    'untrained',\n    'untreated',\n    'untried',\n    'untrimmed',\n    'untrue',\n    'untruth',\n    'unturned',\n    'untwist',\n    'untying',\n    'unusable',\n    'unused',\n    'unusual',\n    'unvalued',\n    'unvaried',\n    'unvarying',\n    'unveiled',\n    'unveiling',\n    'unvented',\n    'unviable',\n    'unvisited',\n    'unvocal',\n    'unwanted',\n    'unwarlike',\n    'unwary',\n    'unwashed',\n    'unwatched',\n    'unweave',\n    'unwed',\n    'unwelcome',\n    'unwell',\n    'unwieldy',\n    'unwilling',\n    'unwind',\n    'unwired',\n    'unwitting',\n    'unwomanly',\n    'unworldly',\n    'unworn',\n    'unworried',\n    'unworthy',\n    'unwound',\n    'unwoven',\n    'unwrapped',\n    'unwritten',\n    'unzip',\n    'upbeat',\n    'upchuck',\n    'upcoming',\n    'upcountry',\n    'update',\n    'upfront',\n    'upgrade',\n    'upheaval',\n    'upheld',\n    'uphill',\n    'uphold',\n    'uplifted',\n    'uplifting',\n    'upload',\n    'upon',\n    'upper',\n    'upright',\n    'uprising',\n    'upriver',\n    'uproar',\n    'uproot',\n    'upscale',\n    'upside',\n    'upstage',\n    'upstairs',\n    'upstart',\n    'upstate',\n    'upstream',\n    'upstroke',\n    'upswing',\n    'uptake',\n    'uptight',\n    'uptown',\n    'upturned',\n    'upward',\n    'upwind',\n    'uranium',\n    'urban',\n    'urchin',\n    'urethane',\n    'urgency',\n    'urgent',\n    'urging',\n    'urologist',\n    'urology',\n    'usable',\n    'usage',\n    'useable',\n    'used',\n    'uselessly',\n    'user',\n    'usher',\n    'usual',\n    'utensil',\n    'utility',\n    'utilize',\n    'utmost',\n    'utopia',\n    'utter',\n    'vacancy',\n    'vacant',\n    'vacate',\n    'vacation',\n    'vagabond',\n    'vagrancy',\n    'vagrantly',\n    'vaguely',\n    'vagueness',\n    'valiant',\n    'valid',\n    'valium',\n    'valley',\n    'valuables',\n    'value',\n    'vanilla',\n    'vanish',\n    'vanity',\n    'vanquish',\n    'vantage',\n    'vaporizer',\n    'variable',\n    'variably',\n    'varied',\n    'variety',\n    'various',\n    'varmint',\n    'varnish',\n    'varsity',\n    'varying',\n    'vascular',\n    'vaseline',\n    'vastly',\n    'vastness',\n    'veal',\n    'vegan',\n    'veggie',\n    'vehicular',\n    'velcro',\n    'velocity',\n    'velvet',\n    'vendetta',\n    'vending',\n    'vendor',\n    'veneering',\n    'vengeful',\n    'venomous',\n    'ventricle',\n    'venture',\n    'venue',\n    'venus',\n    'verbalize',\n    'verbally',\n    'verbose',\n    'verdict',\n    'verify',\n    'verse',\n    'version',\n    'versus',\n    'vertebrae',\n    'vertical',\n    'vertigo',\n    'very',\n    'vessel',\n    'vest',\n    'veteran',\n    'veto',\n    'vexingly',\n    'viability',\n    'viable',\n    'vibes',\n    'vice',\n    'vicinity',\n    'victory',\n    'video',\n    'viewable',\n    'viewer',\n    'viewing',\n    'viewless',\n    'viewpoint',\n    'vigorous',\n    'village',\n    'villain',\n    'vindicate',\n    'vineyard',\n    'vintage',\n    'violate',\n    'violation',\n    'violator',\n    'violet',\n    'violin',\n    'viper',\n    'viral',\n    'virtual',\n    'virtuous',\n    'virus',\n    'visa',\n    'viscosity',\n    'viscous',\n    'viselike',\n    'visible',\n    'visibly',\n    'vision',\n    'visiting',\n    'visitor',\n    'visor',\n    'vista',\n    'vitality',\n    'vitalize',\n    'vitally',\n    'vitamins',\n    'vivacious',\n    'vividly',\n    'vividness',\n    'vixen',\n    'vocalist',\n    'vocalize',\n    'vocally',\n    'vocation',\n    'voice',\n    'voicing',\n    'void',\n    'volatile',\n    'volley',\n    'voltage',\n    'volumes',\n    'voter',\n    'voting',\n    'voucher',\n    'vowed',\n    'vowel',\n    'voyage',\n    'wackiness',\n    'wad',\n    'wafer',\n    'waffle',\n    'waged',\n    'wager',\n    'wages',\n    'waggle',\n    'wagon',\n    'wake',\n    'waking',\n    'walk',\n    'walmart',\n    'walnut',\n    'walrus',\n    'waltz',\n    'wand',\n    'wannabe',\n    'wanted',\n    'wanting',\n    'wasabi',\n    'washable',\n    'washbasin',\n    'washboard',\n    'washbowl',\n    'washcloth',\n    'washday',\n    'washed',\n    'washer',\n    'washhouse',\n    'washing',\n    'washout',\n    'washroom',\n    'washstand',\n    'washtub',\n    'wasp',\n    'wasting',\n    'watch',\n    'water',\n    'waviness',\n    'waving',\n    'wavy',\n    'whacking',\n    'whacky',\n    'wham',\n    'wharf',\n    'wheat',\n    'whenever',\n    'whiff',\n    'whimsical',\n    'whinny',\n    'whiny',\n    'whisking',\n    'whoever',\n    'whole',\n    'whomever',\n    'whoopee',\n    'whooping',\n    'whoops',\n    'why',\n    'wick',\n    'widely',\n    'widen',\n    'widget',\n    'widow',\n    'width',\n    'wieldable',\n    'wielder',\n    'wife',\n    'wifi',\n    'wikipedia',\n    'wildcard',\n    'wildcat',\n    'wilder',\n    'wildfire',\n    'wildfowl',\n    'wildland',\n    'wildlife',\n    'wildly',\n    'wildness',\n    'willed',\n    'willfully',\n    'willing',\n    'willow',\n    'willpower',\n    'wilt',\n    'wimp',\n    'wince',\n    'wincing',\n    'wind',\n    'wing',\n    'winking',\n    'winner',\n    'winnings',\n    'winter',\n    'wipe',\n    'wired',\n    'wireless',\n    'wiring',\n    'wiry',\n    'wisdom',\n    'wise',\n    'wish',\n    'wisplike',\n    'wispy',\n    'wistful',\n    'wizard',\n    'wobble',\n    'wobbling',\n    'wobbly',\n    'wok',\n    'wolf',\n    'wolverine',\n    'womanhood',\n    'womankind',\n    'womanless',\n    'womanlike',\n    'womanly',\n    'womb',\n    'woof',\n    'wooing',\n    'wool',\n    'woozy',\n    'word',\n    'work',\n    'worried',\n    'worrier',\n    'worrisome',\n    'worry',\n    'worsening',\n    'worshiper',\n    'worst',\n    'wound',\n    'woven',\n    'wow',\n    'wrangle',\n    'wrath',\n    'wreath',\n    'wreckage',\n    'wrecker',\n    'wrecking',\n    'wrench',\n    'wriggle',\n    'wriggly',\n    'wrinkle',\n    'wrinkly',\n    'wrist',\n    'writing',\n    'written',\n    'wrongdoer',\n    'wronged',\n    'wrongful',\n    'wrongly',\n    'wrongness',\n    'wrought',\n    'xbox',\n    'xerox',\n    'yahoo',\n    'yam',\n    'yanking',\n    'yapping',\n    'yard',\n    'yarn',\n    'yeah',\n    'yearbook',\n    'yearling',\n    'yearly',\n    'yearning',\n    'yeast',\n    'yelling',\n    'yelp',\n    'yen',\n    'yesterday',\n    'yiddish',\n    'yield',\n    'yin',\n    'yippee',\n    'yo-yo',\n    'yodel',\n    'yoga',\n    'yogurt',\n    'yonder',\n    'yoyo',\n    'yummy',\n    'zap',\n    'zealous',\n    'zebra',\n    'zen',\n    'zeppelin',\n    'zero',\n    'zestfully',\n    'zesty',\n    'zigzagged',\n    'zipfile',\n    'zipping',\n    'zippy',\n    'zips',\n    'zit',\n    'zodiac',\n    'zombie',\n    'zone',\n    'zoning',\n    'zookeeper',\n    'zoologist',\n    'zoology',\n    'zoom',\n];\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.newSecureWords = void 0;\nconst getSecureRandom_1 = require(\"../primitives/getSecureRandom\");\nconst wordlist_1 = require(\"./wordlist\");\nasync function newSecureWords(size = 6) {\n    let words = [];\n    for (let i = 0; i < size; i++) {\n        words.push(wordlist_1.wordlist[await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length)]);\n    }\n    return words;\n}\nexports.newSecureWords = newSecureWords;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.newSecurePassphrase = void 0;\nconst __1 = require(\"..\");\nasync function newSecurePassphrase(size = 6) {\n    return (await (0, __1.newSecureWords)(size)).join('-');\n}\nexports.newSecurePassphrase = newSecurePassphrase;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bitsToBytes = exports.bytesToBits = exports.lpad = void 0;\nfunction lpad(str, padString, length) {\n    while (str.length < length) {\n        str = padString + str;\n    }\n    return str;\n}\nexports.lpad = lpad;\nfunction bytesToBits(bytes) {\n    let res = '';\n    for (let i = 0; i < bytes.length; i++) {\n        let x = bytes.at(i);\n        res += lpad(x.toString(2), '0', 8);\n    }\n    return res;\n}\nexports.bytesToBits = bytesToBits;\nfunction bitsToBytes(src) {\n    if (src.length % 8 !== 0) {\n        throw Error('Uneven bits');\n    }\n    let res = [];\n    while (src.length > 0) {\n        res.push(parseInt(src.slice(0, 8), 2));\n        src = src.slice(8);\n    }\n    return Buffer.from(res);\n}\nexports.bitsToBytes = bitsToBytes;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wordlist = void 0;\nconst EN = ['abandon', 'ability', 'able', 'about', 'above', 'absent', 'absorb', 'abstract', 'absurd', 'abuse', 'access', 'accident', 'account', 'accuse', 'achieve', 'acid', 'acoustic', 'acquire', 'across', 'act', 'action', 'actor', 'actress', 'actual', 'adapt', 'add', 'addict', 'address', 'adjust', 'admit', 'adult', 'advance', 'advice', 'aerobic', 'affair', 'afford', 'afraid', 'again', 'age', 'agent', 'agree', 'ahead', 'aim', 'air', 'airport', 'aisle', 'alarm', 'album', 'alcohol', 'alert', 'alien', 'all', 'alley', 'allow', 'almost', 'alone', 'alpha', 'already', 'also', 'alter', 'always', 'amateur', 'amazing', 'among', 'amount', 'amused', 'analyst', 'anchor', 'ancient', 'anger', 'angle', 'angry', 'animal', 'ankle', 'announce', 'annual', 'another', 'answer', 'antenna', 'antique', 'anxiety', 'any', 'apart', 'apology', 'appear', 'apple', 'approve', 'april', 'arch', 'arctic', 'area', 'arena', 'argue', 'arm', 'armed', 'armor', 'army', 'around', 'arrange', 'arrest', 'arrive', 'arrow', 'art', 'artefact', 'artist', 'artwork', 'ask', 'aspect', 'assault', 'asset', 'assist', 'assume', 'asthma', 'athlete', 'atom', 'attack', 'attend', 'attitude', 'attract', 'auction', 'audit', 'august', 'aunt', 'author', 'auto', 'autumn', 'average', 'avocado', 'avoid', 'awake', 'aware', 'away', 'awesome', 'awful', 'awkward', 'axis',\n    'baby', 'bachelor', 'bacon', 'badge', 'bag', 'balance', 'balcony', 'ball', 'bamboo', 'banana', 'banner', 'bar', 'barely', 'bargain', 'barrel', 'base', 'basic', 'basket', 'battle', 'beach', 'bean', 'beauty', 'because', 'become', 'beef', 'before', 'begin', 'behave', 'behind', 'believe', 'below', 'belt', 'bench', 'benefit', 'best', 'betray', 'better', 'between', 'beyond', 'bicycle', 'bid', 'bike', 'bind', 'biology', 'bird', 'birth', 'bitter', 'black', 'blade', 'blame', 'blanket', 'blast', 'bleak', 'bless', 'blind', 'blood', 'blossom', 'blouse', 'blue', 'blur', 'blush', 'board', 'boat', 'body', 'boil', 'bomb', 'bone', 'bonus', 'book', 'boost', 'border', 'boring', 'borrow', 'boss', 'bottom', 'bounce', 'box', 'boy', 'bracket', 'brain', 'brand', 'brass', 'brave', 'bread', 'breeze', 'brick', 'bridge', 'brief', 'bright', 'bring', 'brisk', 'broccoli', 'broken', 'bronze', 'broom', 'brother', 'brown', 'brush', 'bubble', 'buddy', 'budget', 'buffalo', 'build', 'bulb', 'bulk', 'bullet', 'bundle', 'bunker', 'burden', 'burger', 'burst', 'bus', 'business', 'busy', 'butter', 'buyer', 'buzz',\n    'cabbage', 'cabin', 'cable', 'cactus', 'cage', 'cake', 'call', 'calm', 'camera', 'camp', 'can', 'canal', 'cancel', 'candy', 'cannon', 'canoe', 'canvas', 'canyon', 'capable', 'capital', 'captain', 'car', 'carbon', 'card', 'cargo', 'carpet', 'carry', 'cart', 'case', 'cash', 'casino', 'castle', 'casual', 'cat', 'catalog', 'catch', 'category', 'cattle', 'caught', 'cause', 'caution', 'cave', 'ceiling', 'celery', 'cement', 'census', 'century', 'cereal', 'certain', 'chair', 'chalk', 'champion', 'change', 'chaos', 'chapter', 'charge', 'chase', 'chat', 'cheap', 'check', 'cheese', 'chef', 'cherry', 'chest', 'chicken', 'chief', 'child', 'chimney', 'choice', 'choose', 'chronic', 'chuckle', 'chunk', 'churn', 'cigar', 'cinnamon', 'circle', 'citizen', 'city', 'civil', 'claim', 'clap', 'clarify', 'claw', 'clay', 'clean', 'clerk', 'clever', 'click', 'client', 'cliff', 'climb', 'clinic', 'clip', 'clock', 'clog', 'close', 'cloth', 'cloud', 'clown', 'club', 'clump', 'cluster', 'clutch', 'coach', 'coast', 'coconut', 'code', 'coffee', 'coil', 'coin', 'collect', 'color', 'column', 'combine', 'come', 'comfort', 'comic', 'common', 'company', 'concert', 'conduct', 'confirm', 'congress', 'connect', 'consider', 'control', 'convince', 'cook', 'cool', 'copper', 'copy', 'coral', 'core', 'corn', 'correct', 'cost', 'cotton', 'couch', 'country', 'couple', 'course', 'cousin', 'cover', 'coyote', 'crack', 'cradle', 'craft', 'cram', 'crane', 'crash', 'crater', 'crawl', 'crazy', 'cream', 'credit', 'creek', 'crew', 'cricket', 'crime', 'crisp', 'critic', 'crop', 'cross', 'crouch', 'crowd', 'crucial', 'cruel', 'cruise', 'crumble', 'crunch', 'crush', 'cry', 'crystal', 'cube', 'culture', 'cup', 'cupboard', 'curious', 'current', 'curtain', 'curve', 'cushion', 'custom', 'cute', 'cycle',\n    'dad', 'damage', 'damp', 'dance', 'danger', 'daring', 'dash', 'daughter', 'dawn', 'day', 'deal', 'debate', 'debris', 'decade', 'december', 'decide', 'decline', 'decorate', 'decrease', 'deer', 'defense', 'define', 'defy', 'degree', 'delay', 'deliver', 'demand', 'demise', 'denial', 'dentist', 'deny', 'depart', 'depend', 'deposit', 'depth', 'deputy', 'derive', 'describe', 'desert', 'design', 'desk', 'despair', 'destroy', 'detail', 'detect', 'develop', 'device', 'devote', 'diagram', 'dial', 'diamond', 'diary', 'dice', 'diesel', 'diet', 'differ', 'digital', 'dignity', 'dilemma', 'dinner', 'dinosaur', 'direct', 'dirt', 'disagree', 'discover', 'disease', 'dish', 'dismiss', 'disorder', 'display', 'distance', 'divert', 'divide', 'divorce', 'dizzy', 'doctor', 'document', 'dog', 'doll', 'dolphin', 'domain', 'donate', 'donkey', 'donor', 'door', 'dose', 'double', 'dove', 'draft', 'dragon', 'drama', 'drastic', 'draw', 'dream', 'dress', 'drift', 'drill', 'drink', 'drip', 'drive', 'drop', 'drum', 'dry', 'duck', 'dumb', 'dune', 'during', 'dust', 'dutch', 'duty', 'dwarf', 'dynamic',\n    'eager', 'eagle', 'early', 'earn', 'earth', 'easily', 'east', 'easy', 'echo', 'ecology', 'economy', 'edge', 'edit', 'educate', 'effort', 'egg', 'eight', 'either', 'elbow', 'elder', 'electric', 'elegant', 'element', 'elephant', 'elevator', 'elite', 'else', 'embark', 'embody', 'embrace', 'emerge', 'emotion', 'employ', 'empower', 'empty', 'enable', 'enact', 'end', 'endless', 'endorse', 'enemy', 'energy', 'enforce', 'engage', 'engine', 'enhance', 'enjoy', 'enlist', 'enough', 'enrich', 'enroll', 'ensure', 'enter', 'entire', 'entry', 'envelope', 'episode', 'equal', 'equip', 'era', 'erase', 'erode', 'erosion', 'error', 'erupt', 'escape', 'essay', 'essence', 'estate', 'eternal', 'ethics', 'evidence', 'evil', 'evoke', 'evolve', 'exact', 'example', 'excess', 'exchange', 'excite', 'exclude', 'excuse', 'execute', 'exercise', 'exhaust', 'exhibit', 'exile', 'exist', 'exit', 'exotic', 'expand', 'expect', 'expire', 'explain', 'expose', 'express', 'extend', 'extra', 'eye', 'eyebrow',\n    'fabric', 'face', 'faculty', 'fade', 'faint', 'faith', 'fall', 'false', 'fame', 'family', 'famous', 'fan', 'fancy', 'fantasy', 'farm', 'fashion', 'fat', 'fatal', 'father', 'fatigue', 'fault', 'favorite', 'feature', 'february', 'federal', 'fee', 'feed', 'feel', 'female', 'fence', 'festival', 'fetch', 'fever', 'few', 'fiber', 'fiction', 'field', 'figure', 'file', 'film', 'filter', 'final', 'find', 'fine', 'finger', 'finish', 'fire', 'firm', 'first', 'fiscal', 'fish', 'fit', 'fitness', 'fix', 'flag', 'flame', 'flash', 'flat', 'flavor', 'flee', 'flight', 'flip', 'float', 'flock', 'floor', 'flower', 'fluid', 'flush', 'fly', 'foam', 'focus', 'fog', 'foil', 'fold', 'follow', 'food', 'foot', 'force', 'forest', 'forget', 'fork', 'fortune', 'forum', 'forward', 'fossil', 'foster', 'found', 'fox', 'fragile', 'frame', 'frequent', 'fresh', 'friend', 'fringe', 'frog', 'front', 'frost', 'frown', 'frozen', 'fruit', 'fuel', 'fun', 'funny', 'furnace', 'fury', 'future',\n    'gadget', 'gain', 'galaxy', 'gallery', 'game', 'gap', 'garage', 'garbage', 'garden', 'garlic', 'garment', 'gas', 'gasp', 'gate', 'gather', 'gauge', 'gaze', 'general', 'genius', 'genre', 'gentle', 'genuine', 'gesture', 'ghost', 'giant', 'gift', 'giggle', 'ginger', 'giraffe', 'girl', 'give', 'glad', 'glance', 'glare', 'glass', 'glide', 'glimpse', 'globe', 'gloom', 'glory', 'glove', 'glow', 'glue', 'goat', 'goddess', 'gold', 'good', 'goose', 'gorilla', 'gospel', 'gossip', 'govern', 'gown', 'grab', 'grace', 'grain', 'grant', 'grape', 'grass', 'gravity', 'great', 'green', 'grid', 'grief', 'grit', 'grocery', 'group', 'grow', 'grunt', 'guard', 'guess', 'guide', 'guilt', 'guitar', 'gun', 'gym',\n    'habit', 'hair', 'half', 'hammer', 'hamster', 'hand', 'happy', 'harbor', 'hard', 'harsh', 'harvest', 'hat', 'have', 'hawk', 'hazard', 'head', 'health', 'heart', 'heavy', 'hedgehog', 'height', 'hello', 'helmet', 'help', 'hen', 'hero', 'hidden', 'high', 'hill', 'hint', 'hip', 'hire', 'history', 'hobby', 'hockey', 'hold', 'hole', 'holiday', 'hollow', 'home', 'honey', 'hood', 'hope', 'horn', 'horror', 'horse', 'hospital', 'host', 'hotel', 'hour', 'hover', 'hub', 'huge', 'human', 'humble', 'humor', 'hundred', 'hungry', 'hunt', 'hurdle', 'hurry', 'hurt', 'husband', 'hybrid',\n    'ice', 'icon', 'idea', 'identify', 'idle', 'ignore', 'ill', 'illegal', 'illness', 'image', 'imitate', 'immense', 'immune', 'impact', 'impose', 'improve', 'impulse', 'inch', 'include', 'income', 'increase', 'index', 'indicate', 'indoor', 'industry', 'infant', 'inflict', 'inform', 'inhale', 'inherit', 'initial', 'inject', 'injury', 'inmate', 'inner', 'innocent', 'input', 'inquiry', 'insane', 'insect', 'inside', 'inspire', 'install', 'intact', 'interest', 'into', 'invest', 'invite', 'involve', 'iron', 'island', 'isolate', 'issue', 'item', 'ivory',\n    'jacket', 'jaguar', 'jar', 'jazz', 'jealous', 'jeans', 'jelly', 'jewel', 'job', 'join', 'joke', 'journey', 'joy', 'judge', 'juice', 'jump', 'jungle', 'junior', 'junk', 'just',\n    'kangaroo', 'keen', 'keep', 'ketchup', 'key', 'kick', 'kid', 'kidney', 'kind', 'kingdom', 'kiss', 'kit', 'kitchen', 'kite', 'kitten', 'kiwi', 'knee', 'knife', 'knock', 'know',\n    'lab', 'label', 'labor', 'ladder', 'lady', 'lake', 'lamp', 'language', 'laptop', 'large', 'later', 'latin', 'laugh', 'laundry', 'lava', 'law', 'lawn', 'lawsuit', 'layer', 'lazy', 'leader', 'leaf', 'learn', 'leave', 'lecture', 'left', 'leg', 'legal', 'legend', 'leisure', 'lemon', 'lend', 'length', 'lens', 'leopard', 'lesson', 'letter', 'level', 'liar', 'liberty', 'library', 'license', 'life', 'lift', 'light', 'like', 'limb', 'limit', 'link', 'lion', 'liquid', 'list', 'little', 'live', 'lizard', 'load', 'loan', 'lobster', 'local', 'lock', 'logic', 'lonely', 'long', 'loop', 'lottery', 'loud', 'lounge', 'love', 'loyal', 'lucky', 'luggage', 'lumber', 'lunar', 'lunch', 'luxury', 'lyrics',\n    'machine', 'mad', 'magic', 'magnet', 'maid', 'mail', 'main', 'major', 'make', 'mammal', 'man', 'manage', 'mandate', 'mango', 'mansion', 'manual', 'maple', 'marble', 'march', 'margin', 'marine', 'market', 'marriage', 'mask', 'mass', 'master', 'match', 'material', 'math', 'matrix', 'matter', 'maximum', 'maze', 'meadow', 'mean', 'measure', 'meat', 'mechanic', 'medal', 'media', 'melody', 'melt', 'member', 'memory', 'mention', 'menu', 'mercy', 'merge', 'merit', 'merry', 'mesh', 'message', 'metal', 'method', 'middle', 'midnight', 'milk', 'million', 'mimic', 'mind', 'minimum', 'minor', 'minute', 'miracle', 'mirror', 'misery', 'miss', 'mistake', 'mix', 'mixed', 'mixture', 'mobile', 'model', 'modify', 'mom', 'moment', 'monitor', 'monkey', 'monster', 'month', 'moon', 'moral', 'more', 'morning', 'mosquito', 'mother', 'motion', 'motor', 'mountain', 'mouse', 'move', 'movie', 'much', 'muffin', 'mule', 'multiply', 'muscle', 'museum', 'mushroom', 'music', 'must', 'mutual', 'myself', 'mystery', 'myth',\n    'naive', 'name', 'napkin', 'narrow', 'nasty', 'nation', 'nature', 'near', 'neck', 'need', 'negative', 'neglect', 'neither', 'nephew', 'nerve', 'nest', 'net', 'network', 'neutral', 'never', 'news', 'next', 'nice', 'night', 'noble', 'noise', 'nominee', 'noodle', 'normal', 'north', 'nose', 'notable', 'note', 'nothing', 'notice', 'novel', 'now', 'nuclear', 'number', 'nurse', 'nut',\n    'oak', 'obey', 'object', 'oblige', 'obscure', 'observe', 'obtain', 'obvious', 'occur', 'ocean', 'october', 'odor', 'off', 'offer', 'office', 'often', 'oil', 'okay', 'old', 'olive', 'olympic', 'omit', 'once', 'one', 'onion', 'online', 'only', 'open', 'opera', 'opinion', 'oppose', 'option', 'orange', 'orbit', 'orchard', 'order', 'ordinary', 'organ', 'orient', 'original', 'orphan', 'ostrich', 'other', 'outdoor', 'outer', 'output', 'outside', 'oval', 'oven', 'over', 'own', 'owner', 'oxygen', 'oyster', 'ozone',\n    'pact', 'paddle', 'page', 'pair', 'palace', 'palm', 'panda', 'panel', 'panic', 'panther', 'paper', 'parade', 'parent', 'park', 'parrot', 'party', 'pass', 'patch', 'path', 'patient', 'patrol', 'pattern', 'pause', 'pave', 'payment', 'peace', 'peanut', 'pear', 'peasant', 'pelican', 'pen', 'penalty', 'pencil', 'people', 'pepper', 'perfect', 'permit', 'person', 'pet', 'phone', 'photo', 'phrase', 'physical', 'piano', 'picnic', 'picture', 'piece', 'pig', 'pigeon', 'pill', 'pilot', 'pink', 'pioneer', 'pipe', 'pistol', 'pitch', 'pizza', 'place', 'planet', 'plastic', 'plate', 'play', 'please', 'pledge', 'pluck', 'plug', 'plunge', 'poem', 'poet', 'point', 'polar', 'pole', 'police', 'pond', 'pony', 'pool', 'popular', 'portion', 'position', 'possible', 'post', 'potato', 'pottery', 'poverty', 'powder', 'power', 'practice', 'praise', 'predict', 'prefer', 'prepare', 'present', 'pretty', 'prevent', 'price', 'pride', 'primary', 'print', 'priority', 'prison', 'private', 'prize', 'problem', 'process', 'produce', 'profit', 'program', 'project', 'promote', 'proof', 'property', 'prosper', 'protect', 'proud', 'provide', 'public', 'pudding', 'pull', 'pulp', 'pulse', 'pumpkin', 'punch', 'pupil', 'puppy', 'purchase', 'purity', 'purpose', 'purse', 'push', 'put', 'puzzle', 'pyramid',\n    'quality', 'quantum', 'quarter', 'question', 'quick', 'quit', 'quiz', 'quote',\n    'rabbit', 'raccoon', 'race', 'rack', 'radar', 'radio', 'rail', 'rain', 'raise', 'rally', 'ramp', 'ranch', 'random', 'range', 'rapid', 'rare', 'rate', 'rather', 'raven', 'raw', 'razor', 'ready', 'real', 'reason', 'rebel', 'rebuild', 'recall', 'receive', 'recipe', 'record', 'recycle', 'reduce', 'reflect', 'reform', 'refuse', 'region', 'regret', 'regular', 'reject', 'relax', 'release', 'relief', 'rely', 'remain', 'remember', 'remind', 'remove', 'render', 'renew', 'rent', 'reopen', 'repair', 'repeat', 'replace', 'report', 'require', 'rescue', 'resemble', 'resist', 'resource', 'response', 'result', 'retire', 'retreat', 'return', 'reunion', 'reveal', 'review', 'reward', 'rhythm', 'rib', 'ribbon', 'rice', 'rich', 'ride', 'ridge', 'rifle', 'right', 'rigid', 'ring', 'riot', 'ripple', 'risk', 'ritual', 'rival', 'river', 'road', 'roast', 'robot', 'robust', 'rocket', 'romance', 'roof', 'rookie', 'room', 'rose', 'rotate', 'rough', 'round', 'route', 'royal', 'rubber', 'rude', 'rug', 'rule', 'run', 'runway', 'rural',\n    'sad', 'saddle', 'sadness', 'safe', 'sail', 'salad', 'salmon', 'salon', 'salt', 'salute', 'same', 'sample', 'sand', 'satisfy', 'satoshi', 'sauce', 'sausage', 'save', 'say', 'scale', 'scan', 'scare', 'scatter', 'scene', 'scheme', 'school', 'science', 'scissors', 'scorpion', 'scout', 'scrap', 'screen', 'script', 'scrub', 'sea', 'search', 'season', 'seat', 'second', 'secret', 'section', 'security', 'seed', 'seek', 'segment', 'select', 'sell', 'seminar', 'senior', 'sense', 'sentence', 'series', 'service', 'session', 'settle', 'setup', 'seven', 'shadow', 'shaft', 'shallow', 'share', 'shed', 'shell', 'sheriff', 'shield', 'shift', 'shine', 'ship', 'shiver', 'shock', 'shoe', 'shoot', 'shop', 'short', 'shoulder', 'shove', 'shrimp', 'shrug', 'shuffle', 'shy', 'sibling', 'sick', 'side', 'siege', 'sight', 'sign', 'silent', 'silk', 'silly', 'silver', 'similar', 'simple', 'since', 'sing', 'siren', 'sister', 'situate', 'six', 'size', 'skate', 'sketch', 'ski', 'skill', 'skin', 'skirt', 'skull', 'slab', 'slam', 'sleep', 'slender', 'slice', 'slide', 'slight', 'slim', 'slogan', 'slot', 'slow', 'slush', 'small', 'smart', 'smile', 'smoke', 'smooth', 'snack', 'snake', 'snap', 'sniff', 'snow', 'soap', 'soccer', 'social', 'sock', 'soda', 'soft', 'solar', 'soldier', 'solid', 'solution', 'solve', 'someone', 'song', 'soon', 'sorry', 'sort', 'soul', 'sound', 'soup', 'source', 'south', 'space', 'spare', 'spatial', 'spawn', 'speak', 'special', 'speed', 'spell', 'spend', 'sphere', 'spice', 'spider', 'spike', 'spin', 'spirit', 'split', 'spoil', 'sponsor', 'spoon', 'sport', 'spot', 'spray', 'spread', 'spring', 'spy', 'square', 'squeeze', 'squirrel', 'stable', 'stadium', 'staff', 'stage', 'stairs', 'stamp', 'stand', 'start', 'state', 'stay', 'steak', 'steel', 'stem', 'step', 'stereo', 'stick', 'still', 'sting', 'stock', 'stomach', 'stone', 'stool', 'story', 'stove', 'strategy', 'street', 'strike', 'strong', 'struggle', 'student', 'stuff', 'stumble', 'style', 'subject', 'submit', 'subway', 'success', 'such', 'sudden', 'suffer', 'sugar', 'suggest', 'suit', 'summer', 'sun', 'sunny', 'sunset', 'super', 'supply', 'supreme', 'sure', 'surface', 'surge', 'surprise', 'surround', 'survey', 'suspect', 'sustain', 'swallow', 'swamp', 'swap', 'swarm', 'swear', 'sweet', 'swift', 'swim', 'swing', 'switch', 'sword', 'symbol', 'symptom', 'syrup', 'system',\n    'table', 'tackle', 'tag', 'tail', 'talent', 'talk', 'tank', 'tape', 'target', 'task', 'taste', 'tattoo', 'taxi', 'teach', 'team', 'tell', 'ten', 'tenant', 'tennis', 'tent', 'term', 'test', 'text', 'thank', 'that', 'theme', 'then', 'theory', 'there', 'they', 'thing', 'this', 'thought', 'three', 'thrive', 'throw', 'thumb', 'thunder', 'ticket', 'tide', 'tiger', 'tilt', 'timber', 'time', 'tiny', 'tip', 'tired', 'tissue', 'title', 'toast', 'tobacco', 'today', 'toddler', 'toe', 'together', 'toilet', 'token', 'tomato', 'tomorrow', 'tone', 'tongue', 'tonight', 'tool', 'tooth', 'top', 'topic', 'topple', 'torch', 'tornado', 'tortoise', 'toss', 'total', 'tourist', 'toward', 'tower', 'town', 'toy', 'track', 'trade', 'traffic', 'tragic', 'train', 'transfer', 'trap', 'trash', 'travel', 'tray', 'treat', 'tree', 'trend', 'trial', 'tribe', 'trick', 'trigger', 'trim', 'trip', 'trophy', 'trouble', 'truck', 'true', 'truly', 'trumpet', 'trust', 'truth', 'try', 'tube', 'tuition', 'tumble', 'tuna', 'tunnel', 'turkey', 'turn', 'turtle', 'twelve', 'twenty', 'twice', 'twin', 'twist', 'two', 'type', 'typical',\n    'ugly', 'umbrella', 'unable', 'unaware', 'uncle', 'uncover', 'under', 'undo', 'unfair', 'unfold', 'unhappy', 'uniform', 'unique', 'unit', 'universe', 'unknown', 'unlock', 'until', 'unusual', 'unveil', 'update', 'upgrade', 'uphold', 'upon', 'upper', 'upset', 'urban', 'urge', 'usage', 'use', 'used', 'useful', 'useless', 'usual', 'utility',\n    'vacant', 'vacuum', 'vague', 'valid', 'valley', 'valve', 'van', 'vanish', 'vapor', 'various', 'vast', 'vault', 'vehicle', 'velvet', 'vendor', 'venture', 'venue', 'verb', 'verify', 'version', 'very', 'vessel', 'veteran', 'viable', 'vibrant', 'vicious', 'victory', 'video', 'view', 'village', 'vintage', 'violin', 'virtual', 'virus', 'visa', 'visit', 'visual', 'vital', 'vivid', 'vocal', 'voice', 'void', 'volcano', 'volume', 'vote', 'voyage',\n    'wage', 'wagon', 'wait', 'walk', 'wall', 'walnut', 'want', 'warfare', 'warm', 'warrior', 'wash', 'wasp', 'waste', 'water', 'wave', 'way', 'wealth', 'weapon', 'wear', 'weasel', 'weather', 'web', 'wedding', 'weekend', 'weird', 'welcome', 'west', 'wet', 'whale', 'what', 'wheat', 'wheel', 'when', 'where', 'whip', 'whisper', 'wide', 'width', 'wife', 'wild', 'will', 'win', 'window', 'wine', 'wing', 'wink', 'winner', 'winter', 'wire', 'wisdom', 'wise', 'wish', 'witness', 'wolf', 'woman', 'wonder', 'wood', 'wool', 'word', 'work', 'world', 'worry', 'worth', 'wrap', 'wreck', 'wrestle', 'wrist', 'write', 'wrong',\n    'yard', 'year', 'yellow', 'you', 'young', 'youth',\n    'zebra', 'zero', 'zone', 'zoo'];\nexports.wordlist = EN;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.mnemonicFromRandomSeed = exports.mnemonicIndexesToBytes = exports.bytesToMnemonics = exports.bytesToMnemonicIndexes = exports.mnemonicNew = exports.mnemonicValidate = exports.mnemonicToHDSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicToSeed = exports.mnemonicToEntropy = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nconst getSecureRandom_1 = require(\"../primitives/getSecureRandom\");\nconst hmac_sha512_1 = require(\"../primitives/hmac_sha512\");\nconst pbkdf2_sha512_1 = require(\"../primitives/pbkdf2_sha512\");\nconst binary_1 = require(\"../utils/binary\");\nconst wordlist_1 = require(\"./wordlist\");\nconst PBKDF_ITERATIONS = 100000;\nasync function isPasswordNeeded(mnemonicArray) {\n    const passlessEntropy = await mnemonicToEntropy(mnemonicArray);\n    return (await isPasswordSeed(passlessEntropy)) && !(await isBasicSeed(passlessEntropy));\n}\nfunction normalizeMnemonic(src) {\n    return src.map((v) => v.toLowerCase().trim());\n}\nasync function isBasicSeed(entropy) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L68\n    // bool Mnemonic::is_basic_seed() {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON seed version\", td::max(1, PBKDF_ITERATIONS / 256),\n    //                     hash.as_mutable_slice());\n    //   return hash.as_slice()[0] == 0;\n    // }\n    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON seed version', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), 64);\n    return seed[0] == 0;\n}\nasync function isPasswordSeed(entropy) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L75\n    // bool Mnemonic::is_password_seed() {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON fast seed version\", 1, hash.as_mutable_slice());\n    //   return hash.as_slice()[0] == 1;\n    // }\n    const seed = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, 'TON fast seed version', 1, 64);\n    return seed[0] == 1;\n}\nasync function mnemonicToEntropy(mnemonicArray, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L52\n    // td::SecureString Mnemonic::to_entropy() const {\n    //   td::SecureString res(64);\n    //   td::hmac_sha512(join(words_), password_, res.as_mutable_slice());\n    //   return res;\n    // }\n    return await (0, hmac_sha512_1.hmac_sha512)(mnemonicArray.join(' '), password && password.length > 0 ? password : '');\n}\nexports.mnemonicToEntropy = mnemonicToEntropy;\nasync function mnemonicToSeed(mnemonicArray, seed, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L58\n    // td::SecureString Mnemonic::to_seed() const {\n    //   td::SecureString hash(64);\n    //   td::pbkdf2_sha512(as_slice(to_entropy()), \"TON default seed\", PBKDF_ITERATIONS, hash.as_mutable_slice());\n    //   return hash;\n    // }\n    const entropy = await mnemonicToEntropy(mnemonicArray, password);\n    return await (0, pbkdf2_sha512_1.pbkdf2_sha512)(entropy, seed, PBKDF_ITERATIONS, 64);\n}\nexports.mnemonicToSeed = mnemonicToSeed;\n/**\n * Extract private key from mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */\nasync function mnemonicToPrivateKey(mnemonicArray, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L64\n    // td::Ed25519::PrivateKey Mnemonic::to_private_key() const {\n    //   return td::Ed25519::PrivateKey(td::SecureString(as_slice(to_seed()).substr(0, td::Ed25519::PrivateKey::LENGTH)));\n    // }\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    const seed = (await mnemonicToSeed(mnemonicArray, 'TON default seed', password));\n    let keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seed.slice(0, 32));\n    return {\n        publicKey: Buffer.from(keyPair.publicKey),\n        secretKey: Buffer.from(keyPair.secretKey)\n    };\n}\nexports.mnemonicToPrivateKey = mnemonicToPrivateKey;\n/**\n * Convert mnemonic to wallet key pair\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns Key Pair\n */\nasync function mnemonicToWalletKey(mnemonicArray, password) {\n    let seedPk = await mnemonicToPrivateKey(mnemonicArray, password);\n    let seedSecret = seedPk.secretKey.slice(0, 32);\n    const keyPair = tweetnacl_1.default.sign.keyPair.fromSeed(seedSecret);\n    return {\n        publicKey: Buffer.from(keyPair.publicKey),\n        secretKey: Buffer.from(keyPair.secretKey)\n    };\n}\nexports.mnemonicToWalletKey = mnemonicToWalletKey;\n/**\n * Convert mnemonics to HD seed\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns 64 byte seed\n */\nasync function mnemonicToHDSeed(mnemonicArray, password) {\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    return (await mnemonicToSeed(mnemonicArray, 'TON HD Keys seed', password));\n}\nexports.mnemonicToHDSeed = mnemonicToHDSeed;\n/**\n * Validate Mnemonic\n * @param mnemonicArray mnemonic array\n * @param password mnemonic password\n * @returns true for valid mnemonic\n */\nasync function mnemonicValidate(mnemonicArray, password) {\n    // Normalize\n    mnemonicArray = normalizeMnemonic(mnemonicArray);\n    // Validate mnemonic words\n    for (let word of mnemonicArray) {\n        if (wordlist_1.wordlist.indexOf(word) < 0) {\n            return false;\n        }\n    }\n    // Check password\n    if (password && password.length > 0) {\n        if (!await isPasswordNeeded(mnemonicArray)) {\n            return false;\n        }\n    }\n    // Validate seed\n    return await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password));\n}\nexports.mnemonicValidate = mnemonicValidate;\n/**\n * Generate new Mnemonic\n * @param wordsCount number of words to generate\n * @param password mnemonic password\n * @returns\n */\nasync function mnemonicNew(wordsCount = 24, password) {\n    // https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/tonlib/tonlib/keys/Mnemonic.cpp#L159\n    let mnemonicArray = [];\n    while (true) {\n        // Regenerate new mnemonics\n        mnemonicArray = [];\n        for (let i = 0; i < wordsCount; i++) {\n            let ind = await (0, getSecureRandom_1.getSecureRandomNumber)(0, wordlist_1.wordlist.length);\n            mnemonicArray.push(wordlist_1.wordlist[ind]);\n        }\n        // Chek password conformance\n        if (password && password.length > 0) {\n            if (!await isPasswordNeeded(mnemonicArray)) {\n                continue;\n            }\n        }\n        // Check if basic seed correct\n        if (!(await isBasicSeed(await mnemonicToEntropy(mnemonicArray, password)))) {\n            continue;\n        }\n        break;\n    }\n    return mnemonicArray;\n}\nexports.mnemonicNew = mnemonicNew;\n/**\n * Converts bytes to mnemonics array (could be invalid for TON)\n * @param src source buffer\n * @param wordsCount number of words\n */\nfunction bytesToMnemonicIndexes(src, wordsCount) {\n    let bits = (0, binary_1.bytesToBits)(src);\n    let indexes = [];\n    for (let i = 0; i < wordsCount; i++) {\n        let sl = bits.slice(i * 11, i * 11 + 11);\n        indexes.push(parseInt(sl, 2));\n    }\n    return indexes;\n}\nexports.bytesToMnemonicIndexes = bytesToMnemonicIndexes;\nfunction bytesToMnemonics(src, wordsCount) {\n    let mnemonics = bytesToMnemonicIndexes(src, wordsCount);\n    let res = [];\n    for (let m of mnemonics) {\n        res.push(wordlist_1.wordlist[m]);\n    }\n    return res;\n}\nexports.bytesToMnemonics = bytesToMnemonics;\n/**\n * Converts mnemonics indexes to buffer with zero padding in the end\n * @param src source indexes\n * @returns Buffer\n */\nfunction mnemonicIndexesToBytes(src) {\n    let res = '';\n    for (let s of src) {\n        if (!Number.isSafeInteger(s)) {\n            throw Error('Invalid input');\n        }\n        if (s < 0 || s >= 2028) {\n            throw Error('Invalid input');\n        }\n        res += (0, binary_1.lpad)(s.toString(2), '0', 11);\n    }\n    while (res.length % 8 !== 0) {\n        res = res + '0';\n    }\n    return (0, binary_1.bitsToBytes)(res);\n}\nexports.mnemonicIndexesToBytes = mnemonicIndexesToBytes;\n/**\n * Generates deterministically mnemonics\n * @param seed\n * @param wordsCount\n * @param password\n */\nasync function mnemonicFromRandomSeed(seed, wordsCount = 24, password) {\n    const bytesLength = Math.ceil(wordsCount * 11 / 8);\n    let currentSeed = seed;\n    while (true) {\n        // Create entropy\n        let entropy = await (0, pbkdf2_sha512_1.pbkdf2_sha512)(currentSeed, 'TON mnemonic seed', Math.max(1, Math.floor(PBKDF_ITERATIONS / 256)), bytesLength);\n        // Create mnemonics\n        let mnemonics = bytesToMnemonics(entropy, wordsCount);\n        // Check if mnemonics are valid\n        if (await mnemonicValidate(mnemonics, password)) {\n            return mnemonics;\n        }\n        currentSeed = entropy;\n    }\n}\nexports.mnemonicFromRandomSeed = mnemonicFromRandomSeed;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.openBox = exports.sealBox = exports.signVerify = exports.sign = exports.keyPairFromSeed = exports.keyPairFromSecretKey = void 0;\nconst tweetnacl_1 = __importDefault(require(\"tweetnacl\"));\nfunction keyPairFromSecretKey(secretKey) {\n    let res = tweetnacl_1.default.sign.keyPair.fromSecretKey(new Uint8Array(secretKey));\n    return {\n        publicKey: Buffer.from(res.publicKey),\n        secretKey: Buffer.from(res.secretKey),\n    };\n}\nexports.keyPairFromSecretKey = keyPairFromSecretKey;\nfunction keyPairFromSeed(secretKey) {\n    let res = tweetnacl_1.default.sign.keyPair.fromSeed(new Uint8Array(secretKey));\n    return {\n        publicKey: Buffer.from(res.publicKey),\n        secretKey: Buffer.from(res.secretKey),\n    };\n}\nexports.keyPairFromSeed = keyPairFromSeed;\nfunction sign(data, secretKey) {\n    return Buffer.from(tweetnacl_1.default.sign.detached(new Uint8Array(data), new Uint8Array(secretKey)));\n}\nexports.sign = sign;\nfunction signVerify(data, signature, publicKey) {\n    return tweetnacl_1.default.sign.detached.verify(new Uint8Array(data), new Uint8Array(signature), new Uint8Array(publicKey));\n}\nexports.signVerify = signVerify;\nfunction sealBox(data, nonce, key) {\n    return Buffer.from(tweetnacl_1.default.secretbox(data, nonce, key));\n}\nexports.sealBox = sealBox;\nfunction openBox(data, nonce, key) {\n    let res = tweetnacl_1.default.secretbox.open(data, nonce, key);\n    if (!res) {\n        return null;\n    }\n    return Buffer.from(res);\n}\nexports.openBox = openBox;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = void 0;\nconst hmac_sha512_1 = require(\"../primitives/hmac_sha512\");\nconst ED25519_CURVE = 'ed25519 seed';\nconst HARDENED_OFFSET = 0x80000000;\nasync function getED25519MasterKeyFromSeed(seed) {\n    const I = await (0, hmac_sha512_1.hmac_sha512)(ED25519_CURVE, seed);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n}\nexports.getED25519MasterKeyFromSeed = getED25519MasterKeyFromSeed;\n;\nasync function deriveED25519HardenedKey(parent, index) {\n    if (index >= HARDENED_OFFSET) {\n        throw Error('Key index must be less than offset');\n    }\n    // Key Derive Path: 0x00 + parent.key + index;\n    const indexBuffer = Buffer.alloc(4);\n    indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);\n    const data = Buffer.concat([Buffer.alloc(1, 0), parent.key, indexBuffer]);\n    // Derive key\n    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n}\nexports.deriveED25519HardenedKey = deriveED25519HardenedKey;\n;\nasync function deriveEd25519Path(seed, path) {\n    let state = await getED25519MasterKeyFromSeed(seed);\n    let remaining = [...path];\n    while (remaining.length > 0) {\n        let index = remaining[0];\n        remaining = remaining.slice(1);\n        state = await deriveED25519HardenedKey(state, index);\n    }\n    return state.key;\n}\nexports.deriveEd25519Path = deriveEd25519Path;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = void 0;\nconst hmac_sha512_1 = require(\"../primitives/hmac_sha512\");\nconst SYMMETRIC_SEED = 'Symmetric key seed';\nasync function getSymmetricMasterKeyFromSeed(seed) {\n    const I = await (0, hmac_sha512_1.hmac_sha512)(SYMMETRIC_SEED, seed);\n    const IL = I.slice(32);\n    const IR = I.slice(0, 32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n}\nexports.getSymmetricMasterKeyFromSeed = getSymmetricMasterKeyFromSeed;\n;\nasync function deriveSymmetricHardenedKey(parent, offset) {\n    // Prepare data\n    const data = Buffer.concat([Buffer.alloc(1, 0), Buffer.from(offset)]);\n    // Derive key\n    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);\n    const IL = I.slice(32);\n    const IR = I.slice(0, 32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n}\nexports.deriveSymmetricHardenedKey = deriveSymmetricHardenedKey;\nasync function deriveSymmetricPath(seed, path) {\n    let state = await getSymmetricMasterKeyFromSeed(seed);\n    let remaining = [...path];\n    while (remaining.length > 0) {\n        let index = remaining[0];\n        remaining = remaining.slice(1);\n        state = await deriveSymmetricHardenedKey(state, index);\n    }\n    return state.key;\n}\nexports.deriveSymmetricPath = deriveSymmetricPath;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.deriveMnemonicsPath = exports.deriveMnemonicHardenedKey = exports.getMnemonicsMasterKeyFromSeed = void 0;\nconst mnemonic_1 = require(\"../mnemonic/mnemonic\");\nconst hmac_sha512_1 = require(\"../primitives/hmac_sha512\");\nconst HARDENED_OFFSET = 0x80000000;\nconst MNEMONICS_SEED = 'TON Mnemonics HD seed';\nasync function getMnemonicsMasterKeyFromSeed(seed) {\n    const I = await (0, hmac_sha512_1.hmac_sha512)(MNEMONICS_SEED, seed);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n}\nexports.getMnemonicsMasterKeyFromSeed = getMnemonicsMasterKeyFromSeed;\n;\nasync function deriveMnemonicHardenedKey(parent, index) {\n    if (index >= HARDENED_OFFSET) {\n        throw Error('Key index must be less than offset');\n    }\n    // Key Derive Path: 0x00 + parent.key + index;\n    const indexBuffer = Buffer.alloc(4);\n    indexBuffer.writeUInt32BE(index + HARDENED_OFFSET, 0);\n    const data = Buffer.concat([Buffer.alloc(1, 0), parent.key, indexBuffer]);\n    // Derive key\n    const I = await (0, hmac_sha512_1.hmac_sha512)(parent.chainCode, data);\n    const IL = I.slice(0, 32);\n    const IR = I.slice(32);\n    return {\n        key: IL,\n        chainCode: IR,\n    };\n}\nexports.deriveMnemonicHardenedKey = deriveMnemonicHardenedKey;\nasync function deriveMnemonicsPath(seed, path, wordsCount = 24, password) {\n    let state = await getMnemonicsMasterKeyFromSeed(seed);\n    let remaining = [...path];\n    while (remaining.length > 0) {\n        let index = remaining[0];\n        remaining = remaining.slice(1);\n        state = await deriveMnemonicHardenedKey(state, index);\n    }\n    return await (0, mnemonic_1.mnemonicFromRandomSeed)(state.key, wordsCount, password);\n}\nexports.deriveMnemonicsPath = deriveMnemonicsPath;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMnemonicsMasterKeyFromSeed = exports.deriveMnemonicHardenedKey = exports.deriveMnemonicsPath = exports.deriveSymmetricPath = exports.deriveSymmetricHardenedKey = exports.getSymmetricMasterKeyFromSeed = exports.deriveEd25519Path = exports.deriveED25519HardenedKey = exports.getED25519MasterKeyFromSeed = exports.signVerify = exports.sign = exports.keyPairFromSecretKey = exports.keyPairFromSeed = exports.openBox = exports.sealBox = exports.mnemonicWordList = exports.mnemonicToHDSeed = exports.mnemonicToSeed = exports.mnemonicToWalletKey = exports.mnemonicToPrivateKey = exports.mnemonicValidate = exports.mnemonicNew = exports.newSecurePassphrase = exports.newSecureWords = exports.getSecureRandomNumber = exports.getSecureRandomWords = exports.getSecureRandomBytes = exports.hmac_sha512 = exports.pbkdf2_sha512 = exports.sha512_sync = exports.sha512 = exports.sha256_sync = exports.sha256 = void 0;\nvar sha256_1 = require(\"./primitives/sha256\");\nObject.defineProperty(exports, \"sha256\", { enumerable: true, get: function () { return sha256_1.sha256; } });\nObject.defineProperty(exports, \"sha256_sync\", { enumerable: true, get: function () { return sha256_1.sha256_sync; } });\nvar sha512_1 = require(\"./primitives/sha512\");\nObject.defineProperty(exports, \"sha512\", { enumerable: true, get: function () { return sha512_1.sha512; } });\nObject.defineProperty(exports, \"sha512_sync\", { enumerable: true, get: function () { return sha512_1.sha512_sync; } });\nvar pbkdf2_sha512_1 = require(\"./primitives/pbkdf2_sha512\");\nObject.defineProperty(exports, \"pbkdf2_sha512\", { enumerable: true, get: function () { return pbkdf2_sha512_1.pbkdf2_sha512; } });\nvar hmac_sha512_1 = require(\"./primitives/hmac_sha512\");\nObject.defineProperty(exports, \"hmac_sha512\", { enumerable: true, get: function () { return hmac_sha512_1.hmac_sha512; } });\nvar getSecureRandom_1 = require(\"./primitives/getSecureRandom\");\nObject.defineProperty(exports, \"getSecureRandomBytes\", { enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomBytes; } });\nObject.defineProperty(exports, \"getSecureRandomWords\", { enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomWords; } });\nObject.defineProperty(exports, \"getSecureRandomNumber\", { enumerable: true, get: function () { return getSecureRandom_1.getSecureRandomNumber; } });\nvar newSecureWords_1 = require(\"./passwords/newSecureWords\");\nObject.defineProperty(exports, \"newSecureWords\", { enumerable: true, get: function () { return newSecureWords_1.newSecureWords; } });\nvar newSecurePassphrase_1 = require(\"./passwords/newSecurePassphrase\");\nObject.defineProperty(exports, \"newSecurePassphrase\", { enumerable: true, get: function () { return newSecurePassphrase_1.newSecurePassphrase; } });\nvar mnemonic_1 = require(\"./mnemonic/mnemonic\");\nObject.defineProperty(exports, \"mnemonicNew\", { enumerable: true, get: function () { return mnemonic_1.mnemonicNew; } });\nObject.defineProperty(exports, \"mnemonicValidate\", { enumerable: true, get: function () { return mnemonic_1.mnemonicValidate; } });\nObject.defineProperty(exports, \"mnemonicToPrivateKey\", { enumerable: true, get: function () { return mnemonic_1.mnemonicToPrivateKey; } });\nObject.defineProperty(exports, \"mnemonicToWalletKey\", { enumerable: true, get: function () { return mnemonic_1.mnemonicToWalletKey; } });\nObject.defineProperty(exports, \"mnemonicToSeed\", { enumerable: true, get: function () { return mnemonic_1.mnemonicToSeed; } });\nObject.defineProperty(exports, \"mnemonicToHDSeed\", { enumerable: true, get: function () { return mnemonic_1.mnemonicToHDSeed; } });\nvar wordlist_1 = require(\"./mnemonic/wordlist\");\nObject.defineProperty(exports, \"mnemonicWordList\", { enumerable: true, get: function () { return wordlist_1.wordlist; } });\nvar nacl_1 = require(\"./primitives/nacl\");\nObject.defineProperty(exports, \"sealBox\", { enumerable: true, get: function () { return nacl_1.sealBox; } });\nObject.defineProperty(exports, \"openBox\", { enumerable: true, get: function () { return nacl_1.openBox; } });\nvar nacl_2 = require(\"./primitives/nacl\");\nObject.defineProperty(exports, \"keyPairFromSeed\", { enumerable: true, get: function () { return nacl_2.keyPairFromSeed; } });\nObject.defineProperty(exports, \"keyPairFromSecretKey\", { enumerable: true, get: function () { return nacl_2.keyPairFromSecretKey; } });\nObject.defineProperty(exports, \"sign\", { enumerable: true, get: function () { return nacl_2.sign; } });\nObject.defineProperty(exports, \"signVerify\", { enumerable: true, get: function () { return nacl_2.signVerify; } });\nvar ed25519_1 = require(\"./hd/ed25519\");\nObject.defineProperty(exports, \"getED25519MasterKeyFromSeed\", { enumerable: true, get: function () { return ed25519_1.getED25519MasterKeyFromSeed; } });\nObject.defineProperty(exports, \"deriveED25519HardenedKey\", { enumerable: true, get: function () { return ed25519_1.deriveED25519HardenedKey; } });\nObject.defineProperty(exports, \"deriveEd25519Path\", { enumerable: true, get: function () { return ed25519_1.deriveEd25519Path; } });\nvar symmetric_1 = require(\"./hd/symmetric\");\nObject.defineProperty(exports, \"getSymmetricMasterKeyFromSeed\", { enumerable: true, get: function () { return symmetric_1.getSymmetricMasterKeyFromSeed; } });\nObject.defineProperty(exports, \"deriveSymmetricHardenedKey\", { enumerable: true, get: function () { return symmetric_1.deriveSymmetricHardenedKey; } });\nObject.defineProperty(exports, \"deriveSymmetricPath\", { enumerable: true, get: function () { return symmetric_1.deriveSymmetricPath; } });\nvar mnemonics_1 = require(\"./hd/mnemonics\");\nObject.defineProperty(exports, \"deriveMnemonicsPath\", { enumerable: true, get: function () { return mnemonics_1.deriveMnemonicsPath; } });\nObject.defineProperty(exports, \"deriveMnemonicHardenedKey\", { enumerable: true, get: function () { return mnemonics_1.deriveMnemonicHardenedKey; } });\nObject.defineProperty(exports, \"getMnemonicsMasterKeyFromSeed\", { enumerable: true, get: function () { return mnemonics_1.getMnemonicsMasterKeyFromSeed; } });\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.wonderCalculator = void 0;\nconst BitString_1 = require(\"../BitString\");\nconst CellType_1 = require(\"../CellType\");\nconst LevelMask_1 = require(\"./LevelMask\");\nconst exoticPruned_1 = require(\"./exoticPruned\");\nconst exoticMerkleProof_1 = require(\"./exoticMerkleProof\");\nconst descriptor_1 = require(\"./descriptor\");\nconst crypto_1 = require(\"@ton/crypto\");\nconst exoticMerkleUpdate_1 = require(\"./exoticMerkleUpdate\");\nconst exoticLibrary_1 = require(\"./exoticLibrary\");\n//\n// This function replicates unknown logic of resolving cell data\n// https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214\n//\nfunction wonderCalculator(type, bits, refs) {\n    //\n    // Resolving level mask\n    //\n    let levelMask;\n    let pruned = null;\n    if (type === CellType_1.CellType.Ordinary) {\n        let mask = 0;\n        for (let r of refs) {\n            mask = mask | r.mask.value;\n        }\n        levelMask = new LevelMask_1.LevelMask(mask);\n    }\n    else if (type === CellType_1.CellType.PrunedBranch) {\n        // Parse pruned\n        pruned = (0, exoticPruned_1.exoticPruned)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask(pruned.mask);\n    }\n    else if (type === CellType_1.CellType.MerkleProof) {\n        // Parse proof\n        let loaded = (0, exoticMerkleProof_1.exoticMerkleProof)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask(refs[0].mask.value >> 1);\n    }\n    else if (type === CellType_1.CellType.MerkleUpdate) {\n        // Parse update\n        let loaded = (0, exoticMerkleUpdate_1.exoticMerkleUpdate)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask((refs[0].mask.value | refs[1].mask.value) >> 1);\n    }\n    else if (type === CellType_1.CellType.Library) {\n        // Parse library\n        let loaded = (0, exoticLibrary_1.exoticLibrary)(bits, refs);\n        // Load level\n        levelMask = new LevelMask_1.LevelMask();\n    }\n    else {\n        throw new Error(\"Unsupported exotic type\");\n    }\n    //\n    // Calculate hashes and depths\n    // NOTE: https://github.com/ton-blockchain/ton/blob/24dc184a2ea67f9c47042b4104bbb4d82289fac1/crypto/vm/cells/DataCell.cpp#L214\n    //\n    let depths = [];\n    let hashes = [];\n    let hashCount = type === CellType_1.CellType.PrunedBranch ? 1 : levelMask.hashCount;\n    let totalHashCount = levelMask.hashCount;\n    let hashIOffset = totalHashCount - hashCount;\n    for (let levelI = 0, hashI = 0; levelI <= levelMask.level; levelI++) {\n        if (!levelMask.isSignificant(levelI)) {\n            continue;\n        }\n        if (hashI < hashIOffset) {\n            hashI++;\n            continue;\n        }\n        //\n        // Bits\n        //\n        let currentBits;\n        if (hashI === hashIOffset) {\n            if (!(levelI === 0 || type === CellType_1.CellType.PrunedBranch)) {\n                throw Error('Invalid');\n            }\n            currentBits = bits;\n        }\n        else {\n            if (!(levelI !== 0 && type !== CellType_1.CellType.PrunedBranch)) {\n                throw Error('Invalid: ' + levelI + ', ' + type);\n            }\n            currentBits = new BitString_1.BitString(hashes[hashI - hashIOffset - 1], 0, 256);\n        }\n        //\n        // Depth\n        //\n        let currentDepth = 0;\n        for (let c of refs) {\n            let childDepth;\n            if (type == CellType_1.CellType.MerkleProof || type == CellType_1.CellType.MerkleUpdate) {\n                childDepth = c.depth(levelI + 1);\n            }\n            else {\n                childDepth = c.depth(levelI);\n            }\n            currentDepth = Math.max(currentDepth, childDepth);\n        }\n        if (refs.length > 0) {\n            currentDepth++;\n        }\n        //\n        // Hash\n        //\n        let repr = (0, descriptor_1.getRepr)(bits, currentBits, refs, levelI, levelMask.apply(levelI).value, type);\n        let hash = (0, crypto_1.sha256_sync)(repr);\n        //\n        // Persist next\n        //\n        let destI = hashI - hashIOffset;\n        depths[destI] = currentDepth;\n        hashes[destI] = hash;\n        //\n        // Next\n        //\n        hashI++;\n    }\n    //\n    // Calculate hash and depth for all levels\n    //\n    let resolvedHashes = [];\n    let resolvedDepths = [];\n    if (pruned) {\n        for (let i = 0; i < 4; i++) {\n            const { hashIndex } = levelMask.apply(i);\n            const { hashIndex: thisHashIndex } = levelMask;\n            if (hashIndex !== thisHashIndex) {\n                resolvedHashes.push(pruned.pruned[hashIndex].hash);\n                resolvedDepths.push(pruned.pruned[hashIndex].depth);\n            }\n            else {\n                resolvedHashes.push(hashes[0]);\n                resolvedDepths.push(depths[0]);\n            }\n        }\n    }\n    else {\n        for (let i = 0; i < 4; i++) {\n            resolvedHashes.push(hashes[levelMask.apply(i).hashIndex]);\n            resolvedDepths.push(depths[levelMask.apply(i).hashIndex]);\n        }\n    }\n    //\n    // Result\n    //\n    return {\n        mask: levelMask,\n        hashes: resolvedHashes,\n        depths: resolvedDepths\n    };\n}\nexports.wonderCalculator = wonderCalculator;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.topologicalSort = void 0;\nfunction topologicalSort(src) {\n    let pending = [src];\n    let allCells = new Map();\n    let notPermCells = new Set();\n    let sorted = [];\n    while (pending.length > 0) {\n        const cells = [...pending];\n        pending = [];\n        for (let cell of cells) {\n            const hash = cell.hash().toString('hex');\n            if (allCells.has(hash)) {\n                continue;\n            }\n            notPermCells.add(hash);\n            allCells.set(hash, { cell: cell, refs: cell.refs.map((v) => v.hash().toString('hex')) });\n            for (let r of cell.refs) {\n                pending.push(r);\n            }\n        }\n    }\n    let tempMark = new Set();\n    function visit(hash) {\n        if (!notPermCells.has(hash)) {\n            return;\n        }\n        if (tempMark.has(hash)) {\n            throw Error('Not a DAG');\n        }\n        tempMark.add(hash);\n        let refs = allCells.get(hash).refs;\n        for (let ci = refs.length - 1; ci >= 0; ci--) {\n            visit(refs[ci]);\n        }\n        sorted.push(hash);\n        tempMark.delete(hash);\n        notPermCells.delete(hash);\n    }\n    while (notPermCells.size > 0) {\n        const id = Array.from(notPermCells)[0];\n        visit(id);\n    }\n    let indexes = new Map();\n    for (let i = 0; i < sorted.length; i++) {\n        indexes.set(sorted[sorted.length - i - 1], i);\n    }\n    let result = [];\n    for (let i = sorted.length - 1; i >= 0; i--) {\n        let ent = sorted[i];\n        const rrr = allCells.get(ent);\n        result.push({ cell: rrr.cell, refs: rrr.refs.map((v) => indexes.get(v)) });\n    }\n    return result;\n}\nexports.topologicalSort = topologicalSort;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.bitsForNumber = void 0;\nfunction bitsForNumber(src, mode) {\n    let v = BigInt(src);\n    // Handle negative values\n    if (mode === 'int') {\n        // Corner case for zero or -1 value\n        if (v === 0n || v === -1n) {\n            return 1;\n        }\n        let v2 = v > 0 ? v : -v;\n        return (v2.toString(2).length + 1 /* Sign bit */);\n    }\n    else if (mode === 'uint') {\n        if (v < 0) {\n            throw Error(`value is negative. Got ${src}`);\n        }\n        return (v.toString(2).length);\n    }\n    else {\n        throw Error(`invalid mode. Got ${mode}`);\n    }\n}\nexports.bitsForNumber = bitsForNumber;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.crc32c = void 0;\nconst POLY = 0x82f63b78;\nfunction crc32c(source) {\n    let crc = 0 ^ 0xffffffff;\n    for (let n = 0; n < source.length; n++) {\n        crc ^= source[n];\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n        crc = crc & 1 ? (crc >>> 1) ^ POLY : crc >>> 1;\n    }\n    crc = crc ^ 0xffffffff;\n    // Convert endianness\n    let res = Buffer.alloc(4);\n    res.writeInt32LE(crc);\n    return res;\n}\nexports.crc32c = crc32c;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeBoc = exports.deserializeBoc = exports.parseBoc = void 0;\nconst BitReader_1 = require(\"../BitReader\");\nconst BitString_1 = require(\"../BitString\");\nconst Cell_1 = require(\"../Cell\");\nconst topologicalSort_1 = require(\"./utils/topologicalSort\");\nconst bitsForNumber_1 = require(\"../../utils/bitsForNumber\");\nconst BitBuilder_1 = require(\"../BitBuilder\");\nconst descriptor_1 = require(\"./descriptor\");\nconst paddedBits_1 = require(\"../utils/paddedBits\");\nconst crc32c_1 = require(\"../../utils/crc32c\");\nfunction getHashesCount(levelMask) {\n    return getHashesCountFromMask(levelMask & 7);\n}\nfunction getHashesCountFromMask(mask) {\n    let n = 0;\n    for (let i = 0; i < 3; i++) {\n        n += (mask & 1);\n        mask = mask >> 1;\n    }\n    return n + 1; // 1 repr + up to 3 higher hashes\n}\nfunction readCell(reader, sizeBytes) {\n    // D1\n    const d1 = reader.loadUint(8);\n    const refsCount = d1 % 8;\n    const exotic = !!(d1 & 8);\n    // D2\n    const d2 = reader.loadUint(8);\n    const dataBytesize = Math.ceil(d2 / 2);\n    const paddingAdded = !!(d2 % 2);\n    const levelMask = d1 >> 5;\n    const hasHashes = (d1 & 16) != 0;\n    const hash_bytes = 32;\n    const hashesSize = hasHashes ? getHashesCount(levelMask) * hash_bytes : 0;\n    const depthSize = hasHashes ? getHashesCount(levelMask) * 2 : 0;\n    reader.skip(hashesSize * 8);\n    reader.skip(depthSize * 8);\n    // Bits\n    let bits = BitString_1.BitString.EMPTY;\n    if (dataBytesize > 0) {\n        if (paddingAdded) {\n            bits = reader.loadPaddedBits(dataBytesize * 8);\n        }\n        else {\n            bits = reader.loadBits(dataBytesize * 8);\n        }\n    }\n    // Refs\n    let refs = [];\n    for (let i = 0; i < refsCount; i++) {\n        refs.push(reader.loadUint(sizeBytes * 8));\n    }\n    // Result\n    return {\n        bits,\n        refs,\n        exotic\n    };\n}\nfunction calcCellSize(cell, sizeBytes) {\n    return 2 /* D1+D2 */ + Math.ceil(cell.bits.length / 8) + cell.refs.length * sizeBytes;\n}\nfunction parseBoc(src) {\n    let reader = new BitReader_1.BitReader(new BitString_1.BitString(src, 0, src.length * 8));\n    let magic = reader.loadUint(32);\n    if (magic === 0x68ff65f3) {\n        let size = reader.loadUint(8);\n        let offBytes = reader.loadUint(8);\n        let cells = reader.loadUint(size * 8);\n        let roots = reader.loadUint(size * 8); // Must be 1\n        let absent = reader.loadUint(size * 8);\n        let totalCellSize = reader.loadUint(offBytes * 8);\n        let index = reader.loadBuffer(cells * offBytes);\n        let cellData = reader.loadBuffer(totalCellSize);\n        return {\n            size,\n            offBytes,\n            cells,\n            roots,\n            absent,\n            totalCellSize,\n            index,\n            cellData,\n            root: [0]\n        };\n    }\n    else if (magic === 0xacc3a728) {\n        let size = reader.loadUint(8);\n        let offBytes = reader.loadUint(8);\n        let cells = reader.loadUint(size * 8);\n        let roots = reader.loadUint(size * 8); // Must be 1\n        let absent = reader.loadUint(size * 8);\n        let totalCellSize = reader.loadUint(offBytes * 8);\n        let index = reader.loadBuffer(cells * offBytes);\n        let cellData = reader.loadBuffer(totalCellSize);\n        let crc32 = reader.loadBuffer(4);\n        if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {\n            throw Error('Invalid CRC32C');\n        }\n        return {\n            size,\n            offBytes,\n            cells,\n            roots,\n            absent,\n            totalCellSize,\n            index,\n            cellData,\n            root: [0]\n        };\n    }\n    else if (magic === 0xb5ee9c72) {\n        let hasIdx = reader.loadUint(1);\n        let hasCrc32c = reader.loadUint(1);\n        let hasCacheBits = reader.loadUint(1);\n        let flags = reader.loadUint(2); // Must be 0\n        let size = reader.loadUint(3);\n        let offBytes = reader.loadUint(8);\n        let cells = reader.loadUint(size * 8);\n        let roots = reader.loadUint(size * 8);\n        let absent = reader.loadUint(size * 8);\n        let totalCellSize = reader.loadUint(offBytes * 8);\n        let root = [];\n        for (let i = 0; i < roots; i++) {\n            root.push(reader.loadUint(size * 8));\n        }\n        let index = null;\n        if (hasIdx) {\n            index = reader.loadBuffer(cells * offBytes);\n        }\n        let cellData = reader.loadBuffer(totalCellSize);\n        if (hasCrc32c) {\n            let crc32 = reader.loadBuffer(4);\n            if (!(0, crc32c_1.crc32c)(src.subarray(0, src.length - 4)).equals(crc32)) {\n                throw Error('Invalid CRC32C');\n            }\n        }\n        return {\n            size,\n            offBytes,\n            cells,\n            roots,\n            absent,\n            totalCellSize,\n            index,\n            cellData,\n            root\n        };\n    }\n    else {\n        throw Error('Invalid magic');\n    }\n}\nexports.parseBoc = parseBoc;\nfunction deserializeBoc(src) {\n    //\n    // Parse BOC\n    //\n    let boc = parseBoc(src);\n    let reader = new BitReader_1.BitReader(new BitString_1.BitString(boc.cellData, 0, boc.cellData.length * 8));\n    //\n    // Load cells\n    //\n    let cells = [];\n    for (let i = 0; i < boc.cells; i++) {\n        let cll = readCell(reader, boc.size);\n        cells.push({ ...cll, result: null });\n    }\n    //\n    // Build cells\n    //\n    for (let i = cells.length - 1; i >= 0; i--) {\n        if (cells[i].result) {\n            throw Error('Impossible');\n        }\n        let refs = [];\n        for (let r of cells[i].refs) {\n            if (!cells[r].result) {\n                throw Error('Invalid BOC file');\n            }\n            refs.push(cells[r].result);\n        }\n        cells[i].result = new Cell_1.Cell({ bits: cells[i].bits, refs, exotic: cells[i].exotic });\n    }\n    //\n    // Load roots\n    //\n    let roots = [];\n    for (let i = 0; i < boc.root.length; i++) {\n        roots.push(cells[boc.root[i]].result);\n    }\n    //\n    // Return\n    //\n    return roots;\n}\nexports.deserializeBoc = deserializeBoc;\nfunction writeCellToBuilder(cell, refs, sizeBytes, to) {\n    let d1 = (0, descriptor_1.getRefsDescriptor)(cell.refs, cell.mask.value, cell.type);\n    let d2 = (0, descriptor_1.getBitsDescriptor)(cell.bits);\n    to.writeUint(d1, 8);\n    to.writeUint(d2, 8);\n    to.writeBuffer((0, paddedBits_1.bitsToPaddedBuffer)(cell.bits));\n    for (let r of refs) {\n        to.writeUint(r, sizeBytes * 8);\n    }\n}\nfunction serializeBoc(root, opts) {\n    // Sort cells\n    let allCells = (0, topologicalSort_1.topologicalSort)(root);\n    // Calculcate parameters\n    let cellsNum = allCells.length;\n    let has_idx = opts.idx;\n    let has_crc32c = opts.crc32;\n    let has_cache_bits = false;\n    let flags = 0;\n    let sizeBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(cellsNum, 'uint') / 8), 1);\n    let totalCellSize = 0;\n    let index = [];\n    for (let c of allCells) {\n        let sz = calcCellSize(c.cell, sizeBytes);\n        totalCellSize += sz;\n        index.push(totalCellSize);\n    }\n    let offsetBytes = Math.max(Math.ceil((0, bitsForNumber_1.bitsForNumber)(totalCellSize, 'uint') / 8), 1);\n    let totalSize = (4 + // magic\n        1 + // flags and s_bytes\n        1 + // offset_bytes\n        3 * sizeBytes + // cells_num, roots, complete\n        offsetBytes + // full_size\n        1 * sizeBytes + // root_idx\n        (has_idx ? cellsNum * offsetBytes : 0) +\n        totalCellSize +\n        (has_crc32c ? 4 : 0)) * 8;\n    // Serialize\n    let builder = new BitBuilder_1.BitBuilder(totalSize);\n    builder.writeUint(0xb5ee9c72, 32); // Magic\n    builder.writeBit(has_idx); // Has index\n    builder.writeBit(has_crc32c); // Has crc32c\n    builder.writeBit(has_cache_bits); // Has cache bits\n    builder.writeUint(flags, 2); // Flags\n    builder.writeUint(sizeBytes, 3); // Size bytes\n    builder.writeUint(offsetBytes, 8); // Offset bytes\n    builder.writeUint(cellsNum, sizeBytes * 8); // Cells num\n    builder.writeUint(1, sizeBytes * 8); // Roots num\n    builder.writeUint(0, sizeBytes * 8); // Absent num\n    builder.writeUint(totalCellSize, offsetBytes * 8); // Total cell size\n    builder.writeUint(0, sizeBytes * 8); // Root id == 0\n    if (has_idx) { // Index\n        for (let i = 0; i < cellsNum; i++) {\n            builder.writeUint(index[i], offsetBytes * 8);\n        }\n    }\n    for (let i = 0; i < cellsNum; i++) { // Cells\n        writeCellToBuilder(allCells[i].cell, allCells[i].refs, sizeBytes, builder);\n    }\n    if (has_crc32c) {\n        let crc32 = (0, crc32c_1.crc32c)(builder.buffer()); // builder.buffer() is fast since it doesn't allocate new memory\n        builder.writeBuffer(crc32);\n    }\n    // Sanity Check\n    let res = builder.buffer();\n    if (res.length !== totalSize / 8) {\n        throw Error('Internal error');\n    }\n    return res;\n}\nexports.serializeBoc = serializeBoc;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Cell = void 0;\nconst symbol_inspect_1 = __importDefault(require(\"symbol.inspect\"));\nconst BitString_1 = require(\"./BitString\");\nconst CellType_1 = require(\"./CellType\");\nconst Slice_1 = require(\"./Slice\");\nconst resolveExotic_1 = require(\"./cell/resolveExotic\");\nconst wonderCalculator_1 = require(\"./cell/wonderCalculator\");\nconst serialization_1 = require(\"./cell/serialization\");\nconst BitReader_1 = require(\"./BitReader\");\nconst Builder_1 = require(\"./Builder\");\n/**\n * Cell as described in TVM spec\n */\nclass Cell {\n    /**\n     * Deserialize cells from BOC\n     * @param src source buffer\n     * @returns array of cells\n     */\n    static fromBoc(src) {\n        return (0, serialization_1.deserializeBoc)(src);\n    }\n    /**\n     * Helper class that deserializes a single cell from BOC in base64\n     * @param src source string\n     */\n    static fromBase64(src) {\n        let parsed = Cell.fromBoc(Buffer.from(src, 'base64'));\n        if (parsed.length !== 1) {\n            throw new Error(\"Deserialized more than one cell\");\n        }\n        return parsed[0];\n    }\n    constructor(opts) {\n        // Level and depth information\n        this._hashes = [];\n        this._depths = [];\n        /**\n         * Beging cell parsing\n         * @returns a new slice\n         */\n        this.beginParse = (allowExotic = false) => {\n            if (this.isExotic && !allowExotic) {\n                throw new Error(\"Exotic cells cannot be parsed\");\n            }\n            return new Slice_1.Slice(new BitReader_1.BitReader(this.bits), this.refs);\n        };\n        /**\n         * Get cell hash\n         * @param level level\n         * @returns cell hash\n         */\n        this.hash = (level = 3) => {\n            return this._hashes[Math.min(this._hashes.length - 1, level)];\n        };\n        /**\n         * Get cell depth\n         * @param level level\n         * @returns cell depth\n         */\n        this.depth = (level = 3) => {\n            return this._depths[Math.min(this._depths.length - 1, level)];\n        };\n        /**\n         * Get cell level\n         * @returns cell level\n         */\n        this.level = () => {\n            return this.mask.level;\n        };\n        /**\n         * Checks cell to be euqal to another cell\n         * @param other other cell\n         * @returns true if cells are equal\n         */\n        this.equals = (other) => {\n            return this.hash().equals(other.hash());\n        };\n        this[_a] = () => this.toString();\n        // Resolve bits\n        let bits = BitString_1.BitString.EMPTY;\n        if (opts && opts.bits) {\n            bits = opts.bits;\n        }\n        // Resolve refs\n        let refs = [];\n        if (opts && opts.refs) {\n            refs = [...opts.refs];\n        }\n        // Resolve type\n        let hashes;\n        let depths;\n        let mask;\n        let type = CellType_1.CellType.Ordinary;\n        if (opts && opts.exotic) {\n            // Resolve exotic cell\n            let resolved = (0, resolveExotic_1.resolveExotic)(bits, refs);\n            // Perform wonders\n            let wonders = (0, wonderCalculator_1.wonderCalculator)(resolved.type, bits, refs);\n            // Copy results\n            mask = wonders.mask;\n            depths = wonders.depths;\n            hashes = wonders.hashes;\n            type = resolved.type;\n        }\n        else {\n            // Check correctness\n            if (refs.length > 4) {\n                throw new Error(\"Invalid number of references\");\n            }\n            if (bits.length > 1023) {\n                throw new Error(`Bits overflow: ${bits.length} > 1023`);\n            }\n            // Perform wonders\n            let wonders = (0, wonderCalculator_1.wonderCalculator)(CellType_1.CellType.Ordinary, bits, refs);\n            // Copy results\n            mask = wonders.mask;\n            depths = wonders.depths;\n            hashes = wonders.hashes;\n            type = CellType_1.CellType.Ordinary;\n        }\n        // Set fields\n        this.type = type;\n        this.bits = bits;\n        this.refs = refs;\n        this.mask = mask;\n        this._depths = depths;\n        this._hashes = hashes;\n        Object.freeze(this);\n        Object.freeze(this.refs);\n        Object.freeze(this.bits);\n        Object.freeze(this.mask);\n        Object.freeze(this._depths);\n        Object.freeze(this._hashes);\n    }\n    /**\n     * Check if cell is exotic\n     */\n    get isExotic() {\n        return this.type !== CellType_1.CellType.Ordinary;\n    }\n    /**\n     * Serializes cell to BOC\n     * @param opts options\n     */\n    toBoc(opts) {\n        let idx = (opts && opts.idx !== null && opts.idx !== undefined) ? opts.idx : false;\n        let crc32 = (opts && opts.crc32 !== null && opts.crc32 !== undefined) ? opts.crc32 : true;\n        return (0, serialization_1.serializeBoc)(this, { idx, crc32 });\n    }\n    /**\n     * Format cell to string\n     * @param indent indentation\n     * @returns string representation\n     */\n    toString(indent) {\n        let id = indent || '';\n        let t = 'x';\n        if (this.isExotic) {\n            if (this.type === CellType_1.CellType.MerkleProof) {\n                t = 'p';\n            }\n            else if (this.type === CellType_1.CellType.MerkleUpdate) {\n                t = 'u';\n            }\n            else if (this.type === CellType_1.CellType.PrunedBranch) {\n                t = 'p';\n            }\n        }\n        let s = id + (this.isExotic ? t : 'x') + '{' + this.bits.toString() + '}';\n        for (let k in this.refs) {\n            const i = this.refs[k];\n            s += '\\n' + i.toString(id + ' ');\n        }\n        return s;\n    }\n    /**\n     * Covnert cell to slice\n     * @returns slice\n     */\n    asSlice() {\n        return this.beginParse();\n    }\n    /**\n     * Convert cell to a builder that has this cell stored\n     * @returns builder\n     */\n    asBuilder() {\n        return (0, Builder_1.beginCell)().storeSlice(this.asSlice());\n    }\n}\nexports.Cell = Cell;\n_a = symbol_inspect_1.default;\nCell.EMPTY = new Cell();\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Builder = exports.beginCell = void 0;\nconst BitBuilder_1 = require(\"./BitBuilder\");\nconst Cell_1 = require(\"./Cell\");\nconst strings_1 = require(\"./utils/strings\");\n/**\n * Start building a cell\n * @returns a new builder\n */\nfunction beginCell() {\n    return new Builder();\n}\nexports.beginCell = beginCell;\n/**\n * Builder for Cells\n */\nclass Builder {\n    constructor() {\n        this._bits = new BitBuilder_1.BitBuilder();\n        this._refs = [];\n    }\n    /**\n     * Bits written so far\n     */\n    get bits() {\n        return this._bits.length;\n    }\n    /**\n     * References written so far\n     */\n    get refs() {\n        return this._refs.length;\n    }\n    /**\n     * Available bits\n     */\n    get availableBits() {\n        return 1023 - this.bits;\n    }\n    /**\n     * Available references\n     */\n    get availableRefs() {\n        return 4 - this.refs;\n    }\n    /**\n     * Write a single bit\n     * @param value bit to write, true or positive number for 1, false or zero or negative for 0\n     * @returns this builder\n     */\n    storeBit(value) {\n        this._bits.writeBit(value);\n        return this;\n    }\n    /**\n     * Write bits from BitString\n     * @param src source bits\n     * @returns this builder\n     */\n    storeBits(src) {\n        this._bits.writeBits(src);\n        return this;\n    }\n    /**\n     * Store Buffer\n     * @param src source buffer\n     * @param bytes optional number of bytes to write\n     * @returns this builder\n     */\n    storeBuffer(src, bytes) {\n        if (bytes !== undefined && bytes !== null) {\n            if (src.length !== bytes) {\n                throw Error(`Buffer length ${src.length} is not equal to ${bytes}`);\n            }\n        }\n        this._bits.writeBuffer(src);\n        return this;\n    }\n    /**\n     * Store Maybe Buffer\n     * @param src source buffer or null\n     * @param bytes optional number of bytes to write\n     * @returns this builder\n     */\n    storeMaybeBuffer(src, bytes) {\n        if (src !== null) {\n            this.storeBit(1);\n            this.storeBuffer(src, bytes);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store uint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeUint(value, bits) {\n        this._bits.writeUint(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe uint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeMaybeUint(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeUint(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store int value\n     * @param value value as bigint or number\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeInt(value, bits) {\n        this._bits.writeInt(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe int value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write\n     * @returns this builder\n     */\n    storeMaybeInt(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeInt(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store varuint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeVarUint(value, bits) {\n        this._bits.writeVarUint(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe varuint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeMaybeVarUint(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeVarUint(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store varint value\n     * @param value value as bigint or number\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeVarInt(value, bits) {\n        this._bits.writeVarInt(value, bits);\n        return this;\n    }\n    /**\n     * Store maybe varint value\n     * @param value value as bigint or number, null or undefined\n     * @param bits number of bits to write to header\n     * @returns this builder\n     */\n    storeMaybeVarInt(value, bits) {\n        if (value !== null && value !== undefined) {\n            this.storeBit(1);\n            this.storeVarInt(value, bits);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store coins value\n     * @param amount amount of coins\n     * @returns this builder\n     */\n    storeCoins(amount) {\n        this._bits.writeCoins(amount);\n        return this;\n    }\n    /**\n     * Store maybe coins value\n     * @param amount amount of coins, null or undefined\n     * @returns this builder\n     */\n    storeMaybeCoins(amount) {\n        if (amount !== null && amount !== undefined) {\n            this.storeBit(1);\n            this.storeCoins(amount);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store address\n     * @param addres address to store\n     * @returns this builder\n     */\n    storeAddress(address) {\n        this._bits.writeAddress(address);\n        return this;\n    }\n    /**\n     * Store reference\n     * @param cell cell or builder to store\n     * @returns this builder\n     */\n    storeRef(cell) {\n        // Check refs\n        if (this._refs.length >= 4) {\n            throw new Error(\"Too many references\");\n        }\n        // Store reference\n        if (cell instanceof Cell_1.Cell) {\n            this._refs.push(cell);\n        }\n        else if (cell instanceof Builder) {\n            this._refs.push(cell.endCell());\n        }\n        else {\n            throw new Error(\"Invalid argument\");\n        }\n        return this;\n    }\n    /**\n     * Store reference if not null\n     * @param cell cell or builder to store\n     * @returns this builder\n     */\n    storeMaybeRef(cell) {\n        if (cell) {\n            this.storeBit(1);\n            this.storeRef(cell);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store slice it in this builder\n     * @param src source slice\n     */\n    storeSlice(src) {\n        let c = src.clone();\n        if (c.remainingBits > 0) {\n            this.storeBits(c.loadBits(c.remainingBits));\n        }\n        while (c.remainingRefs > 0) {\n            this.storeRef(c.loadRef());\n        }\n        return this;\n    }\n    /**\n     * Store slice in this builder if not null\n     * @param src source slice\n     */\n    storeMaybeSlice(src) {\n        if (src) {\n            this.storeBit(1);\n            this.storeSlice(src);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store builder\n     * @param src builder to store\n     * @returns this builder\n     */\n    storeBuilder(src) {\n        return this.storeSlice(src.endCell().beginParse());\n    }\n    /**\n     * Store builder if not null\n     * @param src builder to store\n     * @returns this builder\n     */\n    storeMaybeBuilder(src) {\n        if (src) {\n            this.storeBit(1);\n            this.storeBuilder(src);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store writer or builder\n     * @param writer writer or builder to store\n     * @returns this builder\n     */\n    storeWritable(writer) {\n        if (typeof writer === 'object') {\n            writer.writeTo(this);\n        }\n        else {\n            writer(this);\n        }\n        return this;\n    }\n    /**\n     * Store writer or builder if not null\n     * @param writer writer or builder to store\n     * @returns this builder\n     */\n    storeMaybeWritable(writer) {\n        if (writer) {\n            this.storeBit(1);\n            this.storeWritable(writer);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store object in this builder\n     * @param writer Writable or writer functuin\n     */\n    store(writer) {\n        this.storeWritable(writer);\n        return this;\n    }\n    /**\n     * Store string tail\n     * @param src source string\n     * @returns this builder\n     */\n    storeStringTail(src) {\n        (0, strings_1.writeString)(src, this);\n        return this;\n    }\n    /**\n     * Store string tail\n     * @param src source string\n     * @returns this builder\n     */\n    storeMaybeStringTail(src) {\n        if (src !== null && src !== undefined) {\n            this.storeBit(1);\n            (0, strings_1.writeString)(src, this);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store string tail in ref\n     * @param src source string\n     * @returns this builder\n     */\n    storeStringRefTail(src) {\n        this.storeRef(beginCell()\n            .storeStringTail(src));\n        return this;\n    }\n    /**\n     * Store maybe string tail in ref\n     * @param src source string\n     * @returns this builder\n     */\n    storeMaybeStringRefTail(src) {\n        if (src !== null && src !== undefined) {\n            this.storeBit(1);\n            this.storeStringRefTail(src);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store dictionary in this builder\n     * @param dict dictionary to store\n     * @returns this builder\n     */\n    storeDict(dict, key, value) {\n        if (dict) {\n            dict.store(this, key, value);\n        }\n        else {\n            this.storeBit(0);\n        }\n        return this;\n    }\n    /**\n     * Store dictionary in this builder directly\n     * @param dict dictionary to store\n     * @returns this builder\n     */\n    storeDictDirect(dict, key, value) {\n        dict.storeDirect(this, key, value);\n        return this;\n    }\n    /**\n     * Complete cell\n     * @param opts options\n     * @returns cell\n     */\n    endCell(opts) {\n        return new Cell_1.Cell({\n            bits: this._bits.build(),\n            refs: this._refs,\n            exotic: opts?.exotic\n        });\n    }\n    /**\n     * Convert to cell\n     * @returns cell\n     */\n    asCell() {\n        return this.endCell();\n    }\n    /**\n     * Convert to slice\n     * @returns slice\n     */\n    asSlice() {\n        return this.endCell().beginParse();\n    }\n}\nexports.Builder = Builder;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SimpleLibraryValue = exports.storeSimpleLibrary = exports.loadSimpleLibrary = void 0;\nfunction loadSimpleLibrary(slice) {\n    return {\n        public: slice.loadBit(),\n        root: slice.loadRef()\n    };\n}\nexports.loadSimpleLibrary = loadSimpleLibrary;\nfunction storeSimpleLibrary(src) {\n    return (builder) => {\n        builder.storeBit(src.public);\n        builder.storeRef(src.root);\n    };\n}\nexports.storeSimpleLibrary = storeSimpleLibrary;\nexports.SimpleLibraryValue = {\n    serialize(src, builder) {\n        storeSimpleLibrary(src)(builder);\n    },\n    parse(src) {\n        return loadSimpleLibrary(src);\n    },\n};\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTickTock = exports.loadTickTock = void 0;\nfunction loadTickTock(slice) {\n    return {\n        tick: slice.loadBit(),\n        tock: slice.loadBit()\n    };\n}\nexports.loadTickTock = loadTickTock;\nfunction storeTickTock(src) {\n    return (builder) => {\n        builder.storeBit(src.tick);\n        builder.storeBit(src.tock);\n    };\n}\nexports.storeTickTock = storeTickTock;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeStateInit = exports.loadStateInit = void 0;\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst SimpleLibrary_1 = require(\"./SimpleLibrary\");\nconst TickTock_1 = require(\"./TickTock\");\n;\nfunction loadStateInit(slice) {\n    // Split Depth\n    let splitDepth;\n    if (slice.loadBit()) {\n        splitDepth = slice.loadUint(5);\n    }\n    // TickTock\n    let special;\n    if (slice.loadBit()) {\n        special = (0, TickTock_1.loadTickTock)(slice);\n    }\n    // Code and Data\n    let code = slice.loadMaybeRef();\n    let data = slice.loadMaybeRef();\n    // Libs\n    let libraries = slice.loadDict(Dictionary_1.Dictionary.Keys.BigUint(256), SimpleLibrary_1.SimpleLibraryValue);\n    if (libraries.size === 0) {\n        libraries = undefined;\n    }\n    return {\n        splitDepth,\n        special,\n        code,\n        data,\n        libraries\n    };\n}\nexports.loadStateInit = loadStateInit;\nfunction storeStateInit(src) {\n    return (builder) => {\n        if (src.splitDepth !== null && src.splitDepth !== undefined) {\n            builder.storeBit(true);\n            builder.storeUint(src.splitDepth, 5);\n        }\n        else {\n            builder.storeBit(false);\n        }\n        if (src.special !== null && src.special !== undefined) {\n            builder.storeBit(true);\n            builder.store((0, TickTock_1.storeTickTock)(src.special));\n        }\n        else {\n            builder.storeBit(false);\n        }\n        builder.storeMaybeRef(src.code);\n        builder.storeMaybeRef(src.data);\n        builder.storeDict(src.libraries);\n    };\n}\nexports.storeStateInit = storeStateInit;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.contractAddress = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst StateInit_1 = require(\"../types/StateInit\");\nconst Address_1 = require(\"./Address\");\nfunction contractAddress(workchain, init) {\n    let hash = (0, Builder_1.beginCell)()\n        .store((0, StateInit_1.storeStateInit)(init))\n        .endCell()\n        .hash();\n    return new Address_1.Address(workchain, hash);\n}\nexports.contractAddress = contractAddress;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.parseTuple = exports.serializeTuple = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst INT64_MIN = BigInt('-9223372036854775808');\nconst INT64_MAX = BigInt('9223372036854775807');\n// vm_stk_null#00 = VmStackValue;\n// vm_stk_tinyint#01 value:int64 = VmStackValue;\n// vm_stk_int#0201_ value:int257 = VmStackValue;\n// vm_stk_nan#02ff = VmStackValue;\n// vm_stk_cell#03 cell:^Cell = VmStackValue;\n//_ cell:^Cell st_bits:(## 10) end_bits:(## 10) { st_bits <= end_bits }\n//   st_ref:(#<= 4) end_ref:(#<= 4) { st_ref <= end_ref } = VmCellSlice;\n// vm_stk_slice#04 _:VmCellSlice = VmStackValue;\n// vm_stk_builder#05 cell:^Cell = VmStackValue;\n// vm_stk_cont#06 cont:VmCont = VmStackValue;\n// vm_tupref_nil$_ = VmTupleRef 0;\n// vm_tupref_single$_ entry:^VmStackValue = VmTupleRef 1;\n// vm_tupref_any$_ {n:#} ref:^(VmTuple (n + 2)) = VmTupleRef (n + 2);\n// vm_tuple_nil$_ = VmTuple 0;\n// vm_tuple_tcons$_ {n:#} head:(VmTupleRef n) tail:^VmStackValue = VmTuple (n + 1);\n// vm_stk_tuple#07 len:(## 16) data:(VmTuple len) = VmStackValue;\nfunction serializeTupleItem(src, builder) {\n    if (src.type === 'null') {\n        builder.storeUint(0x00, 8);\n    }\n    else if (src.type === 'int') {\n        if (src.value <= INT64_MAX && src.value >= INT64_MIN) {\n            builder.storeUint(0x01, 8);\n            builder.storeInt(src.value, 64);\n        }\n        else {\n            builder.storeUint(0x0100, 15);\n            builder.storeInt(src.value, 257);\n        }\n    }\n    else if (src.type === 'nan') {\n        builder.storeInt(0x02ff, 16);\n    }\n    else if (src.type === 'cell') {\n        builder.storeUint(0x03, 8);\n        builder.storeRef(src.cell);\n    }\n    else if (src.type === 'slice') {\n        builder.storeUint(0x04, 8);\n        builder.storeUint(0, 10);\n        builder.storeUint(src.cell.bits.length, 10);\n        builder.storeUint(0, 3);\n        builder.storeUint(src.cell.refs.length, 3);\n        builder.storeRef(src.cell);\n    }\n    else if (src.type === 'builder') {\n        builder.storeUint(0x05, 8);\n        builder.storeRef(src.cell);\n    }\n    else if (src.type === 'tuple') {\n        let head = null;\n        let tail = null;\n        for (let i = 0; i < src.items.length; i++) {\n            // Swap\n            let s = head;\n            head = tail;\n            tail = s;\n            if (i > 1) {\n                head = (0, Builder_1.beginCell)()\n                    .storeRef(tail)\n                    .storeRef(head)\n                    .endCell();\n            }\n            let bc = (0, Builder_1.beginCell)();\n            serializeTupleItem(src.items[i], bc);\n            tail = bc.endCell();\n        }\n        builder.storeUint(0x07, 8);\n        builder.storeUint(src.items.length, 16);\n        if (head) {\n            builder.storeRef(head);\n        }\n        if (tail) {\n            builder.storeRef(tail);\n        }\n    }\n    else {\n        throw Error('Invalid value');\n    }\n}\nfunction parseStackItem(cs) {\n    let kind = cs.loadUint(8);\n    if (kind === 0) {\n        return { type: 'null' };\n    }\n    else if (kind === 1) {\n        return { type: 'int', value: cs.loadIntBig(64) };\n    }\n    else if (kind === 2) {\n        if (cs.loadUint(7) === 0) {\n            return { type: 'int', value: cs.loadIntBig(257) };\n        }\n        else {\n            cs.loadBit(); // must eq 1\n            return { type: 'nan' };\n        }\n    }\n    else if (kind === 3) {\n        return { type: 'cell', cell: cs.loadRef() };\n    }\n    else if (kind === 4) {\n        let startBits = cs.loadUint(10);\n        let endBits = cs.loadUint(10);\n        let startRefs = cs.loadUint(3);\n        let endRefs = cs.loadUint(3);\n        // Copy to new cell\n        let rs = cs.loadRef().beginParse();\n        rs.skip(startBits);\n        let dt = rs.loadBits(endBits - startBits);\n        let builder = (0, Builder_1.beginCell)()\n            .storeBits(dt);\n        // Copy refs if exist\n        if (startRefs < endRefs) {\n            for (let i = 0; i < startRefs; i++) {\n                rs.loadRef();\n            }\n            for (let i = 0; i < endRefs - startRefs; i++) {\n                builder.storeRef(rs.loadRef());\n            }\n        }\n        return { type: 'slice', cell: builder.endCell() };\n    }\n    else if (kind === 5) {\n        return { type: 'builder', cell: cs.loadRef() };\n    }\n    else if (kind === 7) {\n        let length = cs.loadUint(16);\n        let items = [];\n        if (length > 1) {\n            let head = cs.loadRef().beginParse();\n            let tail = cs.loadRef().beginParse();\n            items.unshift(parseStackItem(tail));\n            for (let i = 0; i < length - 2; i++) {\n                let ohead = head;\n                head = ohead.loadRef().beginParse();\n                tail = ohead.loadRef().beginParse();\n                items.unshift(parseStackItem(tail));\n            }\n            items.unshift(parseStackItem(head));\n        }\n        else if (length === 1) {\n            items.push(parseStackItem(cs.loadRef().beginParse()));\n        }\n        return { type: 'tuple', items };\n    }\n    else {\n        throw Error('Unsupported stack item');\n    }\n}\n//\n// Stack parsing\n// Source: https://github.com/ton-foundation/ton/blob/ae5c0720143e231c32c3d2034cfe4e533a16d969/crypto/block/block.tlb#L783\n//\n// vm_stack#_ depth:(## 24) stack:(VmStackList depth) = VmStack;\n// vm_stk_cons#_ {n:#} rest:^(VmStackList n) tos:VmStackValue = VmStackList (n + 1);\n// vm_stk_nil#_ = VmStackList 0;\n//\nfunction serializeTupleTail(src, builder) {\n    if (src.length > 0) {\n        // rest:^(VmStackList n)\n        let tail = (0, Builder_1.beginCell)();\n        serializeTupleTail(src.slice(0, src.length - 1), tail);\n        builder.storeRef(tail.endCell());\n        // tos\n        serializeTupleItem(src[src.length - 1], builder);\n    }\n}\nfunction serializeTuple(src) {\n    let builder = (0, Builder_1.beginCell)();\n    builder.storeUint(src.length, 24);\n    let r = [...src];\n    serializeTupleTail(r, builder);\n    return builder.endCell();\n}\nexports.serializeTuple = serializeTuple;\nfunction parseTuple(src) {\n    let res = [];\n    let cs = src.beginParse();\n    let size = cs.loadUint(24);\n    for (let i = 0; i < size; i++) {\n        let next = cs.loadRef();\n        res.unshift(parseStackItem(cs));\n        cs = next.beginParse();\n    }\n    return res;\n}\nexports.parseTuple = parseTuple;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TupleReader = void 0;\nclass TupleReader {\n    constructor(items) {\n        this.items = [...items];\n    }\n    get remaining() {\n        return this.items.length;\n    }\n    peek() {\n        if (this.items.length === 0) {\n            throw Error('EOF');\n        }\n        return this.items[0];\n    }\n    pop() {\n        if (this.items.length === 0) {\n            throw Error('EOF');\n        }\n        let res = this.items[0];\n        this.items.splice(0, 1);\n        return res;\n    }\n    skip(num = 1) {\n        for (let i = 0; i < num; i++) {\n            this.pop();\n        }\n        return this;\n    }\n    readBigNumber() {\n        let popped = this.pop();\n        if (popped.type !== 'int') {\n            throw Error('Not a number');\n        }\n        return popped.value;\n    }\n    readBigNumberOpt() {\n        let popped = this.pop();\n        if (popped.type === 'null') {\n            return null;\n        }\n        if (popped.type !== 'int') {\n            throw Error('Not a number');\n        }\n        return popped.value;\n    }\n    readNumber() {\n        return Number(this.readBigNumber());\n    }\n    readNumberOpt() {\n        let r = this.readBigNumberOpt();\n        if (r !== null) {\n            return Number(r);\n        }\n        else {\n            return null;\n        }\n    }\n    readBoolean() {\n        let res = this.readNumber();\n        return res === 0 ? false : true;\n    }\n    readBooleanOpt() {\n        let res = this.readNumberOpt();\n        if (res !== null) {\n            return res === 0 ? false : true;\n        }\n        else {\n            return null;\n        }\n    }\n    readAddress() {\n        let r = this.readCell().beginParse().loadAddress();\n        if (r !== null) {\n            return r;\n        }\n        else {\n            throw Error('Not an address');\n        }\n    }\n    readAddressOpt() {\n        let r = this.readCellOpt();\n        if (r !== null) {\n            return r.beginParse().loadMaybeAddress();\n        }\n        else {\n            return null;\n        }\n    }\n    readCell() {\n        let popped = this.pop();\n        if (popped.type !== 'cell' && popped.type !== 'slice' && popped.type !== 'builder') {\n            throw Error('Not a cell: ' + popped.type);\n        }\n        return popped.cell;\n    }\n    readCellOpt() {\n        let popped = this.pop();\n        if (popped.type === 'null') {\n            return null;\n        }\n        if (popped.type !== 'cell' && popped.type !== 'slice' && popped.type !== 'builder') {\n            throw Error('Not a cell');\n        }\n        return popped.cell;\n    }\n    readTuple() {\n        let popped = this.pop();\n        if (popped.type !== 'tuple') {\n            throw Error('Not a tuple');\n        }\n        return new TupleReader(popped.items);\n    }\n    readTupleOpt() {\n        let popped = this.pop();\n        if (popped.type === 'null') {\n            return null;\n        }\n        if (popped.type !== 'tuple') {\n            throw Error('Not a tuple');\n        }\n        return new TupleReader(popped.items);\n    }\n    static readLispList(reader) {\n        const result = [];\n        let tail = reader;\n        while (tail !== null) {\n            var head = tail.pop();\n            if (tail.items.length === 0 || (tail.items[0].type !== 'tuple' && tail.items[0].type !== 'null')) {\n                throw Error('Lisp list consists only from (any, tuple) elements and ends with null');\n            }\n            tail = tail.readTupleOpt();\n            result.push(head);\n        }\n        return result;\n    }\n    readLispListDirect() {\n        if (this.items.length === 1 && this.items[0].type === 'null') {\n            return [];\n        }\n        return TupleReader.readLispList(this);\n    }\n    readLispList() {\n        return TupleReader.readLispList(this.readTupleOpt());\n    }\n    readBuffer() {\n        let s = this.readCell().beginParse();\n        if (s.remainingRefs !== 0) {\n            throw Error('Not a buffer');\n        }\n        if (s.remainingBits % 8 !== 0) {\n            throw Error('Not a buffer');\n        }\n        return s.loadBuffer(s.remainingBits / 8);\n    }\n    readBufferOpt() {\n        let popped = this.peek();\n        if (popped.type === 'null') {\n            return null;\n        }\n        let s = this.readCell().beginParse();\n        if (s.remainingRefs !== 0) {\n            throw Error('Not a buffer');\n        }\n        if (s.remainingBits % 8 !== 0) {\n            throw Error('Not a buffer');\n        }\n        return s.loadBuffer(s.remainingBits / 8);\n    }\n    readString() {\n        let s = this.readCell().beginParse();\n        return s.loadStringTail();\n    }\n    readStringOpt() {\n        let popped = this.peek();\n        if (popped.type === 'null') {\n            return null;\n        }\n        let s = this.readCell().beginParse();\n        return s.loadStringTail();\n    }\n}\nexports.TupleReader = TupleReader;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.TupleBuilder = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst Cell_1 = require(\"../boc/Cell\");\nconst Slice_1 = require(\"../boc/Slice\");\nclass TupleBuilder {\n    constructor() {\n        this._tuple = [];\n    }\n    writeNumber(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            this._tuple.push({ type: 'int', value: BigInt(v) });\n        }\n    }\n    writeBoolean(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            this._tuple.push({ type: 'int', value: v ? -1n : 0n });\n        }\n    }\n    writeBuffer(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            this._tuple.push({ type: 'slice', cell: (0, Builder_1.beginCell)().storeBuffer(v).endCell() });\n        }\n    }\n    writeString(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            this._tuple.push({ type: 'slice', cell: (0, Builder_1.beginCell)().storeStringTail(v).endCell() });\n        }\n    }\n    writeCell(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            if (v instanceof Cell_1.Cell) {\n                this._tuple.push({ type: 'cell', cell: v });\n            }\n            else if (v instanceof Slice_1.Slice) {\n                this._tuple.push({ type: 'cell', cell: v.asCell() });\n            }\n        }\n    }\n    writeSlice(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            if (v instanceof Cell_1.Cell) {\n                this._tuple.push({ type: 'slice', cell: v });\n            }\n            else if (v instanceof Slice_1.Slice) {\n                this._tuple.push({ type: 'slice', cell: v.asCell() });\n            }\n        }\n    }\n    writeBuilder(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            if (v instanceof Cell_1.Cell) {\n                this._tuple.push({ type: 'builder', cell: v });\n            }\n            else if (v instanceof Slice_1.Slice) {\n                this._tuple.push({ type: 'builder', cell: v.asCell() });\n            }\n        }\n    }\n    writeTuple(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            this._tuple.push({ type: 'tuple', items: v });\n        }\n    }\n    writeAddress(v) {\n        if (v === null || v === undefined) {\n            this._tuple.push({ type: 'null' });\n        }\n        else {\n            this._tuple.push({ type: 'slice', cell: (0, Builder_1.beginCell)().storeAddress(v).endCell() });\n        }\n    }\n    build() {\n        return [...this._tuple];\n    }\n}\nexports.TupleBuilder = TupleBuilder;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.fromNano = exports.toNano = void 0;\nfunction toNano(src) {\n    if (typeof src === 'bigint') {\n        return src * 1000000000n;\n    }\n    else {\n        if (typeof src === 'number') {\n            if (!Number.isFinite(src)) {\n                throw Error('Invalid number');\n            }\n            if (Math.log10(src) <= 6) {\n                src = src.toLocaleString('en', { minimumFractionDigits: 9, useGrouping: false });\n            }\n            else if (src - Math.trunc(src) === 0) {\n                src = src.toLocaleString('en', { maximumFractionDigits: 0, useGrouping: false });\n            }\n            else {\n                throw Error('Not enough precision for a number value. Use string value instead');\n            }\n        }\n        // Check sign\n        let neg = false;\n        while (src.startsWith('-')) {\n            neg = !neg;\n            src = src.slice(1);\n        }\n        // Split string\n        if (src === '.') {\n            throw Error('Invalid number');\n        }\n        let parts = src.split('.');\n        if (parts.length > 2) {\n            throw Error('Invalid number');\n        }\n        // Prepare parts\n        let whole = parts[0];\n        let frac = parts[1];\n        if (!whole) {\n            whole = '0';\n        }\n        if (!frac) {\n            frac = '0';\n        }\n        if (frac.length > 9) {\n            throw Error('Invalid number');\n        }\n        while (frac.length < 9) {\n            frac += '0';\n        }\n        // Convert\n        let r = BigInt(whole) * 1000000000n + BigInt(frac);\n        if (neg) {\n            r = -r;\n        }\n        return r;\n    }\n}\nexports.toNano = toNano;\nfunction fromNano(src) {\n    let v = BigInt(src);\n    let neg = false;\n    if (v < 0) {\n        neg = true;\n        v = -v;\n    }\n    // Convert fraction\n    let frac = v % 1000000000n;\n    let facStr = frac.toString();\n    while (facStr.length < 9) {\n        facStr = '0' + facStr;\n    }\n    facStr = facStr.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    // Convert whole\n    let whole = v / 1000000000n;\n    let wholeStr = whole.toString();\n    // Value\n    let value = `${wholeStr}${facStr === '0' ? '' : `.${facStr}`}`;\n    if (neg) {\n        value = '-' + value;\n    }\n    return value;\n}\nexports.fromNano = fromNano;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.comment = exports.external = exports.internal = void 0;\nconst Address_1 = require(\"../address/Address\");\nconst Cell_1 = require(\"../boc/Cell\");\nconst Builder_1 = require(\"../boc/Builder\");\nconst convert_1 = require(\"../utils/convert\");\nfunction internal(src) {\n    // Resolve bounce\n    let bounce = true;\n    if (src.bounce !== null && src.bounce !== undefined) {\n        bounce = src.bounce;\n    }\n    // Resolve address\n    let to;\n    if (typeof src.to === 'string') {\n        to = Address_1.Address.parse(src.to);\n    }\n    else if (Address_1.Address.isAddress(src.to)) {\n        to = src.to;\n    }\n    else {\n        throw new Error(`Invalid address ${src.to}`);\n    }\n    // Resolve value\n    let value;\n    if (typeof src.value === 'string') {\n        value = (0, convert_1.toNano)(src.value);\n    }\n    else {\n        value = src.value;\n    }\n    // Resolve body\n    let body = Cell_1.Cell.EMPTY;\n    if (typeof src.body === 'string') {\n        body = (0, Builder_1.beginCell)().storeUint(0, 32).storeStringTail(src.body).endCell();\n    }\n    else if (src.body) {\n        body = src.body;\n    }\n    // Create message\n    return {\n        info: {\n            type: 'internal',\n            dest: to,\n            value: { coins: value },\n            bounce,\n            ihrDisabled: true,\n            bounced: false,\n            ihrFee: 0n,\n            forwardFee: 0n,\n            createdAt: 0,\n            createdLt: 0n\n        },\n        init: src.init ?? undefined,\n        body: body\n    };\n}\nexports.internal = internal;\nfunction external(src) {\n    // Resolve address\n    let to;\n    if (typeof src.to === 'string') {\n        to = Address_1.Address.parse(src.to);\n    }\n    else if (Address_1.Address.isAddress(src.to)) {\n        to = src.to;\n    }\n    else {\n        throw new Error(`Invalid address ${src.to}`);\n    }\n    return {\n        info: {\n            type: 'external-in',\n            dest: to,\n            importFee: 0n\n        },\n        init: src.init ?? undefined,\n        body: src.body || Cell_1.Cell.EMPTY\n    };\n}\nexports.external = external;\nfunction comment(src) {\n    return (0, Builder_1.beginCell)()\n        .storeUint(0, 32)\n        .storeStringTail(src)\n        .endCell();\n}\nexports.comment = comment;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAccountState = exports.loadAccountState = void 0;\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadAccountState(cs) {\n    if (cs.loadBit()) {\n        return { type: 'active', state: (0, StateInit_1.loadStateInit)(cs) };\n    }\n    else if (cs.loadBit()) {\n        return { type: 'frozen', stateHash: cs.loadUintBig(256) };\n    }\n    else {\n        return { type: 'uninit' };\n    }\n}\nexports.loadAccountState = loadAccountState;\nfunction storeAccountState(src) {\n    return (builder) => {\n        if (src.type === 'active') {\n            builder.storeBit(true);\n            builder.store((0, StateInit_1.storeStateInit)(src.state));\n        }\n        else if (src.type === 'frozen') {\n            builder.storeBit(false);\n            builder.storeBit(true);\n            builder.storeUint(src.stateHash, 256);\n        }\n        else if (src.type === 'uninit') {\n            builder.storeBit(false);\n            builder.storeBit(false);\n        }\n    };\n}\nexports.storeAccountState = storeAccountState;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeCurrencyCollection = exports.loadCurrencyCollection = void 0;\nconst Dictionary_1 = require(\"../dict/Dictionary\");\n;\nfunction loadCurrencyCollection(slice) {\n    const coins = slice.loadCoins();\n    const other = slice.loadDict(Dictionary_1.Dictionary.Keys.Uint(32), Dictionary_1.Dictionary.Values.BigVarUint(5 /* log2(32) */));\n    if (other.size === 0) {\n        return { coins };\n    }\n    else {\n        return { other, coins };\n    }\n}\nexports.loadCurrencyCollection = loadCurrencyCollection;\nfunction storeCurrencyCollection(collection) {\n    return (builder) => {\n        builder.storeCoins(collection.coins);\n        if (collection.other) {\n            builder.storeDict(collection.other);\n        }\n        else {\n            builder.storeBit(0);\n        }\n    };\n}\nexports.storeCurrencyCollection = storeCurrencyCollection;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAccountStorage = exports.loadAccountStorage = void 0;\nconst AccountState_1 = require(\"./AccountState\");\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadAccountStorage(slice) {\n    return {\n        lastTransLt: slice.loadUintBig(64),\n        balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice),\n        state: (0, AccountState_1.loadAccountState)(slice)\n    };\n}\nexports.loadAccountStorage = loadAccountStorage;\nfunction storeAccountStorage(src) {\n    return (builder) => {\n        builder.storeUint(src.lastTransLt, 64);\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));\n        builder.store((0, AccountState_1.storeAccountState)(src.state));\n    };\n}\nexports.storeAccountStorage = storeAccountStorage;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeStorageUsed = exports.loadStorageUsed = void 0;\nfunction loadStorageUsed(cs) {\n    return {\n        cells: cs.loadVarUintBig(3),\n        bits: cs.loadVarUintBig(3),\n        publicCells: cs.loadVarUintBig(3),\n    };\n}\nexports.loadStorageUsed = loadStorageUsed;\nfunction storeStorageUsed(src) {\n    return (builder) => {\n        builder.storeVarUint(src.cells, 3);\n        builder.storeVarUint(src.bits, 3);\n        builder.storeVarUint(src.publicCells, 3);\n    };\n}\nexports.storeStorageUsed = storeStorageUsed;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeStorageInfo = exports.loadStorageInfo = void 0;\nconst StorageUsed_1 = require(\"./StorageUsed\");\nfunction loadStorageInfo(slice) {\n    return {\n        used: (0, StorageUsed_1.loadStorageUsed)(slice),\n        lastPaid: slice.loadUint(32),\n        duePayment: slice.loadMaybeCoins()\n    };\n}\nexports.loadStorageInfo = loadStorageInfo;\nfunction storeStorageInfo(src) {\n    return (builder) => {\n        builder.store((0, StorageUsed_1.storeStorageUsed)(src.used));\n        builder.storeUint(src.lastPaid, 32);\n        builder.storeMaybeCoins(src.duePayment);\n    };\n}\nexports.storeStorageInfo = storeStorageInfo;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAccount = exports.loadAccount = void 0;\nconst AccountStorage_1 = require(\"./AccountStorage\");\nconst StorageInto_1 = require(\"./StorageInto\");\nfunction loadAccount(slice) {\n    return {\n        addr: slice.loadAddress(),\n        storageStats: (0, StorageInto_1.loadStorageInfo)(slice),\n        storage: (0, AccountStorage_1.loadAccountStorage)(slice)\n    };\n}\nexports.loadAccount = loadAccount;\nfunction storeAccount(src) {\n    return (builder) => {\n        builder.storeAddress(src.addr);\n        builder.store((0, StorageInto_1.storeStorageInfo)(src.storageStats));\n        builder.store((0, AccountStorage_1.storeAccountStorage)(src.storage));\n    };\n}\nexports.storeAccount = storeAccount;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAccountStatus = exports.loadAccountStatus = void 0;\n/**\n * Load account state from slice\n * @param slice\n * @returns AccountState\n */\nfunction loadAccountStatus(slice) {\n    const status = slice.loadUint(2);\n    if (status === 0x00) {\n        return 'uninitialized';\n    }\n    if (status === 0x01) {\n        return 'frozen';\n    }\n    if (status === 0x02) {\n        return 'active';\n    }\n    if (status === 0x03) {\n        return 'non-existing';\n    }\n    throw Error('Invalid data');\n}\nexports.loadAccountStatus = loadAccountStatus;\n/**\n * Store account state to builder\n * @param src account state\n * @param builder buidler\n */\nfunction storeAccountStatus(src) {\n    return (builder) => {\n        if (src === 'uninitialized') {\n            builder.storeUint(0x00, 2);\n        }\n        else if (src === 'frozen') {\n            builder.storeUint(0x01, 2);\n        }\n        else if (src === 'active') {\n            builder.storeUint(0x02, 2);\n        }\n        else if (src === 'non-existing') {\n            builder.storeUint(0x03, 2);\n        }\n        else {\n            throw Error('Invalid data');\n        }\n        return builder;\n    };\n}\nexports.storeAccountStatus = storeAccountStatus;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeAccountStatusChange = exports.loadAccountStatusChange = void 0;\nfunction loadAccountStatusChange(slice) {\n    if (!slice.loadBit()) {\n        return 'unchanged';\n    }\n    if (slice.loadBit()) {\n        return 'deleted';\n    }\n    else {\n        return 'frozen';\n    }\n}\nexports.loadAccountStatusChange = loadAccountStatusChange;\nfunction storeAccountStatusChange(src) {\n    return (builder) => {\n        if (src == 'unchanged') {\n            builder.storeBit(0);\n        }\n        else if (src === 'frozen') {\n            builder.storeBit(1);\n            builder.storeBit(0);\n        }\n        else if (src === 'deleted') {\n            builder.storeBit(1);\n            builder.storeBit(1);\n        }\n        else {\n            throw Error('Invalid account status change');\n        }\n    };\n}\nexports.storeAccountStatusChange = storeAccountStatusChange;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = void 0;\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadCommonMessageInfoRelaxed(slice) {\n    // Internal message\n    if (!slice.loadBit()) {\n        const ihrDisabled = slice.loadBit();\n        const bounce = slice.loadBit();\n        const bounced = slice.loadBit();\n        const src = slice.loadMaybeAddress();\n        const dest = slice.loadAddress();\n        const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n        const ihrFee = slice.loadCoins();\n        const forwardFee = slice.loadCoins();\n        const createdLt = slice.loadUintBig(64);\n        const createdAt = slice.loadUint(32);\n        return {\n            type: 'internal',\n            ihrDisabled,\n            bounce,\n            bounced,\n            src,\n            dest,\n            value,\n            ihrFee,\n            forwardFee,\n            createdLt,\n            createdAt,\n        };\n    }\n    // External In mesage\n    if (!slice.loadBit()) {\n        throw Error('External In message is not possible for CommonMessageInfoRelaxed');\n    }\n    // External Out message\n    const src = slice.loadMaybeAddress();\n    const dest = slice.loadMaybeExternalAddress();\n    const createdLt = slice.loadUintBig(64);\n    const createdAt = slice.loadUint(32);\n    return {\n        type: 'external-out',\n        src,\n        dest,\n        createdLt,\n        createdAt,\n    };\n}\nexports.loadCommonMessageInfoRelaxed = loadCommonMessageInfoRelaxed;\nfunction storeCommonMessageInfoRelaxed(source) {\n    return (builder) => {\n        if (source.type === 'internal') {\n            builder.storeBit(0);\n            builder.storeBit(source.ihrDisabled);\n            builder.storeBit(source.bounce);\n            builder.storeBit(source.bounced);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));\n            builder.storeCoins(source.ihrFee);\n            builder.storeCoins(source.forwardFee);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        }\n        else if (source.type === 'external-out') {\n            builder.storeBit(1);\n            builder.storeBit(1);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        }\n        else {\n            throw new Error('Unknown CommonMessageInfo type');\n        }\n    };\n}\nexports.storeCommonMessageInfoRelaxed = storeCommonMessageInfoRelaxed;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeMessageRelaxed = exports.loadMessageRelaxed = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst CommonMessageInfoRelaxed_1 = require(\"./CommonMessageInfoRelaxed\");\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadMessageRelaxed(slice) {\n    const info = (0, CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed)(slice);\n    let init = null;\n    if (slice.loadBit()) {\n        if (!slice.loadBit()) {\n            init = (0, StateInit_1.loadStateInit)(slice);\n        }\n        else {\n            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n        }\n    }\n    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n    return {\n        info,\n        init,\n        body\n    };\n}\nexports.loadMessageRelaxed = loadMessageRelaxed;\nfunction storeMessageRelaxed(message, opts) {\n    return (builder) => {\n        // Store CommonMsgInfo\n        builder.store((0, CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed)(message.info));\n        // Store init\n        if (message.init) {\n            builder.storeBit(true);\n            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n            // Check if ref is needed\n            let needRef = false;\n            if (opts && opts.forceRef) {\n                needRef = true;\n            }\n            else {\n                if (builder.availableBits - 2 /* At least on byte for ref flag */ >= initCell.bits) {\n                    needRef = false;\n                }\n                else {\n                    needRef = true;\n                }\n            }\n            // Store ref\n            if (needRef) {\n                builder.storeBit(true);\n                builder.storeRef(initCell);\n            }\n            else {\n                builder.storeBit(false);\n                builder.storeBuilder(initCell);\n            }\n        }\n        else {\n            builder.storeBit(false);\n        }\n        // Store body\n        let needRef = false;\n        if (opts && opts.forceRef) {\n            needRef = true;\n        }\n        else {\n            /*\n             1. If at least one bit for ref flag\n             2. If enough space for refs\n             3. If not exotic\n            */\n            if (builder.availableBits - 1 >= message.body.bits.length &&\n                builder.refs + message.body.refs.length <= 4 &&\n                !message.body.isExotic) {\n                needRef = false;\n            }\n            else {\n                needRef = true;\n            }\n        }\n        if (needRef) {\n            builder.storeBit(true);\n            builder.storeRef(message.body);\n        }\n        else {\n            builder.storeBit(false);\n            builder.storeBuilder(message.body.asBuilder());\n        }\n    };\n}\nexports.storeMessageRelaxed = storeMessageRelaxed;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadOutList = exports.storeOutList = exports.loadOutAction = exports.storeOutAction = void 0;\nconst MessageRelaxed_1 = require(\"./MessageRelaxed\");\nconst Builder_1 = require(\"../boc/Builder\");\nfunction storeOutAction(action) {\n    switch (action.type) {\n        case 'sendMsg':\n            return storeOutActionSendMsg(action);\n        case 'setCode':\n            return storeOutActionSetCode(action);\n        default:\n            throw new Error(`Unknown action type ${action.type}`);\n    }\n}\nexports.storeOutAction = storeOutAction;\n/*\naction_send_msg#0ec3c86d mode:(## 8)\n  out_msg:^(MessageRelaxed Any) = OutAction;\n*/\nconst outActionSendMsgTag = 0x0ec3c86d;\nfunction storeOutActionSendMsg(action) {\n    return (builder) => {\n        builder.storeUint(outActionSendMsgTag, 32)\n            .storeUint(action.mode, 8)\n            .storeRef((0, Builder_1.beginCell)().store((0, MessageRelaxed_1.storeMessageRelaxed)(action.outMsg)).endCell());\n    };\n}\n/*\naction_set_code#ad4de08e new_code:^Cell = OutAction;\n */\nconst outActionSetCodeTag = 0xad4de08e;\nfunction storeOutActionSetCode(action) {\n    return (builder) => {\n        builder.storeUint(outActionSetCodeTag, 32).storeRef(action.newCode);\n    };\n}\nfunction loadOutAction(slice) {\n    const tag = slice.loadUint(32);\n    if (tag === outActionSendMsgTag) {\n        const mode = slice.loadUint(8);\n        const outMsg = (0, MessageRelaxed_1.loadMessageRelaxed)(slice.loadRef().beginParse());\n        return {\n            type: 'sendMsg',\n            mode,\n            outMsg\n        };\n    }\n    if (tag === outActionSetCodeTag) {\n        const newCode = slice.loadRef();\n        return {\n            type: 'setCode',\n            newCode\n        };\n    }\n    throw new Error(`Unknown out action tag 0x${tag.toString(16)}`);\n}\nexports.loadOutAction = loadOutAction;\n/*\nout_list_empty$_ = OutList 0;\nout_list$_ {n:#} prev:^(OutList n) action:OutAction\n  = OutList (n + 1);\n */\nfunction storeOutList(actions) {\n    const cell = actions.reduce((cell, action) => (0, Builder_1.beginCell)()\n        .storeRef(cell)\n        .store(storeOutAction(action))\n        .endCell(), (0, Builder_1.beginCell)().endCell());\n    return (builder) => {\n        builder.storeSlice(cell.beginParse());\n    };\n}\nexports.storeOutList = storeOutList;\nfunction loadOutList(slice) {\n    const actions = [];\n    while (slice.remainingRefs) {\n        const nextCell = slice.loadRef();\n        actions.push(loadOutAction(slice));\n        slice = nextCell.beginParse();\n    }\n    return actions.reverse();\n}\nexports.loadOutList = loadOutList;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeCommonMessageInfo = exports.loadCommonMessageInfo = void 0;\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadCommonMessageInfo(slice) {\n    // Internal message\n    if (!slice.loadBit()) {\n        const ihrDisabled = slice.loadBit();\n        const bounce = slice.loadBit();\n        const bounced = slice.loadBit();\n        const src = slice.loadAddress();\n        const dest = slice.loadAddress();\n        const value = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n        const ihrFee = slice.loadCoins();\n        const forwardFee = slice.loadCoins();\n        const createdLt = slice.loadUintBig(64);\n        const createdAt = slice.loadUint(32);\n        return {\n            type: 'internal',\n            ihrDisabled,\n            bounce,\n            bounced,\n            src,\n            dest,\n            value,\n            ihrFee,\n            forwardFee,\n            createdLt,\n            createdAt,\n        };\n    }\n    // External In mesage\n    if (!slice.loadBit()) {\n        const src = slice.loadMaybeExternalAddress();\n        const dest = slice.loadAddress();\n        const importFee = slice.loadCoins();\n        return {\n            type: 'external-in',\n            src,\n            dest,\n            importFee,\n        };\n    }\n    // External Out message\n    const src = slice.loadAddress();\n    const dest = slice.loadMaybeExternalAddress();\n    const createdLt = slice.loadUintBig(64);\n    const createdAt = slice.loadUint(32);\n    return {\n        type: 'external-out',\n        src,\n        dest,\n        createdLt,\n        createdAt,\n    };\n}\nexports.loadCommonMessageInfo = loadCommonMessageInfo;\nfunction storeCommonMessageInfo(source) {\n    return (builder) => {\n        if (source.type === 'internal') {\n            builder.storeBit(0);\n            builder.storeBit(source.ihrDisabled);\n            builder.storeBit(source.bounce);\n            builder.storeBit(source.bounced);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(source.value));\n            builder.storeCoins(source.ihrFee);\n            builder.storeCoins(source.forwardFee);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        }\n        else if (source.type === 'external-in') {\n            builder.storeBit(1);\n            builder.storeBit(0);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.storeCoins(source.importFee);\n        }\n        else if (source.type === 'external-out') {\n            builder.storeBit(1);\n            builder.storeBit(1);\n            builder.storeAddress(source.src);\n            builder.storeAddress(source.dest);\n            builder.storeUint(source.createdLt, 64);\n            builder.storeUint(source.createdAt, 32);\n        }\n        else {\n            throw new Error('Unknown CommonMessageInfo type');\n        }\n    };\n}\nexports.storeCommonMessageInfo = storeCommonMessageInfo;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeComputeSkipReason = exports.loadComputeSkipReason = void 0;\nfunction loadComputeSkipReason(slice) {\n    let reason = slice.loadUint(2);\n    if (reason === 0x00) {\n        return 'no-state';\n    }\n    else if (reason === 0x01) {\n        return 'bad-state';\n    }\n    else if (reason === 0x02) {\n        return 'no-gas';\n    }\n    throw new Error(`Unknown ComputeSkipReason: ${reason}`);\n}\nexports.loadComputeSkipReason = loadComputeSkipReason;\nfunction storeComputeSkipReason(src) {\n    return (builder) => {\n        if (src === 'no-state') {\n            builder.storeUint(0x00, 2);\n        }\n        else if (src === 'bad-state') {\n            builder.storeUint(0x01, 2);\n        }\n        else if (src === 'no-gas') {\n            builder.storeUint(0x02, 2);\n        }\n        else {\n            throw new Error(`Unknown ComputeSkipReason: ${src}`);\n        }\n    };\n}\nexports.storeComputeSkipReason = storeComputeSkipReason;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = void 0;\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadDepthBalanceInfo(slice) {\n    let splitDepth = slice.loadUint(5);\n    return {\n        splitDepth,\n        balance: (0, CurrencyCollection_1.loadCurrencyCollection)(slice)\n    };\n}\nexports.loadDepthBalanceInfo = loadDepthBalanceInfo;\nfunction storeDepthBalanceInfo(src) {\n    return (builder) => {\n        builder.storeUint(src.splitDepth, 5);\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.balance));\n    };\n}\nexports.storeDepthBalanceInfo = storeDepthBalanceInfo;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeHashUpdate = exports.loadHashUpdate = void 0;\nfunction loadHashUpdate(slice) {\n    if (slice.loadUint(8) !== 0x72) {\n        throw Error('Invalid data');\n    }\n    const oldHash = slice.loadBuffer(32);\n    const newHash = slice.loadBuffer(32);\n    return { oldHash, newHash };\n}\nexports.loadHashUpdate = loadHashUpdate;\nfunction storeHashUpdate(src) {\n    return (builder) => {\n        builder.storeUint(0x72, 8);\n        builder.storeBuffer(src.oldHash);\n        builder.storeBuffer(src.newHash);\n    };\n}\nexports.storeHashUpdate = storeHashUpdate;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadMasterchainStateExtra = void 0;\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadMasterchainStateExtra(cs) {\n    // Check magic\n    if (cs.loadUint(16) !== 0xcc26) {\n        throw Error('Invalid data');\n    }\n    // Skip shard_hashes\n    if (cs.loadBit()) {\n        cs.loadRef();\n    }\n    // Read config\n    let configAddress = cs.loadUintBig(256);\n    let config = Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.Int(32), Dictionary_1.Dictionary.Values.Cell(), cs);\n    // Rad global balance\n    const globalBalance = (0, CurrencyCollection_1.loadCurrencyCollection)(cs);\n    return {\n        config,\n        configAddress,\n        globalBalance\n    };\n}\nexports.loadMasterchainStateExtra = loadMasterchainStateExtra;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MessageValue = exports.storeMessage = exports.loadMessage = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst CommonMessageInfo_1 = require(\"./CommonMessageInfo\");\nconst StateInit_1 = require(\"./StateInit\");\nfunction loadMessage(slice) {\n    const info = (0, CommonMessageInfo_1.loadCommonMessageInfo)(slice);\n    let init = null;\n    if (slice.loadBit()) {\n        if (!slice.loadBit()) {\n            init = (0, StateInit_1.loadStateInit)(slice);\n        }\n        else {\n            init = (0, StateInit_1.loadStateInit)(slice.loadRef().beginParse());\n        }\n    }\n    const body = slice.loadBit() ? slice.loadRef() : slice.asCell();\n    return {\n        info,\n        init,\n        body\n    };\n}\nexports.loadMessage = loadMessage;\nfunction storeMessage(message, opts) {\n    return (builder) => {\n        // Store CommonMsgInfo\n        builder.store((0, CommonMessageInfo_1.storeCommonMessageInfo)(message.info));\n        // Store init\n        if (message.init) {\n            builder.storeBit(true);\n            let initCell = (0, Builder_1.beginCell)().store((0, StateInit_1.storeStateInit)(message.init));\n            // Check if need to store it in ref\n            let needRef = false;\n            if (opts && opts.forceRef) {\n                needRef = true;\n            }\n            else {\n                needRef = builder.availableBits - 2 /* At least two bits for ref flags */ < initCell.bits + message.body.bits.length;\n            }\n            // Persist init\n            if (needRef) {\n                builder.storeBit(true);\n                builder.storeRef(initCell);\n            }\n            else {\n                builder.storeBit(false);\n                builder.storeBuilder(initCell);\n            }\n        }\n        else {\n            builder.storeBit(false);\n        }\n        // Store body\n        let needRef = false;\n        if (opts && opts.forceRef) {\n            needRef = true;\n        }\n        else {\n            needRef = builder.availableBits - 1 /* At least one bit for ref flag */ < message.body.bits.length ||\n                builder.refs + message.body.refs.length > 4;\n        }\n        if (needRef) {\n            builder.storeBit(true);\n            builder.storeRef(message.body);\n        }\n        else {\n            builder.storeBit(false);\n            builder.storeBuilder(message.body.asBuilder());\n        }\n    };\n}\nexports.storeMessage = storeMessage;\nexports.MessageValue = {\n    serialize(src, builder) {\n        builder.storeRef((0, Builder_1.beginCell)()\n            .store(storeMessage(src)));\n    },\n    parse(slice) {\n        return loadMessage(slice.loadRef().beginParse());\n    }\n};\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SendMode = void 0;\nvar SendMode;\n(function (SendMode) {\n    SendMode[SendMode[\"CARRY_ALL_REMAINING_BALANCE\"] = 128] = \"CARRY_ALL_REMAINING_BALANCE\";\n    SendMode[SendMode[\"CARRY_ALL_REMAINING_INCOMING_VALUE\"] = 64] = \"CARRY_ALL_REMAINING_INCOMING_VALUE\";\n    SendMode[SendMode[\"DESTROY_ACCOUNT_IF_ZERO\"] = 32] = \"DESTROY_ACCOUNT_IF_ZERO\";\n    SendMode[SendMode[\"PAY_GAS_SEPARATELY\"] = 1] = \"PAY_GAS_SEPARATELY\";\n    SendMode[SendMode[\"IGNORE_ERRORS\"] = 2] = \"IGNORE_ERRORS\";\n    SendMode[SendMode[\"NONE\"] = 0] = \"NONE\";\n})(SendMode || (exports.SendMode = SendMode = {}));\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeShardAccount = exports.loadShardAccount = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst Account_1 = require(\"./Account\");\nfunction loadShardAccount(slice) {\n    let accountRef = slice.loadRef();\n    let account = undefined;\n    if (!accountRef.isExotic) {\n        let accountSlice = accountRef.beginParse();\n        if (accountSlice.loadBit()) {\n            account = (0, Account_1.loadAccount)(accountSlice);\n        }\n    }\n    return {\n        account,\n        lastTransactionHash: slice.loadUintBig(256),\n        lastTransactionLt: slice.loadUintBig(64)\n    };\n}\nexports.loadShardAccount = loadShardAccount;\nfunction storeShardAccount(src) {\n    return (builder) => {\n        if (src.account) {\n            builder.storeRef((0, Builder_1.beginCell)()\n                .storeBit(true)\n                .store((0, Account_1.storeAccount)(src.account)));\n        }\n        else {\n            builder.storeRef((0, Builder_1.beginCell)()\n                .storeBit(false));\n        }\n        builder.storeUint(src.lastTransactionHash, 256);\n        builder.storeUint(src.lastTransactionLt, 64);\n    };\n}\nexports.storeShardAccount = storeShardAccount;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = void 0;\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst DepthBalanceInfo_1 = require(\"./DepthBalanceInfo\");\nconst ShardAccount_1 = require(\"./ShardAccount\");\nexports.ShardAccountRefValue = {\n    parse: (cs) => {\n        let depthBalanceInfo = (0, DepthBalanceInfo_1.loadDepthBalanceInfo)(cs);\n        let shardAccount = (0, ShardAccount_1.loadShardAccount)(cs);\n        return {\n            depthBalanceInfo,\n            shardAccount\n        };\n    },\n    serialize(src, builder) {\n        builder.store((0, DepthBalanceInfo_1.storeDepthBalanceInfo)(src.depthBalanceInfo));\n        builder.store((0, ShardAccount_1.storeShardAccount)(src.shardAccount));\n    },\n};\nfunction loadShardAccounts(cs) {\n    return Dictionary_1.Dictionary.load(Dictionary_1.Dictionary.Keys.BigUint(256), exports.ShardAccountRefValue, cs);\n}\nexports.loadShardAccounts = loadShardAccounts;\nfunction storeShardAccounts(src) {\n    return (Builder) => {\n        Builder.storeDict(src);\n    };\n}\nexports.storeShardAccounts = storeShardAccounts;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeShardIdent = exports.loadShardIdent = void 0;\nfunction loadShardIdent(slice) {\n    if (slice.loadUint(2) !== 0) {\n        throw Error('Invalid data');\n    }\n    return {\n        shardPrefixBits: slice.loadUint(6),\n        workchainId: slice.loadInt(32),\n        shardPrefix: slice.loadUintBig(64)\n    };\n}\nexports.loadShardIdent = loadShardIdent;\nfunction storeShardIdent(src) {\n    return (builder) => {\n        builder.storeUint(0, 2);\n        builder.storeUint(src.shardPrefixBits, 6);\n        builder.storeInt(src.workchainId, 32);\n        builder.storeUint(src.shardPrefix, 64);\n    };\n}\nexports.storeShardIdent = storeShardIdent;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadShardStateUnsplit = void 0;\nconst MasterchainStateExtra_1 = require(\"./MasterchainStateExtra\");\nconst ShardAccounts_1 = require(\"./ShardAccounts\");\nconst ShardIdent_1 = require(\"./ShardIdent\");\nfunction loadShardStateUnsplit(cs) {\n    if (cs.loadUint(32) !== 0x9023afe2) {\n        throw Error('Invalid data');\n    }\n    let globalId = cs.loadInt(32);\n    let shardId = (0, ShardIdent_1.loadShardIdent)(cs);\n    let seqno = cs.loadUint(32);\n    let vertSeqNo = cs.loadUint(32);\n    let genUtime = cs.loadUint(32);\n    let genLt = cs.loadUintBig(64);\n    let minRefMcSeqno = cs.loadUint(32);\n    // Skip OutMsgQueueInfo: usually exotic\n    cs.loadRef();\n    let beforeSplit = cs.loadBit();\n    // Parse accounts\n    let shardAccountsRef = cs.loadRef();\n    let accounts = undefined;\n    if (!shardAccountsRef.isExotic) {\n        accounts = (0, ShardAccounts_1.loadShardAccounts)(shardAccountsRef.beginParse());\n    }\n    // Skip (not used by apps)\n    cs.loadRef();\n    // Parse extras\n    let mcStateExtra = cs.loadBit();\n    let extras = null;\n    if (mcStateExtra) {\n        let cell = cs.loadRef();\n        if (!cell.isExotic) {\n            extras = (0, MasterchainStateExtra_1.loadMasterchainStateExtra)(cell.beginParse());\n        }\n    }\n    ;\n    return {\n        globalId,\n        shardId,\n        seqno,\n        vertSeqNo,\n        genUtime,\n        genLt,\n        minRefMcSeqno,\n        beforeSplit,\n        accounts,\n        extras\n    };\n}\nexports.loadShardStateUnsplit = loadShardStateUnsplit;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeSplitMergeInfo = exports.loadSplitMergeInfo = void 0;\nfunction loadSplitMergeInfo(slice) {\n    let currentShardPrefixLength = slice.loadUint(6);\n    let accountSplitDepth = slice.loadUint(6);\n    let thisAddress = slice.loadUintBig(256);\n    let siblingAddress = slice.loadUintBig(256);\n    return {\n        currentShardPrefixLength,\n        accountSplitDepth,\n        thisAddress,\n        siblingAddress\n    };\n}\nexports.loadSplitMergeInfo = loadSplitMergeInfo;\nfunction storeSplitMergeInfo(src) {\n    return (builder) => {\n        builder.storeUint(src.currentShardPrefixLength, 6);\n        builder.storeUint(src.accountSplitDepth, 6);\n        builder.storeUint(src.thisAddress, 256);\n        builder.storeUint(src.siblingAddress, 256);\n    };\n}\nexports.storeSplitMergeInfo = storeSplitMergeInfo;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeStorageUsedShort = exports.loadStorageUsedShort = void 0;\nfunction loadStorageUsedShort(slice) {\n    let cells = slice.loadVarUintBig(3);\n    let bits = slice.loadVarUintBig(3);\n    return {\n        cells,\n        bits\n    };\n}\nexports.loadStorageUsedShort = loadStorageUsedShort;\nfunction storeStorageUsedShort(src) {\n    return (builder) => {\n        builder.storeVarUint(src.cells, 3);\n        builder.storeVarUint(src.bits, 3);\n    };\n}\nexports.storeStorageUsedShort = storeStorageUsedShort;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransactionActionPhase = exports.loadTransactionActionPhase = void 0;\nconst AccountStatusChange_1 = require(\"./AccountStatusChange\");\nconst StorageUsedShort_1 = require(\"./StorageUsedShort\");\nfunction loadTransactionActionPhase(slice) {\n    let success = slice.loadBit();\n    let valid = slice.loadBit();\n    let noFunds = slice.loadBit();\n    let statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);\n    let totalFwdFees = slice.loadBit() ? slice.loadCoins() : undefined;\n    let totalActionFees = slice.loadBit() ? slice.loadCoins() : undefined;\n    let resultCode = slice.loadInt(32);\n    let resultArg = slice.loadBit() ? slice.loadInt(32) : undefined;\n    let totalActions = slice.loadUint(16);\n    let specActions = slice.loadUint(16);\n    let skippedActions = slice.loadUint(16);\n    let messagesCreated = slice.loadUint(16);\n    let actionListHash = slice.loadUintBig(256);\n    let totalMessageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);\n    return {\n        success,\n        valid,\n        noFunds,\n        statusChange,\n        totalFwdFees,\n        totalActionFees,\n        resultCode,\n        resultArg,\n        totalActions,\n        specActions,\n        skippedActions,\n        messagesCreated,\n        actionListHash,\n        totalMessageSize\n    };\n}\nexports.loadTransactionActionPhase = loadTransactionActionPhase;\nfunction storeTransactionActionPhase(src) {\n    return (builder) => {\n        builder.storeBit(src.success);\n        builder.storeBit(src.valid);\n        builder.storeBit(src.noFunds);\n        builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));\n        builder.storeMaybeCoins(src.totalFwdFees);\n        builder.storeMaybeCoins(src.totalActionFees);\n        builder.storeInt(src.resultCode, 32);\n        builder.storeMaybeInt(src.resultArg, 32);\n        builder.storeUint(src.totalActions, 16);\n        builder.storeUint(src.specActions, 16);\n        builder.storeUint(src.skippedActions, 16);\n        builder.storeUint(src.messagesCreated, 16);\n        builder.storeUint(src.actionListHash, 256);\n        builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.totalMessageSize));\n    };\n}\nexports.storeTransactionActionPhase = storeTransactionActionPhase;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = void 0;\nconst StorageUsedShort_1 = require(\"./StorageUsedShort\");\nfunction loadTransactionBouncePhase(slice) {\n    // Ok\n    if (slice.loadBit()) {\n        let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);\n        let messageFees = slice.loadCoins();\n        let forwardFees = slice.loadCoins();\n        return {\n            type: \"ok\",\n            messageSize,\n            messageFees,\n            forwardFees,\n        };\n    }\n    // No funds\n    if (slice.loadBit()) {\n        let messageSize = (0, StorageUsedShort_1.loadStorageUsedShort)(slice);\n        let requiredForwardFees = slice.loadCoins();\n        return {\n            type: \"no-funds\",\n            messageSize,\n            requiredForwardFees,\n        };\n    }\n    // Negative funds\n    return {\n        type: \"negative-funds\",\n    };\n}\nexports.loadTransactionBouncePhase = loadTransactionBouncePhase;\nfunction storeTransactionBouncePhase(src) {\n    return (builder) => {\n        if (src.type === 'ok') {\n            builder.storeBit(true);\n            builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));\n            builder.storeCoins(src.messageFees);\n            builder.storeCoins(src.forwardFees);\n        }\n        else if (src.type === 'negative-funds') {\n            builder.storeBit(false);\n            builder.storeBit(false);\n        }\n        else if (src.type === 'no-funds') {\n            builder.storeBit(false);\n            builder.storeBit(true);\n            builder.store((0, StorageUsedShort_1.storeStorageUsedShort)(src.messageSize));\n            builder.storeCoins(src.requiredForwardFees);\n        }\n        else {\n            throw new Error(\"Invalid TransactionBouncePhase type\");\n        }\n    };\n}\nexports.storeTransactionBouncePhase = storeTransactionBouncePhase;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransactionComputePhase = exports.loadTransactionComputePhase = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst ComputeSkipReason_1 = require(\"./ComputeSkipReason\");\nfunction loadTransactionComputePhase(slice) {\n    // Skipped\n    if (!slice.loadBit()) {\n        let reason = (0, ComputeSkipReason_1.loadComputeSkipReason)(slice);\n        return {\n            type: 'skipped',\n            reason\n        };\n    }\n    let success = slice.loadBit();\n    let messageStateUsed = slice.loadBit();\n    let accountActivated = slice.loadBit();\n    let gasFees = slice.loadCoins();\n    const vmState = slice.loadRef().beginParse();\n    let gasUsed = vmState.loadVarUintBig(3);\n    let gasLimit = vmState.loadVarUintBig(3);\n    let gasCredit = vmState.loadBit() ? vmState.loadVarUintBig(2) : undefined;\n    let mode = vmState.loadUint(8);\n    let exitCode = vmState.loadInt(32);\n    let exitArg = vmState.loadBit() ? vmState.loadInt(32) : undefined;\n    let vmSteps = vmState.loadUint(32);\n    let vmInitStateHash = vmState.loadUintBig(256);\n    let vmFinalStateHash = vmState.loadUintBig(256);\n    return {\n        type: 'vm',\n        success,\n        messageStateUsed,\n        accountActivated,\n        gasFees,\n        gasUsed,\n        gasLimit,\n        gasCredit,\n        mode,\n        exitCode,\n        exitArg,\n        vmSteps,\n        vmInitStateHash,\n        vmFinalStateHash\n    };\n}\nexports.loadTransactionComputePhase = loadTransactionComputePhase;\nfunction storeTransactionComputePhase(src) {\n    return (builder) => {\n        if (src.type === 'skipped') {\n            builder.storeBit(0);\n            builder.store((0, ComputeSkipReason_1.storeComputeSkipReason)(src.reason));\n            return;\n        }\n        builder.storeBit(1);\n        builder.storeBit(src.success);\n        builder.storeBit(src.messageStateUsed);\n        builder.storeBit(src.accountActivated);\n        builder.storeCoins(src.gasFees);\n        builder.storeRef((0, Builder_1.beginCell)()\n            .storeVarUint(src.gasUsed, 3)\n            .storeVarUint(src.gasLimit, 3)\n            .store((b) => (src.gasCredit !== undefined && src.gasCredit !== null) ? b.storeBit(1).storeVarUint(src.gasCredit, 2) : b.storeBit(0))\n            .storeUint(src.mode, 8)\n            .storeInt(src.exitCode, 32)\n            .store((b) => (src.exitArg !== undefined && src.exitArg !== null) ? b.storeBit(1).storeInt(src.exitArg, 32) : b.storeBit(0))\n            .storeUint(src.vmSteps, 32)\n            .storeUint(src.vmInitStateHash, 256)\n            .storeUint(src.vmFinalStateHash, 256)\n            .endCell());\n    };\n}\nexports.storeTransactionComputePhase = storeTransactionComputePhase;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = void 0;\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nfunction loadTransactionCreditPhase(slice) {\n    const dueFeesColelcted = slice.loadBit() ? slice.loadCoins() : undefined;\n    const credit = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n    return {\n        dueFeesColelcted,\n        credit\n    };\n}\nexports.loadTransactionCreditPhase = loadTransactionCreditPhase;\nfunction storeTransactionCreditPhase(src) {\n    return (builder) => {\n        if (src.dueFeesColelcted === null || src.dueFeesColelcted === undefined) {\n            builder.storeBit(false);\n        }\n        else {\n            builder.storeBit(true);\n            builder.storeCoins(src.dueFeesColelcted);\n        }\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.credit));\n    };\n}\nexports.storeTransactionCreditPhase = storeTransactionCreditPhase;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = void 0;\nconst AccountStatusChange_1 = require(\"./AccountStatusChange\");\nfunction loadTransactionStoragePhase(slice) {\n    const storageFeesCollected = slice.loadCoins();\n    let storageFeesDue = undefined;\n    if (slice.loadBit()) {\n        storageFeesDue = slice.loadCoins();\n    }\n    const statusChange = (0, AccountStatusChange_1.loadAccountStatusChange)(slice);\n    return {\n        storageFeesCollected,\n        storageFeesDue,\n        statusChange\n    };\n}\nexports.loadTransactionStoragePhase = loadTransactionStoragePhase;\nfunction storeTransactionsStoragePhase(src) {\n    return (builder) => {\n        builder.storeCoins(src.storageFeesCollected);\n        if (src.storageFeesDue === null || src.storageFeesDue === undefined) {\n            builder.storeBit(false);\n        }\n        else {\n            builder.storeBit(true);\n            builder.storeCoins(src.storageFeesDue);\n        }\n        builder.store((0, AccountStatusChange_1.storeAccountStatusChange)(src.statusChange));\n    };\n}\nexports.storeTransactionsStoragePhase = storeTransactionsStoragePhase;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransactionDescription = exports.loadTransactionDescription = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst SplitMergeInfo_1 = require(\"./SplitMergeInfo\");\nconst Transaction_1 = require(\"./Transaction\");\nconst TransactionActionPhase_1 = require(\"./TransactionActionPhase\");\nconst TransactionBouncePhase_1 = require(\"./TransactionBouncePhase\");\nconst TransactionComputePhase_1 = require(\"./TransactionComputePhase\");\nconst TransactionCreditPhase_1 = require(\"./TransactionCreditPhase\");\nconst TransactionStoragePhase_1 = require(\"./TransactionStoragePhase\");\nfunction loadTransactionDescription(slice) {\n    let type = slice.loadUint(4);\n    if (type === 0x00) {\n        const creditFirst = slice.loadBit();\n        let storagePhase = undefined;\n        if (slice.loadBit()) {\n            storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);\n        }\n        let creditPhase = undefined;\n        if (slice.loadBit()) {\n            creditPhase = (0, TransactionCreditPhase_1.loadTransactionCreditPhase)(slice);\n        }\n        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);\n        let actionPhase = undefined;\n        if (slice.loadBit()) {\n            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());\n        }\n        let aborted = slice.loadBit();\n        let bouncePhase = undefined;\n        if (slice.loadBit()) {\n            bouncePhase = (0, TransactionBouncePhase_1.loadTransactionBouncePhase)(slice);\n        }\n        const destroyed = slice.loadBit();\n        return {\n            type: 'generic',\n            creditFirst,\n            storagePhase,\n            creditPhase,\n            computePhase,\n            actionPhase,\n            bouncePhase,\n            aborted,\n            destroyed\n        };\n    }\n    if (type === 0x01) {\n        return {\n            type: 'storage',\n            storagePhase: (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice)\n        };\n    }\n    if (type === 0x2 || type === 0x03) {\n        const isTock = type === 0x03;\n        let storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);\n        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);\n        let actionPhase = undefined;\n        if (slice.loadBit()) {\n            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());\n        }\n        const aborted = slice.loadBit();\n        const destroyed = slice.loadBit();\n        return {\n            type: 'tick-tock',\n            isTock,\n            storagePhase,\n            computePhase,\n            actionPhase,\n            aborted,\n            destroyed\n        };\n    }\n    if (type === 0x04) {\n        let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);\n        let storagePhase = undefined;\n        if (slice.loadBit()) {\n            storagePhase = (0, TransactionStoragePhase_1.loadTransactionStoragePhase)(slice);\n        }\n        let computePhase = (0, TransactionComputePhase_1.loadTransactionComputePhase)(slice);\n        let actionPhase = undefined;\n        if (slice.loadBit()) {\n            actionPhase = (0, TransactionActionPhase_1.loadTransactionActionPhase)(slice.loadRef().beginParse());\n        }\n        const aborted = slice.loadBit();\n        const destroyed = slice.loadBit();\n        return {\n            type: 'split-prepare',\n            splitInfo,\n            storagePhase,\n            computePhase,\n            actionPhase,\n            aborted,\n            destroyed\n        };\n    }\n    if (type === 0x05) {\n        let splitInfo = (0, SplitMergeInfo_1.loadSplitMergeInfo)(slice);\n        let prepareTransaction = (0, Transaction_1.loadTransaction)(slice.loadRef().beginParse());\n        const installed = slice.loadBit();\n        return {\n            type: 'split-install',\n            splitInfo,\n            prepareTransaction,\n            installed\n        };\n    }\n    throw Error(`Unsupported transaction description type ${type}`);\n}\nexports.loadTransactionDescription = loadTransactionDescription;\nfunction storeTransactionDescription(src) {\n    return (builder) => {\n        if (src.type === 'generic') {\n            builder.storeUint(0x00, 4);\n            builder.storeBit(src.creditFirst);\n            if (src.storagePhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            if (src.creditPhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionCreditPhase_1.storeTransactionCreditPhase)(src.creditPhase));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));\n            if (src.actionPhase) {\n                builder.storeBit(true);\n                builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.aborted);\n            if (src.bouncePhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionBouncePhase_1.storeTransactionBouncePhase)(src.bouncePhase));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.destroyed);\n        }\n        else if (src.type === 'storage') {\n            builder.storeUint(0x01, 4);\n            builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n        }\n        else if (src.type === 'tick-tock') {\n            builder.storeUint(src.isTock ? 0x03 : 0x02, 4);\n            builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));\n            if (src.actionPhase) {\n                builder.storeBit(true);\n                builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase)));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.aborted);\n            builder.storeBit(src.destroyed);\n        }\n        else if (src.type === 'split-prepare') {\n            builder.storeUint(0x04, 4);\n            builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));\n            if (src.storagePhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionStoragePhase_1.storeTransactionsStoragePhase)(src.storagePhase));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            builder.store((0, TransactionComputePhase_1.storeTransactionComputePhase)(src.computePhase));\n            if (src.actionPhase) {\n                builder.storeBit(true);\n                builder.store((0, TransactionActionPhase_1.storeTransactionActionPhase)(src.actionPhase));\n            }\n            else {\n                builder.storeBit(false);\n            }\n            builder.storeBit(src.aborted);\n            builder.storeBit(src.destroyed);\n        }\n        else if (src.type === 'split-install') {\n            builder.storeUint(0x05, 4);\n            builder.store((0, SplitMergeInfo_1.storeSplitMergeInfo)(src.splitInfo));\n            builder.storeRef((0, Builder_1.beginCell)().store((0, Transaction_1.storeTransaction)(src.prepareTransaction)));\n            builder.storeBit(src.installed);\n        }\n        else {\n            throw Error(`Unsupported transaction description type ${src.type}`);\n        }\n    };\n}\nexports.storeTransactionDescription = storeTransactionDescription;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.storeTransaction = exports.loadTransaction = void 0;\nconst Builder_1 = require(\"../boc/Builder\");\nconst Dictionary_1 = require(\"../dict/Dictionary\");\nconst AccountStatus_1 = require(\"./AccountStatus\");\nconst CurrencyCollection_1 = require(\"./CurrencyCollection\");\nconst HashUpdate_1 = require(\"./HashUpdate\");\nconst Message_1 = require(\"./Message\");\nconst TransactionDescription_1 = require(\"./TransactionDescription\");\nfunction loadTransaction(slice) {\n    let raw = slice.asCell();\n    if (slice.loadUint(4) !== 0x07) {\n        throw Error('Invalid data');\n    }\n    let address = slice.loadUintBig(256);\n    let lt = slice.loadUintBig(64);\n    let prevTransactionHash = slice.loadUintBig(256);\n    let prevTransactionLt = slice.loadUintBig(64);\n    let now = slice.loadUint(32);\n    let outMessagesCount = slice.loadUint(15);\n    let oldStatus = (0, AccountStatus_1.loadAccountStatus)(slice);\n    let endStatus = (0, AccountStatus_1.loadAccountStatus)(slice);\n    let msgRef = slice.loadRef();\n    let msgSlice = msgRef.beginParse();\n    let inMessage = msgSlice.loadBit() ? (0, Message_1.loadMessage)(msgSlice.loadRef().beginParse()) : undefined;\n    let outMessages = msgSlice.loadDict(Dictionary_1.Dictionary.Keys.Uint(15), Message_1.MessageValue);\n    msgSlice.endParse();\n    let totalFees = (0, CurrencyCollection_1.loadCurrencyCollection)(slice);\n    let stateUpdate = (0, HashUpdate_1.loadHashUpdate)(slice.loadRef().beginParse());\n    let description = (0, TransactionDescription_1.loadTransactionDescription)(slice.loadRef().beginParse());\n    return {\n        address,\n        lt,\n        prevTransactionHash,\n        prevTransactionLt,\n        now,\n        outMessagesCount,\n        oldStatus,\n        endStatus,\n        inMessage,\n        outMessages,\n        totalFees,\n        stateUpdate,\n        description,\n        raw,\n        hash: () => raw.hash(),\n    };\n}\nexports.loadTransaction = loadTransaction;\nfunction storeTransaction(src) {\n    return (builder) => {\n        builder.storeUint(0x07, 4);\n        builder.storeUint(src.address, 256);\n        builder.storeUint(src.lt, 64);\n        builder.storeUint(src.prevTransactionHash, 256);\n        builder.storeUint(src.prevTransactionLt, 64);\n        builder.storeUint(src.now, 32);\n        builder.storeUint(src.outMessagesCount, 15);\n        builder.store((0, AccountStatus_1.storeAccountStatus)(src.oldStatus));\n        builder.store((0, AccountStatus_1.storeAccountStatus)(src.endStatus));\n        let msgBuilder = (0, Builder_1.beginCell)();\n        if (src.inMessage) {\n            msgBuilder.storeBit(true);\n            msgBuilder.storeRef((0, Builder_1.beginCell)().store((0, Message_1.storeMessage)(src.inMessage)));\n        }\n        else {\n            msgBuilder.storeBit(false);\n        }\n        msgBuilder.storeDict(src.outMessages);\n        builder.storeRef(msgBuilder);\n        builder.store((0, CurrencyCollection_1.storeCurrencyCollection)(src.totalFees));\n        builder.storeRef((0, Builder_1.beginCell)().store((0, HashUpdate_1.storeHashUpdate)(src.stateUpdate)));\n        builder.storeRef((0, Builder_1.beginCell)().store((0, TransactionDescription_1.storeTransactionDescription)(src.description)));\n    };\n}\nexports.storeTransaction = storeTransaction;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.loadStorageInfo = exports.storeStateInit = exports.loadStateInit = exports.storeSplitMergeInfo = exports.loadSplitMergeInfo = exports.storeSimpleLibrary = exports.loadSimpleLibrary = exports.loadShardStateUnsplit = exports.storeShardIdent = exports.loadShardIdent = exports.storeShardAccounts = exports.loadShardAccounts = exports.ShardAccountRefValue = exports.storeShardAccount = exports.loadShardAccount = exports.SendMode = exports.storeMessageRelaxed = exports.loadMessageRelaxed = exports.storeMessage = exports.loadMessage = exports.loadMasterchainStateExtra = exports.storeHashUpdate = exports.loadHashUpdate = exports.storeDepthBalanceInfo = exports.loadDepthBalanceInfo = exports.storeCurrencyCollection = exports.loadCurrencyCollection = exports.storeComputeSkipReason = exports.loadComputeSkipReason = exports.storeCommonMessageInfoRelaxed = exports.loadCommonMessageInfoRelaxed = exports.storeCommonMessageInfo = exports.loadCommonMessageInfo = exports.storeOutList = exports.loadOutList = exports.storeOutAction = exports.loadOutAction = exports.storeAccountStorage = exports.loadAccountStorage = exports.storeAccountStatusChange = exports.loadAccountStatusChange = exports.storeAccountStatus = exports.loadAccountStatus = exports.storeAccountState = exports.loadAccountState = exports.storeAccount = exports.loadAccount = exports.comment = exports.external = exports.internal = void 0;\nexports.storeTransactionsStoragePhase = exports.loadTransactionStoragePhase = exports.storeTransactionDescription = exports.loadTransactionDescription = exports.storeTransactionCreditPhase = exports.loadTransactionCreditPhase = exports.storeTransactionComputePhase = exports.loadTransactionComputePhase = exports.storeTransactionBouncePhase = exports.loadTransactionBouncePhase = exports.storeTransactionActionPhase = exports.loadTransactionActionPhase = exports.storeTransaction = exports.loadTransaction = exports.storeTickTock = exports.loadTickTock = exports.storeStorageUsedShort = exports.loadStorageUsedShort = exports.storeStorageUsed = exports.loadStorageUsed = exports.storeStorageInfo = void 0;\nvar _helpers_1 = require(\"./_helpers\");\nObject.defineProperty(exports, \"internal\", { enumerable: true, get: function () { return _helpers_1.internal; } });\nObject.defineProperty(exports, \"external\", { enumerable: true, get: function () { return _helpers_1.external; } });\nObject.defineProperty(exports, \"comment\", { enumerable: true, get: function () { return _helpers_1.comment; } });\nvar Account_1 = require(\"./Account\");\nObject.defineProperty(exports, \"loadAccount\", { enumerable: true, get: function () { return Account_1.loadAccount; } });\nObject.defineProperty(exports, \"storeAccount\", { enumerable: true, get: function () { return Account_1.storeAccount; } });\nvar AccountState_1 = require(\"./AccountState\");\nObject.defineProperty(exports, \"loadAccountState\", { enumerable: true, get: function () { return AccountState_1.loadAccountState; } });\nObject.defineProperty(exports, \"storeAccountState\", { enumerable: true, get: function () { return AccountState_1.storeAccountState; } });\nvar AccountStatus_1 = require(\"./AccountStatus\");\nObject.defineProperty(exports, \"loadAccountStatus\", { enumerable: true, get: function () { return AccountStatus_1.loadAccountStatus; } });\nObject.defineProperty(exports, \"storeAccountStatus\", { enumerable: true, get: function () { return AccountStatus_1.storeAccountStatus; } });\nvar AccountStatusChange_1 = require(\"./AccountStatusChange\");\nObject.defineProperty(exports, \"loadAccountStatusChange\", { enumerable: true, get: function () { return AccountStatusChange_1.loadAccountStatusChange; } });\nObject.defineProperty(exports, \"storeAccountStatusChange\", { enumerable: true, get: function () { return AccountStatusChange_1.storeAccountStatusChange; } });\nvar AccountStorage_1 = require(\"./AccountStorage\");\nObject.defineProperty(exports, \"loadAccountStorage\", { enumerable: true, get: function () { return AccountStorage_1.loadAccountStorage; } });\nObject.defineProperty(exports, \"storeAccountStorage\", { enumerable: true, get: function () { return AccountStorage_1.storeAccountStorage; } });\nvar OutList_1 = require(\"./OutList\");\nObject.defineProperty(exports, \"loadOutAction\", { enumerable: true, get: function () { return OutList_1.loadOutAction; } });\nObject.defineProperty(exports, \"storeOutAction\", { enumerable: true, get: function () { return OutList_1.storeOutAction; } });\nObject.defineProperty(exports, \"loadOutList\", { enumerable: true, get: function () { return OutList_1.loadOutList; } });\nObject.defineProperty(exports, \"storeOutList\", { enumerable: true, get: function () { return OutList_1.storeOutList; } });\nvar CommonMessageInfo_1 = require(\"./CommonMessageInfo\");\nObject.defineProperty(exports, \"loadCommonMessageInfo\", { enumerable: true, get: function () { return CommonMessageInfo_1.loadCommonMessageInfo; } });\nObject.defineProperty(exports, \"storeCommonMessageInfo\", { enumerable: true, get: function () { return CommonMessageInfo_1.storeCommonMessageInfo; } });\nvar CommonMessageInfoRelaxed_1 = require(\"./CommonMessageInfoRelaxed\");\nObject.defineProperty(exports, \"loadCommonMessageInfoRelaxed\", { enumerable: true, get: function () { return CommonMessageInfoRelaxed_1.loadCommonMessageInfoRelaxed; } });\nObject.defineProperty(exports, \"storeCommonMessageInfoRelaxed\", { enumerable: true, get: function () { return CommonMessageInfoRelaxed_1.storeCommonMessageInfoRelaxed; } });\nvar ComputeSkipReason_1 = require(\"./ComputeSkipReason\");\nObject.defineProperty(exports, \"loadComputeSkipReason\", { enumerable: true, get: function () { return ComputeSkipReason_1.loadComputeSkipReason; } });\nObject.defineProperty(exports, \"storeComputeSkipReason\", { enumerable: true, get: function () { return ComputeSkipReason_1.storeComputeSkipReason; } });\nvar CurrencyCollection_1 = require(\"./CurrencyCollection\");\nObject.defineProperty(exports, \"loadCurrencyCollection\", { enumerable: true, get: function () { return CurrencyCollection_1.loadCurrencyCollection; } });\nObject.defineProperty(exports, \"storeCurrencyCollection\", { enumerable: true, get: function () { return CurrencyCollection_1.storeCurrencyCollection; } });\nvar DepthBalanceInfo_1 = require(\"./DepthBalanceInfo\");\nObject.defineProperty(exports, \"loadDepthBalanceInfo\", { enumerable: true, get: function () { return DepthBalanceInfo_1.loadDepthBalanceInfo; } });\nObject.defineProperty(exports, \"storeDepthBalanceInfo\", { enumerable: true, get: function () { return DepthBalanceInfo_1.storeDepthBalanceInfo; } });\nvar HashUpdate_1 = require(\"./HashUpdate\");\nObject.defineProperty(exports, \"loadHashUpdate\", { enumerable: true, get: function () { return HashUpdate_1.loadHashUpdate; } });\nObject.defineProperty(exports, \"storeHashUpdate\", { enumerable: true, get: function () { return HashUpdate_1.storeHashUpdate; } });\nvar MasterchainStateExtra_1 = require(\"./MasterchainStateExtra\");\nObject.defineProperty(exports, \"loadMasterchainStateExtra\", { enumerable: true, get: function () { return MasterchainStateExtra_1.loadMasterchainStateExtra; } });\nvar Message_1 = require(\"./Message\");\nObject.defineProperty(exports, \"loadMessage\", { enumerable: true, get: function () { return Message_1.loadMessage; } });\nObject.defineProperty(exports, \"storeMessage\", { enumerable: true, get: function () { return Message_1.storeMessage; } });\nvar MessageRelaxed_1 = require(\"./MessageRelaxed\");\nObject.defineProperty(exports, \"loadMessageRelaxed\", { enumerable: true, get: function () { return MessageRelaxed_1.loadMessageRelaxed; } });\nObject.defineProperty(exports, \"storeMessageRelaxed\", { enumerable: true, get: function () { return MessageRelaxed_1.storeMessageRelaxed; } });\nvar SendMode_1 = require(\"./SendMode\");\nObject.defineProperty(exports, \"SendMode\", { enumerable: true, get: function () { return SendMode_1.SendMode; } });\nvar ShardAccount_1 = require(\"./ShardAccount\");\nObject.defineProperty(exports, \"loadShardAccount\", { enumerable: true, get: function () { return ShardAccount_1.loadShardAccount; } });\nObject.defineProperty(exports, \"storeShardAccount\", { enumerable: true, get: function () { return ShardAccount_1.storeShardAccount; } });\nvar ShardAccounts_1 = require(\"./ShardAccounts\");\nObject.defineProperty(exports, \"ShardAccountRefValue\", { enumerable: true, get: function () { return ShardAccounts_1.ShardAccountRefValue; } });\nObject.defineProperty(exports, \"loadShardAccounts\", { enumerable: true, get: function () { return ShardAccounts_1.loadShardAccounts; } });\nObject.defineProperty(exports, \"storeShardAccounts\", { enumerable: true, get: function () { return ShardAccounts_1.storeShardAccounts; } });\nvar ShardIdent_1 = require(\"./ShardIdent\");\nObject.defineProperty(exports, \"loadShardIdent\", { enumerable: true, get: function () { return ShardIdent_1.loadShardIdent; } });\nObject.defineProperty(exports, \"storeShardIdent\", { enumerable: true, get: function () { return ShardIdent_1.storeShardIdent; } });\nvar ShardStateUnsplit_1 = require(\"./ShardStateUnsplit\");\nObject.defineProperty(exports, \"loadShardStateUnsplit\", { enumerable: true, get: function () { return ShardStateUnsplit_1.loadShardStateUnsplit; } });\nvar SimpleLibrary_1 = require(\"./SimpleLibrary\");\nObject.defineProperty(exports, \"loadSimpleLibrary\", { enumerable: true, get: function () { return SimpleLibrary_1.loadSimpleLibrary; } });\nObject.defineProperty(exports, \"storeSimpleLibrary\", { enumerable: true, get: function () { return SimpleLibrary_1.storeSimpleLibrary; } });\nvar SplitMergeInfo_1 = require(\"./SplitMergeInfo\");\nObject.defineProperty(exports, \"loadSplitMergeInfo\", { enumerable: true, get: function () { return SplitMergeInfo_1.loadSplitMergeInfo; } });\nObject.defineProperty(exports, \"storeSplitMergeInfo\", { enumerable: true, get: function () { return SplitMergeInfo_1.storeSplitMergeInfo; } });\nvar StateInit_1 = require(\"./StateInit\");\nObject.defineProperty(exports, \"loadStateInit\", { enumerable: true, get: function () { return StateInit_1.loadStateInit; } });\nObject.defineProperty(exports, \"storeStateInit\", { enumerable: true, get: function () { return StateInit_1.storeStateInit; } });\nvar StorageInto_1 = require(\"./StorageInto\");\nObject.defineProperty(exports, \"loadStorageInfo\", { enumerable: true, get: function () { return StorageInto_1.loadStorageInfo; } });\nObject.defineProperty(exports, \"storeStorageInfo\", { enumerable: true, get: function () { return StorageInto_1.storeStorageInfo; } });\nvar StorageUsed_1 = require(\"./StorageUsed\");\nObject.defineProperty(exports, \"loadStorageUsed\", { enumerable: true, get: function () { return StorageUsed_1.loadStorageUsed; } });\nObject.defineProperty(exports, \"storeStorageUsed\", { enumerable: true, get: function () { return StorageUsed_1.storeStorageUsed; } });\nvar StorageUsedShort_1 = require(\"./StorageUsedShort\");\nObject.defineProperty(exports, \"loadStorageUsedShort\", { enumerable: true, get: function () { return StorageUsedShort_1.loadStorageUsedShort; } });\nObject.defineProperty(exports, \"storeStorageUsedShort\", { enumerable: true, get: function () { return StorageUsedShort_1.storeStorageUsedShort; } });\nvar TickTock_1 = require(\"./TickTock\");\nObject.defineProperty(exports, \"loadTickTock\", { enumerable: true, get: function () { return TickTock_1.loadTickTock; } });\nObject.defineProperty(exports, \"storeTickTock\", { enumerable: true, get: function () { return TickTock_1.storeTickTock; } });\nvar Transaction_1 = require(\"./Transaction\");\nObject.defineProperty(exports, \"loadTransaction\", { enumerable: true, get: function () { return Transaction_1.loadTransaction; } });\nObject.defineProperty(exports, \"storeTransaction\", { enumerable: true, get: function () { return Transaction_1.storeTransaction; } });\nvar TransactionActionPhase_1 = require(\"./TransactionActionPhase\");\nObject.defineProperty(exports, \"loadTransactionActionPhase\", { enumerable: true, get: function () { return TransactionActionPhase_1.loadTransactionActionPhase; } });\nObject.defineProperty(exports, \"storeTransactionActionPhase\", { enumerable: true, get: function () { return TransactionActionPhase_1.storeTransactionActionPhase; } });\nvar TransactionBouncePhase_1 = require(\"./TransactionBouncePhase\");\nObject.defineProperty(exports, \"loadTransactionBouncePhase\", { enumerable: true, get: function () { return TransactionBouncePhase_1.loadTransactionBouncePhase; } });\nObject.defineProperty(exports, \"storeTransactionBouncePhase\", { enumerable: true, get: function () { return TransactionBouncePhase_1.storeTransactionBouncePhase; } });\nvar TransactionComputePhase_1 = require(\"./TransactionComputePhase\");\nObject.defineProperty(exports, \"loadTransactionComputePhase\", { enumerable: true, get: function () { return TransactionComputePhase_1.loadTransactionComputePhase; } });\nObject.defineProperty(exports, \"storeTransactionComputePhase\", { enumerable: true, get: function () { return TransactionComputePhase_1.storeTransactionComputePhase; } });\nvar TransactionCreditPhase_1 = require(\"./TransactionCreditPhase\");\nObject.defineProperty(exports, \"loadTransactionCreditPhase\", { enumerable: true, get: function () { return TransactionCreditPhase_1.loadTransactionCreditPhase; } });\nObject.defineProperty(exports, \"storeTransactionCreditPhase\", { enumerable: true, get: function () { return TransactionCreditPhase_1.storeTransactionCreditPhase; } });\nvar TransactionDescription_1 = require(\"./TransactionDescription\");\nObject.defineProperty(exports, \"loadTransactionDescription\", { enumerable: true, get: function () { return TransactionDescription_1.loadTransactionDescription; } });\nObject.defineProperty(exports, \"storeTransactionDescription\", { enumerable: true, get: function () { return TransactionDescription_1.storeTransactionDescription; } });\nvar TransactionStoragePhase_1 = require(\"./TransactionStoragePhase\");\nObject.defineProperty(exports, \"loadTransactionStoragePhase\", { enumerable: true, get: function () { return TransactionStoragePhase_1.loadTransactionStoragePhase; } });\nObject.defineProperty(exports, \"storeTransactionsStoragePhase\", { enumerable: true, get: function () { return TransactionStoragePhase_1.storeTransactionsStoragePhase; } });\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.openContract = void 0;\nconst Address_1 = require(\"../address/Address\");\nconst Cell_1 = require(\"../boc/Cell\");\nfunction openContract(src, factory) {\n    // Resolve parameters\n    let address;\n    let init = null;\n    if (!Address_1.Address.isAddress(src.address)) {\n        throw Error('Invalid address');\n    }\n    address = src.address;\n    if (src.init) {\n        if (!(src.init.code instanceof Cell_1.Cell)) {\n            throw Error('Invalid init.code');\n        }\n        if (!(src.init.data instanceof Cell_1.Cell)) {\n            throw Error('Invalid init.data');\n        }\n        init = src.init;\n    }\n    // Create executor\n    let executor = factory({ address, init });\n    // Create proxy\n    return new Proxy(src, {\n        get(target, prop) {\n            const value = target[prop];\n            if (typeof prop === 'string' && (prop.startsWith('get') || prop.startsWith('send'))) {\n                if (typeof value === 'function') {\n                    return (...args) => value.apply(target, [executor, ...args]);\n                }\n            }\n            return value;\n        }\n    });\n}\nexports.openContract = openContract;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ComputeError = void 0;\nclass ComputeError extends Error {\n    constructor(message, exitCode, opts) {\n        super(message);\n        this.exitCode = exitCode;\n        this.debugLogs = opts && opts.debugLogs ? opts.debugLogs : null;\n        this.logs = opts && opts.logs ? opts.logs : null;\n        Object.setPrototypeOf(this, ComputeError.prototype);\n    }\n}\nexports.ComputeError = ComputeError;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getMethodId = void 0;\nconst TABLE = new Int16Array([\n    0x0000, 0x1021, 0x2042, 0x3063, 0x4084, 0x50a5, 0x60c6, 0x70e7,\n    0x8108, 0x9129, 0xa14a, 0xb16b, 0xc18c, 0xd1ad, 0xe1ce, 0xf1ef,\n    0x1231, 0x0210, 0x3273, 0x2252, 0x52b5, 0x4294, 0x72f7, 0x62d6,\n    0x9339, 0x8318, 0xb37b, 0xa35a, 0xd3bd, 0xc39c, 0xf3ff, 0xe3de,\n    0x2462, 0x3443, 0x0420, 0x1401, 0x64e6, 0x74c7, 0x44a4, 0x5485,\n    0xa56a, 0xb54b, 0x8528, 0x9509, 0xe5ee, 0xf5cf, 0xc5ac, 0xd58d,\n    0x3653, 0x2672, 0x1611, 0x0630, 0x76d7, 0x66f6, 0x5695, 0x46b4,\n    0xb75b, 0xa77a, 0x9719, 0x8738, 0xf7df, 0xe7fe, 0xd79d, 0xc7bc,\n    0x48c4, 0x58e5, 0x6886, 0x78a7, 0x0840, 0x1861, 0x2802, 0x3823,\n    0xc9cc, 0xd9ed, 0xe98e, 0xf9af, 0x8948, 0x9969, 0xa90a, 0xb92b,\n    0x5af5, 0x4ad4, 0x7ab7, 0x6a96, 0x1a71, 0x0a50, 0x3a33, 0x2a12,\n    0xdbfd, 0xcbdc, 0xfbbf, 0xeb9e, 0x9b79, 0x8b58, 0xbb3b, 0xab1a,\n    0x6ca6, 0x7c87, 0x4ce4, 0x5cc5, 0x2c22, 0x3c03, 0x0c60, 0x1c41,\n    0xedae, 0xfd8f, 0xcdec, 0xddcd, 0xad2a, 0xbd0b, 0x8d68, 0x9d49,\n    0x7e97, 0x6eb6, 0x5ed5, 0x4ef4, 0x3e13, 0x2e32, 0x1e51, 0x0e70,\n    0xff9f, 0xefbe, 0xdfdd, 0xcffc, 0xbf1b, 0xaf3a, 0x9f59, 0x8f78,\n    0x9188, 0x81a9, 0xb1ca, 0xa1eb, 0xd10c, 0xc12d, 0xf14e, 0xe16f,\n    0x1080, 0x00a1, 0x30c2, 0x20e3, 0x5004, 0x4025, 0x7046, 0x6067,\n    0x83b9, 0x9398, 0xa3fb, 0xb3da, 0xc33d, 0xd31c, 0xe37f, 0xf35e,\n    0x02b1, 0x1290, 0x22f3, 0x32d2, 0x4235, 0x5214, 0x6277, 0x7256,\n    0xb5ea, 0xa5cb, 0x95a8, 0x8589, 0xf56e, 0xe54f, 0xd52c, 0xc50d,\n    0x34e2, 0x24c3, 0x14a0, 0x0481, 0x7466, 0x6447, 0x5424, 0x4405,\n    0xa7db, 0xb7fa, 0x8799, 0x97b8, 0xe75f, 0xf77e, 0xc71d, 0xd73c,\n    0x26d3, 0x36f2, 0x0691, 0x16b0, 0x6657, 0x7676, 0x4615, 0x5634,\n    0xd94c, 0xc96d, 0xf90e, 0xe92f, 0x99c8, 0x89e9, 0xb98a, 0xa9ab,\n    0x5844, 0x4865, 0x7806, 0x6827, 0x18c0, 0x08e1, 0x3882, 0x28a3,\n    0xcb7d, 0xdb5c, 0xeb3f, 0xfb1e, 0x8bf9, 0x9bd8, 0xabbb, 0xbb9a,\n    0x4a75, 0x5a54, 0x6a37, 0x7a16, 0x0af1, 0x1ad0, 0x2ab3, 0x3a92,\n    0xfd2e, 0xed0f, 0xdd6c, 0xcd4d, 0xbdaa, 0xad8b, 0x9de8, 0x8dc9,\n    0x7c26, 0x6c07, 0x5c64, 0x4c45, 0x3ca2, 0x2c83, 0x1ce0, 0x0cc1,\n    0xef1f, 0xff3e, 0xcf5d, 0xdf7c, 0xaf9b, 0xbfba, 0x8fd9, 0x9ff8,\n    0x6e17, 0x7e36, 0x4e55, 0x5e74, 0x2e93, 0x3eb2, 0x0ed1, 0x1ef0\n]);\nfunction crc16(data) {\n    if (!(data instanceof Buffer)) {\n        data = Buffer.from(data);\n    }\n    let crc = 0;\n    for (let index = 0; index < data.length; index++) {\n        const byte = data[index];\n        crc = (TABLE[((crc >> 8) ^ byte) & 0xff] ^ (crc << 8)) & 0xffff;\n    }\n    return crc;\n}\nfunction getMethodId(name) {\n    return (crc16(name) & 0xffff) | 0x10000;\n}\nexports.getMethodId = getMethodId;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.safeSignVerify = exports.safeSign = void 0;\nconst crypto_1 = require(\"@ton/crypto\");\nconst MIN_SEED_LENGTH = 8;\nconst MAX_SEED_LENGTH = 64;\nfunction createSafeSignHash(cell, seed) {\n    let seedData = Buffer.from(seed);\n    if (seedData.length > MAX_SEED_LENGTH) {\n        throw Error('Seed can\\t be longer than 64 bytes');\n    }\n    if (seedData.length < MIN_SEED_LENGTH) {\n        throw Error('Seed must be at least 8 bytes');\n    }\n    return (0, crypto_1.sha256_sync)(Buffer.concat([Buffer.from([0xff, 0xff]), seedData, cell.hash()]));\n}\nfunction safeSign(cell, secretKey, seed = 'ton-safe-sign-magic') {\n    return (0, crypto_1.sign)(createSafeSignHash(cell, seed), secretKey);\n}\nexports.safeSign = safeSign;\nfunction safeSignVerify(cell, signature, publicKey, seed = 'ton-safe-sign-magic') {\n    return (0, crypto_1.signVerify)(createSafeSignHash(cell, seed), signature, publicKey);\n}\nexports.safeSignVerify = safeSignVerify;\n", "\"use strict\";\n/**\n * Copyright (c) Whales Corp.\n * All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.safeSignVerify = exports.safeSign = exports.getMethodId = exports.base32Encode = exports.base32Decode = exports.crc32c = exports.crc16 = exports.fromNano = exports.toNano = exports.ComputeError = exports.openContract = exports.TupleBuilder = exports.TupleReader = exports.serializeTuple = exports.parseTuple = exports.generateMerkleUpdate = exports.generateMerkleProof = exports.exoticPruned = exports.exoticMerkleUpdate = exports.exoticMerkleProof = exports.Dictionary = exports.Cell = exports.CellType = exports.Slice = exports.beginCell = exports.Builder = exports.BitBuilder = exports.BitReader = exports.BitString = exports.contractAddress = exports.ADNLAddress = exports.ExternalAddress = exports.address = exports.Address = void 0;\n// Address\nvar Address_1 = require(\"./address/Address\");\nObject.defineProperty(exports, \"Address\", { enumerable: true, get: function () { return Address_1.Address; } });\nObject.defineProperty(exports, \"address\", { enumerable: true, get: function () { return Address_1.address; } });\nvar ExternalAddress_1 = require(\"./address/ExternalAddress\");\nObject.defineProperty(exports, \"ExternalAddress\", { enumerable: true, get: function () { return ExternalAddress_1.ExternalAddress; } });\nvar ADNLAddress_1 = require(\"./address/ADNLAddress\");\nObject.defineProperty(exports, \"ADNLAddress\", { enumerable: true, get: function () { return ADNLAddress_1.ADNLAddress; } });\nvar contractAddress_1 = require(\"./address/contractAddress\");\nObject.defineProperty(exports, \"contractAddress\", { enumerable: true, get: function () { return contractAddress_1.contractAddress; } });\n// BitString\nvar BitString_1 = require(\"./boc/BitString\");\nObject.defineProperty(exports, \"BitString\", { enumerable: true, get: function () { return BitString_1.BitString; } });\nvar BitReader_1 = require(\"./boc/BitReader\");\nObject.defineProperty(exports, \"BitReader\", { enumerable: true, get: function () { return BitReader_1.BitReader; } });\nvar BitBuilder_1 = require(\"./boc/BitBuilder\");\nObject.defineProperty(exports, \"BitBuilder\", { enumerable: true, get: function () { return BitBuilder_1.BitBuilder; } });\n// Cell\nvar Builder_1 = require(\"./boc/Builder\");\nObject.defineProperty(exports, \"Builder\", { enumerable: true, get: function () { return Builder_1.Builder; } });\nObject.defineProperty(exports, \"beginCell\", { enumerable: true, get: function () { return Builder_1.beginCell; } });\nvar Slice_1 = require(\"./boc/Slice\");\nObject.defineProperty(exports, \"Slice\", { enumerable: true, get: function () { return Slice_1.Slice; } });\nvar CellType_1 = require(\"./boc/CellType\");\nObject.defineProperty(exports, \"CellType\", { enumerable: true, get: function () { return CellType_1.CellType; } });\nvar Cell_1 = require(\"./boc/Cell\");\nObject.defineProperty(exports, \"Cell\", { enumerable: true, get: function () { return Cell_1.Cell; } });\n// Dict\nvar Dictionary_1 = require(\"./dict/Dictionary\");\nObject.defineProperty(exports, \"Dictionary\", { enumerable: true, get: function () { return Dictionary_1.Dictionary; } });\n// Exotics\nvar exoticMerkleProof_1 = require(\"./boc/cell/exoticMerkleProof\");\nObject.defineProperty(exports, \"exoticMerkleProof\", { enumerable: true, get: function () { return exoticMerkleProof_1.exoticMerkleProof; } });\nvar exoticMerkleUpdate_1 = require(\"./boc/cell/exoticMerkleUpdate\");\nObject.defineProperty(exports, \"exoticMerkleUpdate\", { enumerable: true, get: function () { return exoticMerkleUpdate_1.exoticMerkleUpdate; } });\nvar exoticPruned_1 = require(\"./boc/cell/exoticPruned\");\nObject.defineProperty(exports, \"exoticPruned\", { enumerable: true, get: function () { return exoticPruned_1.exoticPruned; } });\n// Merkle trees\nvar generateMerkleProof_1 = require(\"./dict/generateMerkleProof\");\nObject.defineProperty(exports, \"generateMerkleProof\", { enumerable: true, get: function () { return generateMerkleProof_1.generateMerkleProof; } });\nvar generateMerkleUpdate_1 = require(\"./dict/generateMerkleUpdate\");\nObject.defineProperty(exports, \"generateMerkleUpdate\", { enumerable: true, get: function () { return generateMerkleUpdate_1.generateMerkleUpdate; } });\nvar tuple_1 = require(\"./tuple/tuple\");\nObject.defineProperty(exports, \"parseTuple\", { enumerable: true, get: function () { return tuple_1.parseTuple; } });\nObject.defineProperty(exports, \"serializeTuple\", { enumerable: true, get: function () { return tuple_1.serializeTuple; } });\nvar reader_1 = require(\"./tuple/reader\");\nObject.defineProperty(exports, \"TupleReader\", { enumerable: true, get: function () { return reader_1.TupleReader; } });\nvar builder_1 = require(\"./tuple/builder\");\nObject.defineProperty(exports, \"TupleBuilder\", { enumerable: true, get: function () { return builder_1.TupleBuilder; } });\n// Types\n__exportStar(require(\"./types/_export\"), exports);\nvar openContract_1 = require(\"./contract/openContract\");\nObject.defineProperty(exports, \"openContract\", { enumerable: true, get: function () { return openContract_1.openContract; } });\nvar ComputeError_1 = require(\"./contract/ComputeError\");\nObject.defineProperty(exports, \"ComputeError\", { enumerable: true, get: function () { return ComputeError_1.ComputeError; } });\n// Utility\nvar convert_1 = require(\"./utils/convert\");\nObject.defineProperty(exports, \"toNano\", { enumerable: true, get: function () { return convert_1.toNano; } });\nObject.defineProperty(exports, \"fromNano\", { enumerable: true, get: function () { return convert_1.fromNano; } });\nvar crc16_1 = require(\"./utils/crc16\");\nObject.defineProperty(exports, \"crc16\", { enumerable: true, get: function () { return crc16_1.crc16; } });\nvar crc32c_1 = require(\"./utils/crc32c\");\nObject.defineProperty(exports, \"crc32c\", { enumerable: true, get: function () { return crc32c_1.crc32c; } });\nvar base32_1 = require(\"./utils/base32\");\nObject.defineProperty(exports, \"base32Decode\", { enumerable: true, get: function () { return base32_1.base32Decode; } });\nObject.defineProperty(exports, \"base32Encode\", { enumerable: true, get: function () { return base32_1.base32Encode; } });\nvar getMethodId_1 = require(\"./utils/getMethodId\");\nObject.defineProperty(exports, \"getMethodId\", { enumerable: true, get: function () { return getMethodId_1.getMethodId; } });\n// Crypto\nvar safeSign_1 = require(\"./crypto/safeSign\");\nObject.defineProperty(exports, \"safeSign\", { enumerable: true, get: function () { return safeSign_1.safeSign; } });\nObject.defineProperty(exports, \"safeSignVerify\", { enumerable: true, get: function () { return safeSign_1.safeSignVerify; } });\n"],
  "mappings": "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,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,SAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,SAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,SAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,SAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,SAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAOjI,EAAO,EAAA,GAAK,UAAA,GACvB,IAAIiI,EAAO,Y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;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAO;AAAA,MAAY;AAAA,MAAU;AAAA,MAAW;AAAA,MAAO;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAY;AAAA,MAAW;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAW;AAAA,MAChyC;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAS;AAAA,MAAS;AAAA,MAAO;AAAA,MAAW;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAO;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAO;AAAA,MAAO;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAO;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAC1jC;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAO;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAO;AAAA,MAAW;AAAA,MAAS;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAY;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAY;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAY;AAAA,MAAW;AAAA,MAAY;AAAA,MAAW;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAO;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAO;AAAA,MAAY;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MACnuD;AAAA,MAAO;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,MAAW;AAAA,MAAY;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAY;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAY;AAAA,MAAW;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAY;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAC/ijrB;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAW;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAY;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MACtjB;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAO;AAAA,MAAW;AAAA,MAAW;AAAA,MAAS;AAAA,MAAW;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAY;AAAA,MAAS;AAAA,MAAY;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAY;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAW;AAAA,MAAU;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAC9hB;AAAA,MAAU;AAAA,MAAU;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAO;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAQ;AAAA,MACxK;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MACxK;AAAA,MAAO;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAS;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAC1qB;AAAA,MAAW;AAAA,MAAO;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAO;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAY;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAS;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAO;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAO;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAY;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAY;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MACj+B;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAW;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAW;AAAA,MAAW;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAO;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MACtvfjvC;AAAA,MAAW;AAAA,MAAW;AAAA,MAAW;AAAA,MAAY;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACtE;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAO;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAS;AAAA,MAAW;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAY;AAAA,MAAU;AAAA,MAAY;AAAA,MAAY;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAW;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAU;AAAA,MAAO;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAQ;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAU;AAAA,MAAW;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAU;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAS;AAAA,MAAU;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAQ;AAAA,MAAO;AAAA,MAAU;AAAA,MACjjylkC;AAAA,MAAQ;AAAA,MAAY;AAAA,MAAU;AAAA,MAAW;AAAA,MAAS;AAAA,MAA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A,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MACxD;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAAQ;AAAA,MAA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",
  "names": ["import_dist", "import_dist", "import_dist", "import_dist", "alphabet", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "CellType", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "b64Tab", "uint8array2packed", "arr", "existingPacked", "existingPackedLen", "bigEndianMod", "i", "intOffset", "byteOffset", "packed", "existingByteLen", "shiftModifier", "length", "push", "value", "binLen", "getStrConverter", "format", "utfType", "Error", "str", "existingBin", "existingBinLen", "num", "parseInt", "substr", "isNaN", "codePnt", "codePntArr", "j", "transposeBytes", "byteCnt", "charCodeAt", "tmpInt", "strPart", "firstEqual", "indexOf", "search", "replace", "charAt", "ArrayBuffer", "ignore", "Uint8Array", "getOutputConverter", "outputBinLen", "outputOptions", "binarray", "outputLength", "formatOpts", "srcByte", "toUpperCase", "triplet", "int1", "int2", "String", "fromCharCode", "retVal", "arrView", "K_sha2", "H_trunc", "H_full", "sha_variant_error", "packedLEConcat", "a", "b", "arrOffset", "aByteLen", "bByteLen", "leftShiftAmount", "rightShiftAmount", "pop", "concat", "getOutputOpts", "options", "outputUpper", "b64Pad", "outputLen", "lenErrstr", "parseInputOption", "key", "fallback", "errStr", "n", "variant", "inputFormat", "inputOptions", "this", "numRounds", "shaVariant", "remainder", "remainderLen", "updateCalled", "processedLen", "macKeySet", "keyWithIPad", "keyWithOPad", "jsSHABase", "srcString", "updateProcessedLen", "variantBlockIntInc", "variantBlockSize", "convertRet", "converterFunc", "chunkBinLen", "chunk", "chunkIntLen", "intermediateState", "roundFunc", "slice", "finalizedState", "isVariableLen", "formatFunc", "getMAC", "finalizeFunc", "stateCloneFunc", "newStateFunc", "HMACSupported", "keyConverterFunc", "_setHMACKey", "blockByteSize", "lastArrayIndex", "_getHMAC", "firstHash", "extendStatics", "d", "Object", "setPrototypeOf", "__proto__", "Array", "p", "prototype", "hasOwnProperty", "call", "__extends", "__", "constructor", "create", "rotl_32", "x", "rotr_32", "shr_32", "parity_32", "y", "z", "ch_32", "maj_32", "sigma0_32", "safeAdd_32_2", "lsw", "safeAdd_32_4", "c", "safeAdd_32_5", "e", "gamma0_32", "sigma1_32", "getNewState", "_variant", "roundSHA1", "block", "H", "T", "t", "W", "finalizeSHA1", "remainderBinLen", "processedBinLen", "offset", "totalLen", "r", "o", "resolvedOptions", "_this", "_super", "state", "getNewState256", "roundSHA256", "f", "g", "h", "T1", "T2", "msint_32", "lsint_32", "highOrder", "lowOrder", "rotl_64", "tmp", "Int_64", "rotr_64", "shr_64", "ch_64", "maj_64", "sigma0_64", "rotr28", "rotr34", "rotr39", "safeAdd_64_2", "msw", "safeAdd_64_4", "safeAdd_64_5", "xor_64_2", "gamma0_64", "rotr1", "rotr8", "shr7", "sigma1_64", "rotr14", "rotr18", "rotr41", "K_sha512", "getNewState512", "roundSHA512", "rotr19", "rotr61", "shr6", "rc_sha3", "r_sha3", "cloneSHA3State", "clone", "roundSHA3", "round", "B", "C", "D", "left_encode", "byte", "numEncodedBytes", "x_64", "encode_string", "input", "byte_pad", "outputByteLen", "encodedLen", "outputIntLen", "intsToAppend", "delimiter", "_initializeKMAC", "_getKMAC", "_initializeCSHAKE", "_processedBinLen", "blockSize", "temp", "state_offset", "binaryStringInc", "remainderIntLen", "jsSHA", "funcNameOverride", "funcName", "customization", "packedParams", "byte_pad_out", "kmacKey", "concatedRemainder", "shaObj", "jsSHA1", "jsSHA256", "jsSHA512", "jsSHA3", "update", "getHash", "setHMACKey", "getHMAC", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "require_sha256", "import_dist", "require_sha512", "import_dist", "require_pbkdf2_sha512", "import_dist", "require_hmac_sha512", "import_dist", "require_getSecureRandom", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "require_wordlist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "require_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "src", "dest", "createdLt", "createdAt", "import_dist", "needRef", "import_dist", "cell", "import_dist", "src", "dest", "createdLt", "createdAt", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "needRef", "import_dist", "SendMode", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "import_dist", "require_dist", "import_dist", "exports"]
}
